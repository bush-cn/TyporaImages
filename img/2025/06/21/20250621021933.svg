<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.2" viewBox="0 0 33867 19050" preserveAspectRatio="xMidYMid" fill-rule="evenodd" stroke-width="28.222" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" xmlns:ooo="http://xml.openoffice.org/svg/export" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:presentation="http://sun.com/xmlns/staroffice/presentation" xmlns:smil="http://www.w3.org/2001/SMIL20/" xmlns:anim="urn:oasis:names:tc:opendocument:xmlns:animation:1.0" xml:space="preserve">
 <defs class="ClipPathGroup">
  <clipPath id="presentation_clip_path" clipPathUnits="userSpaceOnUse">
   <rect x="0" y="0" width="33867" height="19050"/>
  </clipPath>
  <clipPath id="presentation_clip_path_shrink" clipPathUnits="userSpaceOnUse">
   <rect x="33" y="19" width="33800" height="19012"/>
  </clipPath>
 </defs>
 <defs>
  <g id="ooo:meta_slides" ooo:number-of-slides="1" ooo:start-slide-number="0">
   <g id="ooo:meta_dummy_slide" ooo:slide="dummy-slide" ooo:master="dummy-master-page" ooo:background-visibility="hidden" ooo:master-objects-visibility="hidden" ooo:has-transition="false"/>
   <g id="ooo:meta_slide_0" ooo:slide="id1" ooo:master="id2" ooo:date-time-visibility="hidden" ooo:footer-visibility="hidden" ooo:has-transition="true"/>
  </g>
 </defs>
 <defs id="presentation-animations"/>
 <defs>
  <font id="EmbeddedFont_1" horiz-adv-x="2048">
   <font-face font-family="DejaVu Sans embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1879" descent="476"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="）" horiz-adv-x="742" d="M 736,-320 L 544,-320 C 896,-112 1072,181 1072,560 1072,949 896,1251 544,1464 L 736,1464 C 891,1384 1017,1263 1116,1100 1215,937 1264,757 1264,560 1264,368 1215,191 1116,28 1017,-135 891,-251 736,-320 Z"/>
   <glyph unicode="（" horiz-adv-x="742" d="M 1312,1464 L 1504,1464 C 1152,1251 976,949 976,560 976,181 1152,-112 1504,-320 L 1312,-320 C 1157,-251 1031,-135 932,28 833,191 784,368 784,560 784,757 833,937 932,1100 1031,1263 1157,1384 1312,1464 Z"/>
   <glyph unicode="高" horiz-adv-x="1826" d="M 1040,1672 L 1128,1520 1936,1520 1936,1384 112,1384 112,1520 936,1520 872,1624 1040,1672 Z M 392,1264 L 1640,1264 1640,848 392,848 392,1264 Z M 552,984 L 1480,984 1480,1128 552,1128 552,984 Z M 1864,736 L 1864,-24 C 1859,-136 1776,-192 1616,-192 L 1408,-176 1376,-32 1608,-48 C 1672,-48 1704,-24 1704,24 L 1704,600 336,600 336,-192 176,-192 176,736 1864,736 Z M 568,480 L 1464,480 1464,48 568,48 568,480 Z M 720,184 L 1312,184 1312,352 720,352 720,184 Z"/>
   <glyph unicode="验" horiz-adv-x="1826" d="M 152,1592 L 760,1592 704,752 840,752 C 824,315 795,51 752,-40 709,-131 640,-176 544,-176 L 424,-176 392,-24 568,-16 C 621,-5 653,203 664,608 L 176,608 240,1328 384,1304 344,752 552,752 608,1456 152,1456 152,1592 Z M 512,456 L 544,312 C 437,232 317,163 184,104 L 128,264 C 267,317 395,381 512,456 Z M 1312,1632 L 1472,1584 1432,1504 C 1592,1291 1760,1128 1936,1016 L 1848,856 1712,960 1712,840 1016,840 1016,944 896,848 800,992 C 1035,1195 1205,1408 1312,1632 Z M 1056,984 L 1688,984 C 1581,1080 1469,1208 1352,1368 1256,1213 1157,1085 1056,984 Z M 872,48 L 1448,48 C 1533,283 1600,515 1648,744 L 1816,688 C 1752,443 1683,229 1608,48 L 1896,48 1896,-112 872,-112 872,48 Z M 1352,720 L 1448,264 1288,224 C 1277,389 1251,544 1208,688 L 1352,720 Z M 1048,672 C 1112,507 1152,336 1168,160 L 1024,120 C 1003,307 963,480 904,640 L 1048,672 Z"/>
   <glyph unicode="题" horiz-adv-x="1880" d="M 224,1616 L 896,1616 896,880 224,880 224,1616 Z M 376,1312 L 744,1312 744,1480 376,1480 376,1312 Z M 376,1016 L 744,1016 744,1184 376,1184 376,1016 Z M 120,744 L 1016,744 1016,600 704,600 704,384 952,384 952,248 704,248 704,40 C 805,-3 1227,-24 1968,-24 L 1920,-184 1536,-184 C 1125,-184 848,-164 704,-124 560,-84 437,-16 336,80 299,-21 251,-115 192,-200 L 80,-88 C 192,83 259,277 280,496 L 424,464 392,256 C 440,197 491,152 544,120 L 544,600 120,600 120,744 Z M 1848,1328 L 1848,400 1696,400 1696,1184 1256,1184 1256,392 1096,392 1096,1328 1360,1328 1376,1472 1032,1472 1032,1616 1904,1616 1904,1472 1536,1472 1520,1328 1848,1328 Z M 1400,1064 L 1552,1064 1552,736 C 1552,395 1384,163 1048,40 L 944,168 C 1216,269 1363,429 1384,648 L 1400,1064 Z M 1616,416 L 1936,144 1816,16 C 1725,123 1616,227 1488,328 L 1616,416 Z"/>
   <glyph unicode="项" horiz-adv-x="1880" d="M 1840,1288 L 1840,248 1680,248 1680,1144 1024,1144 1024,240 872,240 872,1288 1224,1288 1248,1448 792,1448 792,1592 1904,1592 1904,1448 1408,1448 1384,1288 1840,1288 Z M 1280,976 L 1432,976 1424,600 C 1424,232 1211,-29 784,-184 L 680,-48 C 1043,69 1237,261 1264,528 L 1280,976 Z M 1496,264 L 1944,-56 1824,-184 C 1696,-61 1547,59 1376,176 L 1496,264 Z M 120,1480 L 704,1480 704,1328 496,1328 496,320 712,408 736,264 C 555,184 355,117 136,64 L 104,216 336,272 336,1328 120,1328 120,1480 Z"/>
   <glyph unicode="集" horiz-adv-x="1880" d="M 520,1664 L 672,1616 608,1496 1024,1496 960,1608 1104,1656 1184,1496 1840,1496 1840,1360 1184,1360 1184,1248 1736,1248 1736,1120 1184,1120 1184,1000 1736,1000 1736,880 1184,880 1184,768 1864,768 1864,632 528,632 528,552 368,552 368,1176 184,1016 104,1160 C 296,1320 435,1488 520,1664 Z M 1024,1248 L 1024,1360 528,1360 528,1248 1024,1248 Z M 1024,1000 L 1024,1120 528,1120 528,1000 1024,1000 Z M 1024,768 L 1024,880 528,880 528,768 1024,768 Z M 136,448 L 944,448 944,576 1104,576 1104,448 1904,448 1904,312 1232,312 C 1419,184 1659,88 1952,24 L 1864,-144 C 1549,-48 1296,91 1104,272 L 1104,-192 944,-192 944,280 C 752,104 504,-35 200,-136 L 96,8 C 379,83 611,184 792,312 L 136,312 136,448 Z"/>
   <glyph unicode="阅" horiz-adv-x="1668" d="M 1288,1336 L 1440,1248 C 1392,1147 1339,1061 1280,992 L 1432,992 1432,464 1256,464 1256,224 C 1256,187 1280,168 1328,168 1392,168 1429,173 1440,184 1451,195 1459,248 1464,344 L 1608,296 C 1603,168 1585,91 1556,64 1527,37 1451,24 1328,24 1184,24 1109,67 1104,152 L 1104,464 960,464 C 949,245 829,85 600,-16 L 480,112 C 688,192 800,309 816,464 L 624,464 624,992 1112,992 C 1181,1093 1240,1208 1288,1336 Z M 768,600 L 1288,600 1288,856 768,856 768,600 Z M 776,1328 C 840,1259 891,1184 928,1104 L 792,1032 648,1248 776,1328 Z M 512,1680 C 587,1595 648,1501 696,1400 L 552,1312 C 509,1413 451,1507 376,1592 L 512,1680 Z M 856,1584 L 1840,1584 1840,32 C 1840,-117 1779,-192 1656,-192 L 1504,-184 1464,-16 1624,-32 C 1661,-32 1680,5 1680,80 L 1680,1440 856,1440 856,1584 Z M 208,1296 L 368,1296 368,-184 208,-184 208,1296 Z"/>
   <glyph unicode="问" horiz-adv-x="1668" d="M 512,1680 C 587,1595 648,1501 696,1400 L 552,1312 C 509,1413 451,1507 376,1592 L 512,1680 Z M 856,1584 L 1840,1584 1840,32 C 1840,-117 1779,-192 1656,-192 L 1504,-184 1464,-16 1624,-32 C 1661,-32 1680,5 1680,80 L 1680,1440 856,1440 856,1584 Z M 208,1296 L 368,1296 368,-184 208,-184 208,1296 Z M 632,1032 L 1384,1032 1384,272 632,272 632,1032 Z M 792,424 L 1224,424 1224,880 792,880 792,424 Z"/>
   <glyph unicode="重" horiz-adv-x="1826" d="M 1720,1624 L 1800,1488 1096,1456 1096,1328 1928,1328 1928,1184 1096,1184 1096,1072 1752,1072 1752,392 1096,392 1096,280 1848,280 1848,136 1096,136 1096,24 1920,24 1920,-128 112,-128 112,24 936,24 936,136 192,136 192,280 936,280 936,392 272,392 272,1072 936,1072 936,1184 128,1184 128,1328 936,1328 936,1448 264,1432 216,1576 C 717,1576 1219,1592 1720,1624 Z M 424,800 L 936,800 936,928 424,928 424,800 Z M 1096,928 L 1096,800 1608,800 1608,928 1096,928 Z M 424,536 L 936,536 936,664 424,664 424,536 Z M 1096,664 L 1096,536 1608,536 1608,664 1096,664 Z"/>
   <glyph unicode="醒" horiz-adv-x="1880" d="M 104,1600 L 1000,1600 1000,1456 712,1456 712,1256 944,1256 944,-184 800,-184 800,-56 288,-56 288,-184 152,-184 152,1256 384,1256 384,1456 104,1456 104,1600 Z M 592,1256 L 592,1456 512,1456 512,1256 592,1256 Z M 288,392 L 800,392 800,560 C 709,560 652,572 628,596 604,620 592,667 592,736 L 592,1112 512,1112 C 512,808 461,584 360,440 L 288,496 288,392 Z M 712,1112 L 712,776 C 712,739 720,720 736,720 L 800,712 800,1112 712,1112 Z M 288,576 C 352,693 384,872 384,1112 L 288,1112 288,576 Z M 288,80 L 800,80 800,256 288,256 288,80 Z M 1120,1608 L 1880,1608 1880,880 1592,880 1592,680 1904,680 1904,544 1592,544 1592,344 1872,344 1872,208 1592,208 1592,16 1944,16 1944,-136 1056,-136 1056,16 1432,16 1432,208 1152,208 1152,344 1432,344 1432,544 1208,544 1208,536 1096,304 968,400 C 1048,523 1107,669 1144,840 L 1288,792 1256,680 1432,680 1432,880 1120,880 1120,1608 Z M 1272,1304 L 1720,1304 1720,1472 1272,1472 1272,1304 Z M 1272,1016 L 1720,1016 1720,1176 1272,1176 1272,1016 Z"/>
   <glyph unicode="邮" horiz-adv-x="1773" d="M 1912,1560 L 1912,1408 1696,896 C 1851,731 1928,568 1928,408 1928,179 1840,64 1664,64 L 1488,96 1456,264 C 1536,237 1605,224 1664,224 1733,224 1768,285 1768,408 1768,563 1685,715 1520,864 L 1744,1408 1376,1408 1376,-184 1216,-184 1216,1560 1912,1560 Z M 1072,1296 L 1072,-184 912,-184 912,-32 328,-32 328,-184 168,-184 168,1296 536,1296 536,1656 696,1656 696,1296 1072,1296 Z M 328,704 L 536,704 536,1144 328,1144 328,704 Z M 696,1144 L 696,704 912,704 912,1144 696,1144 Z M 328,120 L 536,120 536,560 328,560 328,120 Z M 696,560 L 696,120 912,120 912,560 696,560 Z"/>
   <glyph unicode="邀" horiz-adv-x="1880" d="M 240,1608 C 347,1539 443,1456 528,1360 L 416,1224 C 325,1331 229,1419 128,1488 L 240,1608 Z M 104,944 L 504,944 504,176 C 584,117 683,80 800,64 917,48 1301,40 1952,40 L 1872,-136 1232,-136 C 859,-136 595,-69 440,64 L 208,-168 96,0 344,152 344,792 104,792 104,944 Z M 880,1656 L 1040,1624 992,1520 1240,1520 1240,936 632,936 632,1520 832,1520 880,1656 Z M 776,1280 L 1104,1280 1104,1408 776,1408 776,1280 Z M 776,1048 L 1104,1048 1104,1168 776,1168 776,1048 Z M 1464,1656 L 1600,1608 1544,1352 1936,1352 1936,1208 1800,1208 C 1789,1000 1757,813 1704,648 L 1920,272 1800,152 1640,472 C 1565,323 1469,205 1352,120 L 1248,248 C 1376,339 1475,469 1544,640 L 1392,872 1512,952 1600,816 C 1632,933 1651,1064 1656,1208 L 1496,1208 C 1464,1091 1424,989 1376,904 L 1264,992 C 1355,1195 1421,1416 1464,1656 Z M 984,912 L 1048,800 1352,800 1352,672 904,672 896,568 1248,568 C 1248,371 1233,248 1204,200 1175,152 1125,128 1056,128 L 912,144 888,280 1040,264 C 1072,264 1091,275 1096,296 L 1120,440 864,440 C 821,339 747,248 640,168 L 536,296 C 685,397 763,523 768,672 L 552,672 552,800 896,800 856,872 984,912 Z"/>
   <glyph unicode="通" horiz-adv-x="1880" d="M 240,1608 C 347,1539 443,1456 528,1360 L 416,1224 C 325,1331 229,1419 128,1488 L 240,1608 Z M 104,944 L 504,944 504,176 C 584,117 683,80 800,64 917,48 1301,40 1952,40 L 1872,-136 1232,-136 C 859,-136 595,-69 440,64 L 208,-168 96,0 344,152 344,792 104,792 104,944 Z M 720,1608 L 1840,1608 1840,1496 C 1707,1395 1563,1309 1408,1240 L 1440,1208 1864,1208 1864,304 C 1864,192 1797,136 1664,136 L 1472,152 1440,288 1656,272 C 1688,272 1704,293 1704,336 L 1704,496 1360,496 1360,176 1200,176 1200,496 872,496 872,152 720,152 720,1208 1224,1208 984,1344 1112,1440 1288,1328 1568,1472 720,1472 720,1608 Z M 872,920 L 1200,920 1200,1064 872,1064 872,920 Z M 1360,920 L 1704,920 1704,1064 1360,1064 1360,920 Z M 872,624 L 1200,624 1200,792 872,792 872,624 Z M 1360,624 L 1704,624 1704,792 1360,792 1360,624 Z"/>
   <glyph unicode="送" horiz-adv-x="1880" d="M 240,1608 C 347,1539 443,1456 528,1360 L 416,1224 C 325,1331 229,1419 128,1488 L 240,1608 Z M 104,944 L 504,944 504,176 C 584,117 683,80 800,64 917,48 1301,40 1952,40 L 1872,-136 1232,-136 C 859,-136 595,-69 440,64 L 208,-168 96,0 344,152 344,792 104,792 104,944 Z M 1528,1672 L 1688,1624 C 1651,1517 1597,1413 1528,1312 L 1824,1312 1824,1160 1352,1160 1352,872 1896,872 1896,720 1336,720 1328,688 C 1531,565 1717,424 1888,264 L 1776,128 C 1616,277 1448,411 1272,528 1192,347 1024,211 768,120 L 672,264 C 955,371 1117,523 1160,720 L 672,720 672,872 1184,872 1192,1160 744,1160 744,1312 1352,1312 C 1421,1413 1480,1533 1528,1672 Z M 1016,1656 C 1080,1587 1131,1512 1168,1432 L 1024,1344 C 987,1424 936,1499 872,1568 L 1016,1656 Z"/>
   <glyph unicode="辑" horiz-adv-x="1880" d="M 976,1592 L 1776,1592 1776,1128 976,1128 976,1592 Z M 1128,1256 L 1624,1256 1624,1464 1128,1464 1128,1256 Z M 816,1024 L 1904,1024 1904,888 1760,888 1760,192 1944,208 1968,80 1760,56 1760,-224 1616,-224 1616,40 816,-32 792,112 968,128 968,888 816,888 816,1024 Z M 1120,728 L 1616,728 1616,888 1120,888 1120,728 Z M 1120,448 L 1616,448 1616,600 1120,600 1120,448 Z M 1120,136 L 1616,176 1616,312 1120,312 1120,136 Z M 104,1400 L 360,1400 432,1656 576,1624 520,1400 840,1400 840,1248 472,1248 C 419,1072 355,920 280,792 L 504,792 504,1048 648,1048 648,792 848,792 848,656 648,656 648,408 832,456 856,312 648,256 648,-184 504,-184 504,224 136,160 104,320 504,384 504,656 136,656 104,792 C 184,925 253,1077 312,1248 L 104,1248 104,1400 Z"/>
   <glyph unicode="身" horiz-adv-x="1880" d="M 800,1672 L 976,1624 888,1496 1648,1496 1648,672 1840,816 1952,696 1648,472 1648,8 C 1648,-120 1555,-184 1368,-184 L 1024,-144 984,8 1360,-32 C 1445,-32 1488,-5 1488,48 L 1488,376 C 1152,179 712,-3 168,-168 L 96,-16 C 544,112 936,264 1272,440 L 160,440 160,584 352,584 352,1496 704,1496 800,1672 Z M 512,1192 L 1488,1192 1488,1352 512,1352 512,1192 Z M 512,888 L 1488,888 1488,1056 512,1056 512,888 Z M 512,584 L 1488,584 1488,752 512,752 512,584 Z"/>
   <glyph unicode="趋" horiz-adv-x="1906" d="M 208,1408 L 472,1408 472,1656 632,1656 632,1408 896,1408 896,1264 632,1264 632,1008 952,1008 952,864 680,864 680,584 904,584 904,440 680,440 680,80 C 781,27 1205,0 1952,0 L 1904,-160 1520,-160 C 1115,-160 839,-136 692,-88 545,-40 424,43 328,160 296,16 256,-104 208,-200 L 72,-72 C 168,120 237,389 280,736 L 424,712 368,344 528,176 528,864 152,864 152,1008 472,1008 472,1264 208,1264 208,1408 Z M 1264,1664 L 1408,1624 1328,1472 1752,1472 1752,1336 1616,1120 1824,1120 1824,224 1048,224 1048,368 1672,368 1672,608 1104,608 1104,752 1672,752 1672,976 1080,976 1080,1120 1424,1120 1576,1328 1232,1328 C 1163,1237 1083,1157 992,1088 L 872,1184 C 1048,1323 1179,1483 1264,1664 Z"/>
   <glyph unicode="赞" horiz-adv-x="1827" d="M 1656,680 L 1656,136 1496,136 1496,544 536,544 536,120 376,120 376,680 1656,680 Z M 960,456 L 1120,432 C 1088,251 1007,109 876,8 745,-93 536,-165 248,-208 L 168,-56 C 440,-19 632,40 744,120 856,200 928,312 960,456 Z M 1160,216 C 1411,147 1645,61 1864,-40 L 1792,-200 C 1557,-83 1323,11 1088,80 L 1160,216 Z M 368,1344 L 312,1224 168,1264 C 237,1392 291,1523 328,1656 L 472,1616 424,1480 552,1480 552,1672 696,1672 696,1480 920,1480 920,1344 696,1344 696,1200 936,1200 936,1064 768,1064 768,888 936,1000 992,896 728,728 640,808 640,1064 544,1064 C 523,856 416,717 224,648 L 136,760 C 301,808 392,909 408,1064 L 152,1064 152,1200 552,1200 552,1344 368,1344 Z M 1136,1344 L 1072,1216 928,1256 C 1003,1389 1059,1520 1096,1648 L 1240,1608 1192,1480 1352,1480 1352,1664 1496,1664 1496,1480 1800,1480 1800,1344 1496,1344 1496,1200 1864,1200 1864,1064 1584,1064 1584,912 C 1584,869 1611,848 1664,848 1749,848 1799,853 1812,864 1825,875 1835,909 1840,968 L 1960,936 C 1955,840 1936,779 1904,752 1872,725 1792,712 1664,712 1520,712 1445,757 1440,848 L 1440,1064 1320,1064 C 1304,877 1200,755 1008,696 L 912,808 C 1077,845 1168,931 1184,1064 L 992,1064 992,1200 1352,1200 1352,1344 1136,1344 Z"/>
   <glyph unicode="谱" horiz-adv-x="1880" d="M 392,1656 C 467,1555 528,1448 576,1336 L 424,1248 C 381,1360 323,1467 248,1568 L 392,1656 Z M 104,1064 L 480,1064 480,152 608,304 712,208 C 648,107 560,11 448,-80 L 336,24 336,920 104,920 104,1064 Z M 992,1664 L 1112,1416 1400,1416 1520,1664 1688,1624 1592,1416 1888,1416 1888,1280 1512,1280 1512,856 1944,856 1944,712 600,712 600,856 1016,856 1016,1280 664,1280 664,1416 944,1416 856,1600 992,1664 Z M 1160,856 L 1368,856 1368,1280 1160,1280 1160,856 Z M 1760,1232 L 1888,1160 C 1845,1053 1787,963 1712,888 L 1584,968 C 1664,1053 1723,1141 1760,1232 Z M 792,1224 C 856,1149 912,1064 960,968 L 816,904 C 779,1005 728,1093 664,1168 L 792,1224 Z M 1752,600 L 1752,-184 1608,-184 1608,-104 928,-104 928,-184 768,-184 768,600 1752,600 Z M 928,312 L 1608,312 1608,464 928,464 928,312 Z M 928,40 L 1608,40 1608,184 928,184 928,40 Z"/>
   <glyph unicode="请" horiz-adv-x="1880" d="M 400,1656 C 485,1549 555,1437 608,1320 L 456,1232 C 408,1349 341,1461 256,1568 L 400,1656 Z M 104,1064 L 520,1064 520,184 624,328 720,240 C 661,128 584,21 488,-80 L 368,24 368,920 104,920 104,1064 Z M 704,1536 L 1192,1536 1192,1656 1352,1656 1352,1536 1888,1536 1888,1400 1352,1400 1352,1272 1824,1272 1824,1136 1352,1136 1352,1008 1944,1008 1944,872 632,872 632,1008 1192,1008 1192,1136 784,1136 784,1272 1192,1272 1192,1400 704,1400 704,1536 Z M 1792,744 L 1792,8 C 1792,-120 1720,-184 1576,-184 L 1416,-168 1376,-16 1568,-32 C 1611,-32 1632,-5 1632,48 L 1632,104 936,104 936,-184 776,-184 776,744 1792,744 Z M 936,488 L 1632,488 1632,616 936,616 936,488 Z M 936,232 L 1632,232 1632,360 936,360 936,232 Z"/>
   <glyph unicode="详" horiz-adv-x="1853" d="M 392,1656 C 467,1555 528,1448 576,1336 L 424,1248 C 381,1360 323,1467 248,1568 L 392,1656 Z M 104,1064 L 480,1064 480,152 608,304 712,208 C 648,107 560,11 448,-80 L 336,24 336,920 104,920 104,1064 Z M 1576,1656 L 1744,1608 1544,1296 1896,1296 1896,1144 1408,1144 1408,864 1840,864 1840,712 1408,712 1408,432 1920,432 1920,280 1408,280 1408,-184 1248,-184 1248,280 736,280 736,432 1248,432 1248,712 816,712 816,864 1248,864 1248,1144 768,1144 768,1296 1384,1296 C 1459,1408 1523,1528 1576,1656 Z M 1048,1648 C 1112,1573 1165,1491 1208,1400 L 1064,1336 C 1027,1432 976,1515 912,1584 L 1048,1648 Z"/>
   <glyph unicode="识" horiz-adv-x="1853" d="M 408,1656 C 499,1549 573,1437 632,1320 L 480,1232 C 427,1349 355,1461 264,1568 L 408,1656 Z M 104,1064 L 536,1064 536,136 704,320 808,224 C 733,123 632,21 504,-80 L 384,24 384,920 104,920 104,1064 Z M 920,1544 L 1816,1544 1816,584 920,584 920,1544 Z M 1080,728 L 1656,728 1656,1400 1080,1400 1080,728 Z M 1584,456 C 1728,285 1845,101 1936,-96 L 1792,-184 C 1707,13 1592,200 1448,376 L 1584,456 Z M 1120,456 L 1264,376 C 1131,141 997,-45 864,-184 L 736,-72 C 896,93 1024,269 1120,456 Z"/>
   <glyph unicode="评" horiz-adv-x="1880" d="M 408,1656 C 499,1549 573,1437 632,1320 L 480,1232 C 427,1349 355,1461 264,1568 L 408,1656 Z M 104,1064 L 536,1064 536,136 704,320 808,224 C 733,123 632,21 504,-80 L 384,24 384,920 104,920 104,1064 Z M 760,1584 L 1880,1584 1880,1432 1376,1432 1376,656 1944,656 1944,504 1376,504 1376,-184 1224,-184 1224,504 656,504 656,656 1224,656 1224,1432 760,1432 760,1584 Z M 1720,1320 L 1872,1264 C 1808,1051 1733,872 1648,728 L 1512,808 C 1603,979 1672,1149 1720,1320 Z M 928,1320 C 1003,1139 1053,957 1080,776 L 928,736 C 901,928 848,1109 768,1280 L 928,1320 Z"/>
   <glyph unicode="论" horiz-adv-x="1880" d="M 408,1656 C 499,1549 573,1437 632,1320 L 480,1232 C 427,1349 355,1461 264,1568 L 408,1656 Z M 104,1064 L 536,1064 536,136 704,320 808,224 C 733,123 632,21 504,-80 L 384,24 384,920 104,920 104,1064 Z M 1264,1384 C 1104,1149 909,955 680,800 L 576,928 C 880,1157 1101,1400 1240,1656 L 1384,1576 1344,1512 C 1541,1272 1747,1088 1960,960 L 1872,808 C 1675,931 1472,1123 1264,1384 Z M 912,880 L 1080,880 1080,496 C 1277,581 1459,680 1624,792 L 1736,640 C 1539,523 1320,424 1080,344 L 1080,56 C 1080,8 1163,-16 1328,-16 1504,-16 1608,-3 1640,24 1672,51 1693,125 1704,248 L 1864,200 C 1837,19 1792,-87 1728,-116 1664,-145 1531,-160 1328,-160 1141,-160 1025,-148 980,-124 935,-100 912,-56 912,8 L 912,880 Z"/>
   <glyph unicode="记" horiz-adv-x="1906" d="M 408,1656 C 499,1549 573,1437 632,1320 L 480,1232 C 427,1349 355,1461 264,1568 L 408,1656 Z M 104,1064 L 536,1064 536,136 704,320 808,224 C 733,123 632,21 504,-80 L 384,24 384,920 104,920 104,1064 Z M 912,1584 L 1832,1584 1832,688 1672,688 1672,792 1128,792 1128,88 C 1133,40 1211,16 1360,16 1584,16 1713,37 1748,80 1783,123 1808,229 1824,400 L 1976,360 C 1955,120 1904,-27 1824,-80 1776,-123 1621,-144 1360,-144 1179,-144 1068,-131 1028,-104 988,-77 968,-29 968,40 L 968,944 1672,944 1672,1432 912,1432 912,1584 Z"/>
   <glyph unicode="订" horiz-adv-x="1880" d="M 408,1656 C 499,1549 573,1437 632,1320 L 480,1232 C 427,1349 355,1461 264,1568 L 408,1656 Z M 104,1064 L 536,1064 536,136 704,320 808,224 C 733,123 632,21 504,-80 L 384,24 384,920 104,920 104,1064 Z M 776,1568 L 1944,1568 1944,1416 1552,1416 1552,8 C 1547,-115 1459,-176 1288,-176 L 1096,-160 1064,0 1288,-16 C 1357,-16 1392,8 1392,56 L 1392,1416 776,1416 776,1568 Z"/>
   <glyph unicode="视" horiz-adv-x="1906" d="M 1752,1592 L 1752,448 1592,448 1592,1448 1056,1448 1056,448 896,448 896,1592 1752,1592 Z M 1248,1256 L 1400,1256 C 1400,952 1387,715 1360,544 L 1472,544 1472,40 C 1472,-3 1517,-24 1608,-24 1699,-24 1753,-13 1772,8 1791,29 1803,96 1808,208 L 1960,168 C 1949,24 1923,-69 1880,-112 1853,-144 1763,-160 1608,-160 1475,-160 1392,-149 1360,-128 1328,-107 1312,-67 1312,-8 L 1312,384 C 1221,128 1027,-69 728,-208 L 648,-72 C 856,29 1008,160 1104,320 1200,480 1248,792 1248,1256 Z M 128,1416 L 392,1416 288,1600 440,1672 560,1416 792,1416 792,1264 584,856 816,672 712,536 552,704 552,-192 400,-192 400,600 C 320,504 243,432 168,384 L 72,528 C 296,683 483,928 632,1264 L 128,1264 128,1416 Z"/>
   <glyph unicode="要" horiz-adv-x="1853" d="M 88,600 L 760,600 856,736 1024,704 952,600 1936,600 1936,456 1560,456 C 1491,307 1395,192 1272,112 L 1880,-56 1752,-192 1088,16 C 864,-85 568,-155 200,-192 L 112,-32 C 400,-11 637,27 824,80 L 352,192 640,456 88,456 88,600 Z M 1048,160 C 1213,240 1325,339 1384,456 L 840,456 648,248 1048,160 Z M 160,1600 L 1888,1600 1888,1448 1336,1448 1336,1288 1792,1288 1792,784 256,784 256,1288 728,1288 728,1448 160,1448 160,1600 Z M 1192,1288 L 1192,1448 872,1448 872,1288 1192,1288 Z M 416,920 L 728,920 728,1152 416,1152 416,920 Z M 872,1152 L 872,920 1192,920 1192,1152 872,1152 Z M 1336,1152 L 1336,920 1632,920 1632,1152 1336,1152 Z"/>
   <glyph unicode="行" horiz-adv-x="1880" d="M 520,1656 L 656,1584 C 555,1387 405,1216 208,1072 L 112,1200 C 299,1344 435,1496 520,1656 Z M 592,1200 L 728,1128 C 675,1021 603,912 512,800 L 512,-192 360,-192 360,640 192,488 96,616 C 309,787 475,981 592,1200 Z M 896,1544 L 1864,1544 1864,1392 896,1392 896,1544 Z M 816,1024 L 1944,1024 1944,872 1648,872 1648,-8 C 1643,-125 1565,-184 1416,-184 L 1184,-160 1152,0 1416,-24 C 1459,-24 1480,3 1480,56 L 1480,872 816,872 816,1024 Z"/>
   <glyph unicode="荐" horiz-adv-x="1853" d="M 120,1512 L 600,1512 600,1656 768,1656 768,1512 1288,1512 1288,1656 1448,1656 1448,1512 1928,1512 1928,1368 1448,1368 1448,1240 1288,1240 1288,1368 768,1368 768,1240 600,1240 600,1368 120,1368 120,1512 Z M 136,1120 L 720,1120 808,1280 968,1240 912,1120 1904,1120 1904,976 824,976 C 749,853 656,733 544,616 L 544,-184 392,-184 392,480 216,344 104,472 C 349,648 525,816 632,976 L 136,976 136,1120 Z M 864,840 L 1728,840 1728,688 1424,472 1424,416 1936,416 1936,272 1424,272 1424,-32 C 1419,-123 1355,-168 1232,-168 L 1048,-152 1024,0 1192,-16 C 1245,-16 1272,-8 1272,8 L 1272,272 688,272 688,416 1272,416 1272,552 1504,704 864,704 864,840 Z"/>
   <glyph unicode="节" horiz-adv-x="1826" d="M 120,1464 L 608,1464 608,1664 768,1664 768,1464 1280,1464 1280,1664 1440,1664 1440,1464 1928,1464 1928,1320 1440,1320 1440,1104 1280,1104 1280,1320 768,1320 768,1104 608,1104 608,1320 120,1320 120,1464 Z M 768,800 L 240,800 240,952 1744,952 C 1739,563 1717,316 1680,212 1643,108 1576,56 1480,56 L 1216,88 1192,248 1464,216 C 1507,216 1531,240 1536,288 L 1584,800 936,800 936,-192 768,-192 768,800 Z"/>
   <glyph unicode="自" horiz-adv-x="1482" d="M 864,1664 L 1048,1624 960,1424 1752,1424 1752,-184 1592,-184 1592,-24 448,-24 448,-184 288,-184 288,1424 776,1424 C 819,1499 848,1579 864,1664 Z M 448,992 L 1592,992 1592,1272 448,1272 448,992 Z M 448,560 L 1592,560 1592,840 448,840 448,560 Z M 448,128 L 1592,128 1592,408 448,408 448,128 Z"/>
   <glyph unicode="能" horiz-adv-x="1827" d="M 840,1528 C 947,1400 1035,1264 1104,1120 L 968,1040 912,1152 176,1072 136,1208 C 291,1309 421,1461 528,1664 L 688,1616 C 587,1429 493,1301 408,1232 L 832,1288 712,1448 840,1528 Z M 976,976 L 976,24 C 976,-104 909,-168 776,-168 L 568,-152 536,-8 768,-24 C 800,-24 816,0 816,48 L 816,224 400,224 400,-184 240,-184 240,976 976,976 Z M 400,656 L 816,656 816,832 400,832 400,656 Z M 400,352 L 816,352 816,528 400,528 400,352 Z M 1152,1608 L 1304,1608 1304,1336 1800,1504 1888,1376 C 1712,1301 1517,1240 1304,1192 L 1304,976 C 1304,955 1317,939 1344,928 1371,917 1453,912 1592,912 1661,912 1708,925 1732,952 1756,979 1773,1040 1784,1136 L 1928,1072 C 1907,939 1876,856 1836,824 1796,792 1715,776 1592,776 1400,776 1279,789 1228,816 1177,843 1152,885 1152,944 L 1152,1608 Z M 1152,696 L 1304,696 1304,416 C 1491,464 1664,523 1824,592 L 1920,456 C 1733,381 1528,320 1304,272 L 1304,32 C 1304,11 1319,-4 1348,-12 1377,-20 1464,-24 1608,-24 1688,-24 1739,-12 1760,12 1781,36 1797,101 1808,208 L 1960,144 C 1939,5 1908,-81 1868,-116 1828,-151 1741,-168 1608,-168 1411,-168 1285,-155 1232,-128 1179,-101 1152,-56 1152,8 L 1152,696 Z"/>
   <glyph unicode="联" horiz-adv-x="1880" d="M 1120,1648 C 1205,1563 1277,1469 1336,1368 L 1192,1288 C 1144,1384 1077,1477 992,1568 L 1120,1648 Z M 928,1248 L 1488,1248 C 1552,1381 1600,1515 1632,1648 L 1808,1608 1656,1248 1888,1248 1888,1096 1480,1096 1480,752 1944,752 1944,600 1520,600 C 1637,328 1787,125 1968,-8 L 1880,-184 C 1699,-35 1547,184 1424,472 1339,211 1168,-5 912,-176 L 824,-40 C 1080,136 1237,349 1296,600 L 880,600 880,752 1320,752 1320,1096 928,1096 928,1248 Z M 104,1592 L 912,1592 912,1440 792,1440 792,504 856,536 888,400 792,352 792,-184 632,-184 632,280 136,104 80,272 208,304 208,1440 104,1440 104,1592 Z M 368,1184 L 632,1184 632,1440 368,1440 368,1184 Z M 368,784 L 632,784 632,1040 368,1040 368,784 Z M 368,352 L 632,448 632,640 368,640 368,352 Z"/>
   <glyph unicode="编" horiz-adv-x="1827" d="M 640,1328 L 784,1272 C 651,973 504,736 344,560 L 688,664 728,544 C 557,475 371,421 168,384 L 120,512 C 232,629 339,773 440,944 L 168,904 136,1048 C 248,1203 341,1405 416,1656 L 568,1608 C 499,1373 411,1189 304,1056 L 512,1080 640,1328 Z M 696,304 L 728,160 C 557,91 371,32 168,-16 L 104,152 696,304 Z M 1280,1448 L 1216,1616 1368,1664 1448,1448 1888,1448 1888,952 992,952 992,672 C 992,379 933,96 816,-176 L 688,-80 C 789,133 840,384 840,672 L 840,1448 1280,1448 Z M 992,1096 L 1736,1096 1736,1304 992,1304 992,1096 Z M 1912,792 L 1912,-8 C 1912,-125 1853,-184 1736,-184 L 1632,-168 1600,-32 1728,-48 C 1755,-48 1768,-24 1768,24 L 1768,288 1656,288 1656,8 1528,8 1528,288 1424,288 1424,8 1288,8 1288,288 1184,288 1184,-192 1040,-192 1040,792 1912,792 Z M 1184,424 L 1288,424 1288,648 1184,648 1184,424 Z M 1424,648 L 1424,424 1528,424 1528,648 1424,648 Z M 1656,648 L 1656,424 1768,424 1768,648 1656,648 Z"/>
   <glyph unicode="维" horiz-adv-x="1880" d="M 1144,-48 L 1144,-184 984,-184 984,1096 880,984 800,1128 C 944,1293 1048,1472 1112,1664 L 1272,1608 1144,1344 1144,1328 1464,1328 1344,1600 1496,1656 C 1555,1555 1603,1445 1640,1328 L 1944,1328 1944,1176 1584,1176 1584,912 1896,912 1896,776 1584,776 1584,504 1896,504 1896,360 1584,360 1584,96 1960,96 1960,-48 1144,-48 Z M 1144,1176 L 1144,912 1432,912 1432,1176 1144,1176 Z M 1144,776 L 1144,504 1432,504 1432,776 1144,776 Z M 1144,360 L 1144,96 1432,96 1432,360 1144,360 Z M 680,1336 L 824,1280 C 691,997 539,760 368,568 L 736,672 776,544 C 595,475 392,421 168,384 L 120,520 C 237,632 349,773 456,944 L 168,896 136,1048 C 259,1197 360,1400 440,1656 L 592,1608 C 517,1384 424,1200 312,1056 L 544,1080 680,1336 Z M 776,312 L 808,168 168,-16 104,152 776,312 Z"/>
   <glyph unicode="索" horiz-adv-x="1774" d="M 232,1512 L 936,1512 936,1664 1104,1664 1104,1512 1808,1512 1808,1368 1104,1368 1104,1216 1872,1216 1872,856 1712,856 1712,1072 336,1072 336,848 176,848 176,1216 936,1216 936,1368 232,1368 232,1512 Z M 600,776 L 1080,800 1320,960 1448,872 C 1176,664 883,515 568,424 989,435 1312,461 1536,504 L 1376,656 1504,744 C 1632,637 1757,509 1880,360 L 1744,264 1648,384 1128,328 1128,0 C 1128,-75 1115,-127 1088,-156 1061,-185 1000,-200 904,-200 L 776,-192 752,-32 904,-48 C 941,-48 960,-24 960,24 L 960,320 272,296 248,448 C 477,507 688,587 880,688 L 384,656 360,768 C 515,837 640,928 736,1040 L 888,992 C 813,901 717,829 600,776 Z M 1360,256 C 1536,192 1709,96 1880,-32 L 1792,-176 C 1621,-32 1448,75 1272,144 L 1360,256 Z M 616,224 L 712,120 C 600,8 421,-88 176,-168 L 112,-32 C 325,37 493,123 616,224 Z"/>
   <glyph unicode="系" horiz-adv-x="1801" d="M 1352,1336 L 1496,1280 C 1203,992 896,768 576,608 L 1488,704 1320,880 1464,968 C 1629,813 1763,645 1864,464 L 1712,376 1576,592 1128,528 1128,0 C 1123,-123 1059,-184 936,-184 L 728,-160 696,0 912,-24 C 939,-24 952,8 952,72 L 952,512 320,456 280,584 C 477,680 667,792 848,920 L 344,856 312,1000 C 493,1112 645,1253 768,1424 L 304,1408 216,1552 C 893,1573 1371,1603 1648,1640 L 1768,1504 976,1432 C 859,1261 720,1120 560,1008 L 1048,1072 1352,1336 Z M 608,400 L 712,272 C 552,107 376,-27 184,-128 L 104,24 C 275,104 443,229 608,400 Z M 1432,400 C 1597,261 1731,115 1832,-40 L 1680,-128 C 1584,21 1453,165 1288,304 L 1432,400 Z"/>
   <glyph unicode="类" horiz-adv-x="1880" d="M 136,472 L 880,472 912,672 1064,656 1040,472 1904,472 1904,320 1160,320 C 1299,160 1560,48 1944,-16 L 1856,-184 C 1445,-99 1155,64 984,304 883,53 616,-109 184,-184 L 80,-32 C 421,27 664,144 808,320 L 136,320 136,472 Z M 200,1288 L 960,1288 960,1672 1112,1672 1112,1288 1872,1288 1872,1144 1112,1144 1112,736 960,736 960,1128 C 784,936 552,784 264,672 L 160,808 C 405,893 613,1005 784,1144 L 200,1144 200,1288 Z M 496,1656 L 744,1440 624,1320 C 555,1411 472,1493 376,1568 L 496,1656 Z M 1504,1656 L 1640,1576 C 1560,1469 1477,1384 1392,1320 L 1280,1424 C 1371,1493 1445,1571 1504,1656 Z M 1304,1080 L 1832,776 1720,640 1208,960 1304,1080 Z"/>
   <glyph unicode="箱" horiz-adv-x="1853" d="M 160,912 L 472,912 472,1160 624,1160 624,912 880,912 880,768 624,768 624,680 896,344 792,192 624,472 624,-184 472,-184 472,488 C 397,307 309,163 208,56 L 104,192 C 248,341 360,533 440,768 L 160,768 160,912 Z M 1840,1104 L 1840,-176 1680,-176 1680,-56 1104,-56 1104,-184 944,-184 944,1104 1840,1104 Z M 1104,752 L 1680,752 1680,960 1104,960 1104,752 Z M 1104,416 L 1680,416 1680,624 1104,624 1104,416 Z M 1104,72 L 1680,72 1680,280 1104,280 1104,72 Z M 440,1672 L 600,1624 552,1536 1016,1536 1016,1400 760,1400 880,1272 736,1192 584,1400 456,1400 C 392,1315 317,1240 232,1176 L 104,1272 C 264,1395 376,1528 440,1672 Z M 1272,1672 L 1424,1624 1384,1536 1936,1536 1936,1400 1616,1400 1728,1272 1592,1192 1432,1400 1288,1400 1288,1392 C 1229,1307 1163,1237 1088,1184 L 960,1280 C 1104,1397 1208,1528 1272,1672 Z"/>
   <glyph unicode="管" horiz-adv-x="1826" d="M 440,1672 L 600,1640 544,1536 1024,1536 1024,1408 760,1408 824,1280 672,1232 584,1408 440,1408 224,1224 112,1344 C 256,1435 365,1544 440,1672 Z M 1272,1672 L 1416,1632 1368,1536 1936,1536 1936,1408 1616,1408 1696,1280 1552,1232 1432,1408 1288,1408 C 1245,1339 1192,1277 1128,1224 L 1000,1328 C 1123,1424 1213,1539 1272,1672 Z M 1024,1264 C 1061,1221 1091,1173 1112,1120 L 1896,1120 1896,816 1736,816 1736,984 312,984 312,808 152,808 152,1120 936,1120 872,1224 1024,1264 Z M 1640,872 L 1640,456 528,456 528,352 1752,352 1752,-168 1592,-168 1592,-88 528,-88 528,-184 368,-184 368,872 1640,872 Z M 528,592 L 1480,592 1480,736 528,736 528,592 Z M 528,48 L 1592,48 1592,216 528,216 528,48 Z"/>
   <glyph unicode="答" horiz-adv-x="1880" d="M 1048,1160 L 1168,1080 1120,1032 C 1381,893 1661,787 1960,712 L 1872,560 C 1573,645 1283,773 1000,944 755,773 475,645 160,560 L 112,720 C 491,821 803,968 1048,1160 Z M 584,688 L 1440,688 1440,552 584,552 584,688 Z M 1696,424 L 1696,-184 1536,-184 1536,-104 512,-104 512,-192 352,-192 352,424 1696,424 Z M 512,32 L 1536,32 1536,288 512,288 512,32 Z M 448,1672 L 600,1624 536,1472 1032,1472 1032,1328 744,1328 880,1120 720,1032 560,1328 464,1328 C 389,1189 315,1085 240,1016 L 104,1120 C 264,1285 379,1469 448,1672 Z M 1256,1664 L 1408,1616 1360,1472 1936,1472 1936,1328 1592,1328 1720,1136 1576,1048 1416,1328 1296,1328 1160,1112 1032,1208 C 1139,1347 1213,1499 1256,1664 Z"/>
   <glyph unicode="笔" horiz-adv-x="1853" d="M 1664,1056 L 1736,912 976,800 976,640 1744,728 1760,584 976,496 976,344 1904,456 1920,304 976,184 976,48 C 976,11 1064,-8 1240,-8 1517,-8 1675,1 1712,20 1749,39 1771,85 1776,160 L 1936,112 C 1920,0 1883,-72 1824,-104 1765,-136 1571,-152 1240,-152 1048,-152 928,-140 880,-116 832,-92 808,-53 808,0 L 808,168 144,80 120,232 808,320 808,480 224,408 200,552 808,624 808,784 224,720 168,872 C 712,909 1211,971 1664,1056 Z M 440,1672 L 600,1624 544,1488 1032,1488 1032,1336 752,1336 880,1144 712,1048 560,1336 464,1336 376,1184 248,1032 104,1144 C 259,1299 371,1475 440,1672 Z M 1272,1672 L 1424,1624 1368,1488 1936,1488 1936,1336 1600,1336 1704,1176 1560,1088 1416,1336 1296,1336 C 1221,1208 1152,1112 1088,1048 L 944,1152 C 1093,1301 1203,1475 1272,1672 Z"/>
   <glyph unicode="科" horiz-adv-x="1906" d="M 104,1120 L 416,1120 416,1384 168,1328 112,1472 C 352,1515 571,1579 768,1664 L 840,1528 568,1432 568,1120 856,1120 856,976 568,976 568,936 848,600 744,456 568,728 568,-184 416,-184 416,616 C 352,456 269,309 168,176 L 56,312 C 205,504 317,725 392,976 L 104,976 104,1120 Z M 1936,632 L 1952,480 1704,432 1704,-184 1544,-184 1544,400 936,288 912,440 1544,560 1544,1656 1704,1656 1704,584 1936,632 Z M 1112,1504 C 1245,1429 1365,1341 1472,1240 L 1368,1104 C 1251,1221 1131,1320 1008,1400 L 1112,1504 Z M 984,1048 C 1112,984 1227,909 1328,824 L 1216,688 C 1109,789 997,875 880,944 L 984,1048 Z"/>
   <glyph unicode="私" horiz-adv-x="1906" d="M 1456,1656 L 1624,1592 C 1459,861 1285,341 1104,32 L 1704,112 C 1651,277 1579,435 1488,584 L 1648,624 C 1797,373 1899,117 1952,-144 L 1776,-192 1744,-40 C 1504,-88 1264,-115 1024,-120 L 944,32 C 1163,475 1333,1016 1456,1656 Z M 936,1664 L 1008,1520 672,1440 672,1104 1016,1104 1016,952 672,952 672,896 1032,544 936,400 672,704 672,-184 512,-184 512,656 C 421,469 307,301 168,152 L 72,280 C 264,472 405,696 496,952 L 112,952 112,1104 512,1104 512,1408 144,1344 88,1496 C 397,1533 680,1589 936,1664 Z"/>
   <glyph unicode="社" horiz-adv-x="1880" d="M 136,1416 L 440,1416 360,1608 528,1664 616,1416 920,1416 920,1264 648,816 C 787,715 901,616 992,520 L 888,368 C 808,475 723,568 632,648 L 632,-184 472,-184 472,608 C 381,507 291,432 200,384 L 104,528 C 355,683 563,928 728,1264 L 136,1264 136,1416 Z M 968,1072 L 1344,1072 1344,1656 1504,1656 1504,1072 1888,1072 1888,920 1504,920 1504,48 1960,48 1960,-104 872,-104 872,48 1344,48 1344,920 968,920 968,1072 Z"/>
   <glyph unicode="示" horiz-adv-x="1880" d="M 296,1544 L 1752,1544 1752,1392 296,1392 296,1544 Z M 152,1032 L 1896,1032 1896,880 1112,880 1112,16 C 1112,-59 1096,-111 1064,-140 1032,-169 963,-184 856,-184 L 664,-176 632,-16 856,-32 C 920,-32 952,-8 952,40 L 952,880 152,880 152,1032 Z M 1448,680 C 1640,488 1805,285 1944,72 L 1808,-56 C 1669,173 1507,384 1320,576 L 1448,680 Z M 560,672 L 704,584 C 555,301 400,77 240,-88 L 104,32 C 291,229 443,443 560,672 Z"/>
   <glyph unicode="研" horiz-adv-x="1880" d="M 128,1528 L 864,1528 864,1376 536,1376 384,896 784,896 784,-16 632,-16 632,64 448,64 448,-120 304,-120 304,704 176,488 80,616 C 208,813 307,1067 376,1376 L 128,1376 128,1528 Z M 448,208 L 632,208 632,752 448,752 448,208 Z M 904,1576 L 1880,1576 1880,1424 1688,1424 1688,816 1952,816 1952,664 1688,664 1688,-184 1536,-184 1536,664 1264,664 C 1243,323 1128,40 920,-184 L 784,-80 C 976,123 1083,371 1104,664 L 848,664 848,816 1112,816 1112,1424 904,1424 904,1576 Z M 1536,816 L 1536,1424 1272,1424 1272,816 1536,816 Z"/>
   <glyph unicode="知" horiz-adv-x="1801" d="M 440,1656 L 592,1616 504,1392 968,1392 968,1240 720,1240 688,848 1008,848 1008,696 672,696 648,544 1024,192 920,40 608,376 C 544,173 416,-8 224,-168 L 96,-56 C 336,131 475,381 512,696 L 128,696 128,848 536,848 568,1240 432,1240 C 368,1128 293,1032 208,952 L 104,1072 C 253,1232 365,1427 440,1656 Z M 1872,1488 L 1872,-72 1720,-72 1720,64 1296,64 1296,-80 1144,-80 1144,1488 1872,1488 Z M 1296,208 L 1720,208 1720,1344 1296,1344 1296,208 Z"/>
   <glyph unicode="看" horiz-adv-x="1827" d="M 1776,1632 L 1840,1504 1048,1464 1000,1344 1768,1344 1768,1192 928,1192 872,1088 1904,1088 1904,936 768,936 688,832 1776,832 1776,-184 1616,-184 1616,-120 688,-120 688,-184 528,-184 528,672 C 416,571 293,483 160,408 L 80,560 C 261,667 416,792 544,936 L 136,936 136,1088 672,1088 736,1192 328,1192 328,1344 816,1344 864,1456 336,1432 280,1568 1776,1632 Z M 688,560 L 1616,560 1616,680 688,680 688,560 Z M 688,296 L 1616,296 1616,416 688,416 688,296 Z M 688,32 L 1616,32 1616,152 688,152 688,32 Z"/>
   <glyph unicode="目" horiz-adv-x="1376" d="M 1688,1568 L 1688,-184 1528,-184 1528,-8 496,-8 496,-184 336,-184 336,1568 1688,1568 Z M 496,1088 L 1528,1088 1528,1416 496,1416 496,1088 Z M 496,616 L 1528,616 1528,944 496,944 496,616 Z M 496,144 L 1528,144 1528,464 496,464 496,144 Z"/>
   <glyph unicode="的" horiz-adv-x="1721" d="M 1208,1648 L 1368,1616 1264,1320 1888,1320 C 1888,723 1872,323 1840,120 1808,-83 1712,-184 1552,-184 L 1304,-152 1264,16 1552,-16 C 1600,-16 1635,5 1656,48 1677,91 1693,205 1704,392 1715,579 1720,837 1720,1168 L 1184,1168 C 1120,1056 1051,963 976,888 L 856,1000 C 1016,1176 1133,1392 1208,1648 Z M 1272,856 C 1352,739 1419,608 1472,464 L 1320,392 C 1267,541 1200,675 1120,792 L 1272,856 Z M 824,1392 L 824,-56 680,-56 680,8 312,8 312,-112 168,-112 168,1392 344,1392 400,1656 568,1624 496,1392 824,1392 Z M 680,776 L 680,1240 312,1240 312,776 680,776 Z M 312,624 L 312,160 680,160 680,624 312,624 Z"/>
   <glyph unicode="申" horiz-adv-x="1535" d="M 1784,1384 L 1784,192 1624,192 1624,328 1096,328 1096,-184 936,-184 936,328 432,328 432,200 272,200 272,1384 936,1384 936,1656 1096,1656 1096,1384 1784,1384 Z M 432,928 L 936,928 936,1232 432,1232 432,928 Z M 1096,1232 L 1096,928 1624,928 1624,1232 1096,1232 Z M 432,480 L 936,480 936,776 432,776 432,480 Z M 1096,480 L 1624,480 1624,776 1096,776 1096,480 Z"/>
   <glyph unicode="生" horiz-adv-x="1853" d="M 504,1592 L 656,1544 536,1224 992,1224 992,1656 1152,1656 1152,1224 1848,1224 1848,1072 1152,1072 1152,632 1768,632 1768,480 1152,480 1152,40 1944,40 1944,-112 144,-112 144,40 992,40 992,480 376,480 376,632 992,632 992,1072 456,1072 C 397,955 331,851 256,760 L 128,864 C 299,1072 424,1315 504,1592 Z"/>
   <glyph unicode="理" horiz-adv-x="1880" d="M 120,1552 L 720,1552 720,1400 496,1400 496,936 688,936 688,792 496,792 496,304 688,392 712,240 C 541,155 349,83 136,24 L 104,184 344,256 344,792 144,792 144,936 344,936 344,1400 120,1400 120,1552 Z M 832,1568 L 1840,1568 1840,648 1416,648 1416,416 1840,416 1840,264 1416,264 1416,32 1944,32 1944,-120 720,-120 720,32 1256,32 1256,264 832,264 832,416 1256,416 1256,648 832,648 832,1568 Z M 984,1176 L 1256,1176 1256,1416 984,1416 984,1176 Z M 1416,1416 L 1416,1176 1688,1176 1688,1416 1416,1416 Z M 984,800 L 1256,800 1256,1032 984,1032 984,800 Z M 1416,1032 L 1416,800 1688,800 1688,1032 1416,1032 Z"/>
   <glyph unicode="献" horiz-adv-x="1853" d="M 1192,1112 L 1456,1112 1456,1656 1608,1656 1608,1112 1904,1112 1904,960 1616,960 C 1659,533 1771,203 1952,-32 L 1832,-184 C 1709,3 1616,245 1552,544 1488,251 1379,5 1224,-192 L 1144,-48 C 1331,224 1435,560 1456,960 L 1192,960 1192,1112 Z M 1784,1552 L 1944,1280 1816,1200 C 1779,1296 1728,1387 1664,1472 L 1784,1552 Z M 128,1464 L 552,1464 552,1656 704,1656 704,1464 1136,1464 1136,1320 704,1320 704,1120 1112,1120 1112,16 C 1112,-112 1051,-176 928,-176 L 808,-152 768,0 920,-24 C 947,-24 960,3 960,56 L 960,984 304,984 304,-184 152,-184 152,1120 552,1120 552,1320 128,1320 128,1464 Z M 504,928 L 608,696 672,696 752,936 896,896 816,696 904,696 904,560 704,560 704,376 920,376 920,240 704,240 704,-80 560,-80 560,240 344,240 344,376 560,376 560,560 360,560 360,696 464,696 392,856 504,928 Z"/>
   <glyph unicode="状" horiz-adv-x="1880" d="M 560,1648 L 720,1648 720,-192 560,-192 560,520 160,208 80,384 C 261,485 421,600 560,728 L 560,1648 Z M 280,1352 C 360,1256 429,1152 488,1040 L 336,968 C 283,1085 213,1192 128,1288 L 280,1352 Z M 848,1104 L 1256,1104 1272,1656 1424,1656 1416,1104 1928,1104 1928,944 1488,944 C 1552,539 1712,211 1968,-40 L 1848,-184 C 1624,51 1469,363 1384,752 1331,336 1157,24 864,-184 L 784,-48 C 1061,155 1216,485 1248,944 L 848,944 848,1104 Z M 1696,1544 L 1864,1280 1728,1216 C 1685,1307 1629,1395 1560,1480 L 1696,1544 Z"/>
   <glyph unicode="版" horiz-adv-x="1853" d="M 256,1616 L 400,1616 400,1128 616,1128 616,1656 768,1656 768,1128 856,1128 856,984 400,984 400,656 784,656 784,-184 632,-184 632,512 400,512 C 384,224 328,-5 232,-176 L 104,-80 C 205,112 256,347 256,624 L 256,1616 Z M 1144,936 C 1133,520 1069,171 952,-112 L 808,-16 C 925,261 984,627 984,1080 L 984,1504 C 1256,1536 1504,1584 1728,1648 L 1856,1520 C 1637,1456 1400,1408 1144,1376 L 1144,1080 1840,1080 C 1819,765 1744,499 1616,280 1696,163 1803,61 1936,-24 L 1856,-168 C 1728,-93 1616,8 1520,136 1424,8 1304,-96 1160,-176 L 1064,-40 C 1213,40 1333,147 1424,280 1307,493 1227,712 1184,936 L 1144,936 Z M 1328,936 C 1365,760 1429,595 1520,440 1595,589 1643,755 1664,936 L 1328,936 Z"/>
   <glyph unicode="点" horiz-adv-x="1826" d="M 1696,328 C 1792,200 1872,61 1936,-88 L 1784,-176 C 1731,-27 1653,112 1552,240 L 1696,328 Z M 344,304 L 488,224 C 408,53 328,-80 248,-176 L 112,-56 C 208,56 285,176 344,304 Z M 1240,280 C 1315,173 1379,56 1432,-72 L 1264,-144 C 1216,-11 1157,109 1088,216 L 1240,280 Z M 792,256 C 867,133 917,11 944,-112 L 768,-168 C 741,-29 693,99 624,216 L 792,256 Z M 904,1656 L 1064,1656 1064,1440 1848,1440 1848,1288 1064,1288 1064,1024 1728,1024 1728,384 312,384 312,1024 904,1024 904,1656 Z M 472,536 L 1568,536 1568,872 472,872 472,536 Z"/>
   <glyph unicode="注" horiz-adv-x="1880" d="M 288,1640 C 405,1576 512,1499 608,1408 L 504,1272 C 397,1373 288,1459 176,1528 L 288,1640 Z M 208,1144 L 504,944 392,808 C 301,899 203,973 96,1032 L 208,1144 Z M 392,640 L 528,544 C 464,293 371,51 248,-184 L 88,-72 C 216,152 317,389 392,640 Z M 1208,1656 C 1288,1581 1352,1499 1400,1408 L 1264,1328 C 1216,1413 1152,1493 1072,1568 L 1208,1656 Z M 656,1272 L 1912,1272 1912,1120 1360,1120 1360,656 1840,656 1840,512 1360,512 1360,48 1944,48 1944,-104 600,-104 600,48 1200,48 1200,512 720,512 720,656 1200,656 1200,1120 656,1120 656,1272 Z"/>
   <glyph unicode="求" horiz-adv-x="1853" d="M 1416,1672 L 1712,1496 1616,1384 1328,1560 1416,1672 Z M 176,1360 L 936,1360 936,1656 1096,1656 1096,1360 1880,1360 1880,1208 1152,1208 C 1200,1021 1264,856 1344,712 1445,835 1533,971 1608,1120 L 1768,1040 C 1661,843 1549,688 1432,576 1560,384 1736,235 1960,128 L 1872,-48 C 1520,128 1261,437 1096,880 L 1096,-16 C 1091,-133 1027,-192 904,-192 L 608,-160 576,8 C 677,-19 779,-32 880,-32 907,-32 923,-23 928,-4 933,15 936,197 936,544 707,357 453,195 176,56 L 112,240 C 416,384 691,547 936,728 L 936,1208 176,1208 176,1360 Z M 440,1128 L 712,728 568,616 296,1032 440,1128 Z"/>
   <glyph unicode="母" horiz-adv-x="1853" d="M 112,920 L 368,920 408,1584 1752,1584 1728,920 1944,920 1944,776 1720,776 1672,264 1872,264 1872,112 1648,112 C 1616,-80 1507,-176 1320,-176 L 1088,-160 1056,-16 1320,-24 C 1400,-24 1451,21 1472,112 L 256,112 352,776 112,776 112,920 Z M 1576,920 L 1600,1432 560,1432 528,920 1576,920 Z M 872,1376 C 1032,1291 1168,1200 1280,1104 L 1160,984 C 1043,1091 904,1187 744,1272 L 872,1376 Z M 1504,264 L 1560,776 520,776 456,264 1504,264 Z M 872,712 L 1280,448 1160,320 C 1043,427 904,525 744,616 L 872,712 Z"/>
   <glyph unicode="此" horiz-adv-x="1880" d="M 648,1648 L 808,1648 808,1096 1104,1096 1104,944 808,944 808,176 1096,256 1120,104 C 821,8 488,-72 120,-136 L 88,32 248,56 248,1344 408,1344 408,88 648,136 648,1648 Z M 1200,1648 L 1360,1648 1360,1040 C 1531,1109 1688,1192 1832,1288 L 1936,1144 C 1760,1037 1568,947 1360,872 L 1360,64 C 1360,27 1413,8 1520,8 1653,8 1731,25 1752,60 1773,95 1787,203 1792,384 L 1960,328 C 1955,120 1929,-11 1884,-64 1839,-117 1717,-144 1520,-144 1387,-144 1300,-132 1260,-108 1220,-84 1200,-43 1200,16 L 1200,1648 Z"/>
   <glyph unicode="样" horiz-adv-x="1906" d="M 136,1288 L 392,1288 392,1656 544,1656 544,1288 784,1288 784,1136 544,1136 544,1040 808,680 704,528 544,824 544,-184 392,-184 392,688 C 333,512 264,365 184,248 L 72,360 C 227,589 328,848 376,1136 L 136,1136 136,1288 Z M 1616,1656 L 1784,1608 1600,1296 1920,1296 1920,1144 1472,1144 1472,864 1872,864 1872,712 1472,712 1472,432 1944,432 1944,280 1472,280 1472,-184 1312,-184 1312,280 856,280 856,432 1312,432 1312,712 920,712 920,864 1312,864 1312,1144 880,1144 880,1296 1432,1296 1616,1656 Z M 1120,1648 C 1189,1573 1245,1491 1288,1400 L 1144,1336 C 1101,1432 1048,1515 984,1584 L 1120,1648 Z"/>
   <glyph unicode="校" horiz-adv-x="1906" d="M 136,1288 L 392,1288 392,1656 544,1656 544,1288 784,1288 784,1136 544,1136 544,1040 808,680 704,528 544,824 544,-184 392,-184 392,688 C 333,512 264,365 184,248 L 72,360 C 227,589 328,848 376,1136 L 136,1136 136,1288 Z M 1360,1640 L 1464,1392 1920,1392 1920,1240 848,1240 848,1392 1288,1392 1208,1592 1360,1640 Z M 1120,1160 L 1248,1080 C 1147,931 1024,811 880,720 L 776,840 C 925,941 1040,1048 1120,1160 Z M 1616,1136 C 1739,1061 1851,971 1952,864 L 1840,728 C 1733,845 1621,944 1504,1024 L 1616,1136 Z M 1584,792 L 1728,696 C 1659,531 1576,389 1480,272 1635,133 1795,35 1960,-24 L 1864,-192 C 1683,-107 1517,5 1368,144 1235,11 1053,-101 824,-192 L 736,-48 C 960,48 1131,155 1248,272 1147,395 1059,531 984,680 L 1112,776 C 1181,632 1264,504 1360,392 1451,515 1525,648 1584,792 Z"/>
   <glyph unicode="标" horiz-adv-x="1906" d="M 136,1288 L 392,1288 392,1656 544,1656 544,1288 784,1288 784,1136 544,1136 544,1040 808,680 704,528 544,824 544,-184 392,-184 392,688 C 333,512 264,365 184,248 L 72,360 C 227,589 328,848 376,1136 L 136,1136 136,1288 Z M 912,1552 L 1776,1552 1776,1400 912,1400 912,1552 Z M 792,1096 L 1912,1096 1912,944 1424,944 1424,16 C 1424,-59 1407,-112 1372,-144 1337,-176 1259,-192 1136,-192 1093,-192 1053,-184 1016,-168 L 984,0 C 1037,-21 1088,-32 1136,-32 1216,-32 1256,-5 1256,48 L 1256,944 792,944 792,1096 Z M 1680,744 C 1792,547 1883,336 1952,112 L 1800,24 C 1736,248 1648,459 1536,656 L 1680,744 Z M 960,736 L 1104,664 C 1013,381 915,165 808,16 L 680,128 C 792,309 885,512 960,736 Z"/>
   <glyph unicode="查" horiz-adv-x="1826" d="M 1688,832 L 1688,144 360,144 360,832 1688,832 Z M 1528,552 L 1528,696 520,696 520,552 1528,552 Z M 520,416 L 520,280 1528,280 1528,416 520,416 Z M 128,32 L 1912,32 1912,-120 128,-120 128,32 Z M 240,1512 L 944,1512 944,1664 1104,1664 1104,1512 1808,1512 1808,1368 1224,1368 C 1411,1197 1645,1075 1928,1000 L 1848,848 C 1549,955 1301,1109 1104,1312 L 1104,888 944,888 944,1312 C 757,1115 517,957 224,840 L 120,976 C 408,1072 637,1203 808,1368 L 240,1368 240,1512 Z"/>
   <glyph unicode="果" horiz-adv-x="1853" d="M 304,1584 L 1736,1584 1736,752 1096,752 1096,600 1928,600 1928,448 1232,448 C 1413,267 1648,131 1936,40 L 1840,-136 C 1531,-13 1283,163 1096,392 L 1096,-192 936,-192 936,384 C 744,160 504,-13 216,-136 L 104,8 C 381,120 613,267 800,448 L 120,448 120,600 936,600 936,752 304,752 304,1584 Z M 464,1232 L 936,1232 936,1432 464,1432 464,1232 Z M 1096,1432 L 1096,1232 1576,1232 1576,1432 1096,1432 Z M 464,904 L 936,904 936,1096 464,1096 464,904 Z M 1096,1096 L 1096,904 1576,904 1576,1096 1096,1096 Z"/>
   <glyph unicode="析" horiz-adv-x="1933" d="M 128,1288 L 424,1288 424,1656 584,1656 584,1288 864,1288 864,1136 584,1136 584,1056 888,680 784,528 584,840 584,-184 424,-184 424,720 C 360,539 272,381 160,248 L 48,360 C 224,579 344,837 408,1136 L 128,1136 128,1288 Z M 1864,1616 L 1944,1480 C 1709,1432 1435,1397 1120,1376 L 1120,1008 1944,1008 1944,872 1680,872 1680,-160 1536,-160 1536,872 1120,872 C 1120,376 1053,27 920,-176 L 792,-72 C 856,24 901,143 928,284 955,425 968,832 968,1504 1336,1531 1635,1568 1864,1616 Z"/>
   <glyph unicode="构" horiz-adv-x="1854" d="M 128,1288 L 424,1288 424,1656 584,1656 584,1288 864,1288 864,1136 584,1136 584,1056 888,680 784,528 584,840 584,-184 424,-184 424,720 C 360,539 272,381 160,248 L 48,360 C 224,579 344,837 408,1136 L 128,1136 128,1288 Z M 1128,1656 L 1272,1608 1176,1336 1888,1336 C 1888,584 1865,143 1820,12 1775,-119 1691,-184 1568,-184 L 1400,-152 1368,8 1544,-24 C 1603,-24 1645,17 1672,100 1699,183 1717,544 1728,1184 L 1112,1184 C 1053,1061 989,955 920,864 L 792,968 C 947,1171 1059,1400 1128,1656 Z M 1432,736 C 1528,576 1592,413 1624,248 L 1464,200 1440,312 C 1269,253 1088,213 896,192 L 848,336 C 960,485 1053,704 1128,992 L 1288,944 C 1208,672 1123,477 1032,360 1149,371 1269,403 1392,456 L 1280,704 1432,736 Z"/>
   <glyph unicode="机" horiz-adv-x="1933" d="M 128,1288 L 424,1288 424,1656 584,1656 584,1288 864,1288 864,1136 584,1136 584,1056 888,680 784,528 584,840 584,-184 424,-184 424,720 C 360,539 272,381 160,248 L 48,360 C 224,579 344,837 408,1136 L 128,1136 128,1288 Z M 1656,1552 L 1656,104 C 1656,51 1677,24 1720,24 1747,24 1764,33 1772,52 1780,71 1787,131 1792,232 L 1960,184 C 1955,51 1936,-36 1904,-76 1872,-116 1805,-136 1704,-136 1613,-136 1556,-125 1532,-104 1508,-83 1496,-29 1496,56 L 1496,1392 1128,1392 1128,736 C 1117,347 992,43 752,-176 L 640,-40 C 859,152 968,467 968,904 L 968,1552 1656,1552 Z"/>
   <glyph unicode="术" horiz-adv-x="1774" d="M 144,1176 L 936,1176 936,1648 1096,1648 1096,1176 1896,1176 1896,1024 1192,1024 C 1379,645 1613,371 1896,200 L 1808,32 C 1515,229 1277,515 1096,888 L 1096,-192 936,-192 936,880 C 755,528 523,251 240,48 L 136,184 C 435,397 669,677 840,1024 L 144,1024 144,1176 Z M 1368,1616 L 1688,1400 1576,1280 C 1491,1371 1392,1445 1280,1504 L 1368,1616 Z"/>
   <glyph unicode="智" horiz-adv-x="1774" d="M 1704,672 L 1704,-184 1544,-184 1544,-88 504,-88 504,-184 344,-184 344,672 1704,672 Z M 504,360 L 1544,360 1544,528 504,528 504,360 Z M 504,56 L 1544,56 1544,224 504,224 504,56 Z M 400,1688 L 552,1656 496,1544 1008,1544 1008,1400 696,1400 688,1224 1048,1224 1048,1088 672,1088 656,1040 C 789,981 912,912 1024,832 L 912,704 600,920 C 525,803 384,707 176,632 L 104,760 C 323,835 456,944 504,1088 L 128,1088 128,1224 536,1224 544,1400 392,1400 216,1240 120,1352 C 243,1437 336,1549 400,1688 Z M 1128,1528 L 1848,1528 1848,864 1128,864 1128,1528 Z M 1288,1000 L 1688,1000 1688,1384 1288,1384 1288,1000 Z"/>
   <glyph unicode="文" horiz-adv-x="1853" d="M 128,1320 L 952,1320 800,1552 936,1648 C 1016,1552 1085,1443 1144,1320 L 1920,1320 1920,1168 1608,1168 C 1565,965 1497,789 1404,640 1311,491 1232,397 1168,360 1360,216 1613,88 1928,-24 L 1832,-200 C 1533,-99 1264,48 1024,240 800,75 523,-69 192,-192 L 80,-40 C 400,72 669,205 888,360 669,573 515,843 424,1168 L 128,1168 128,1320 Z M 600,1168 C 691,880 835,648 1032,472 1229,643 1363,875 1432,1168 L 600,1168 Z"/>
   <glyph unicode="数" horiz-adv-x="1853" d="M 1368,1320 L 1904,1320 1904,1168 1816,1168 C 1784,795 1709,512 1592,320 1688,192 1811,75 1960,-32 L 1840,-184 C 1717,-83 1603,37 1496,176 1389,32 1259,-91 1104,-192 L 992,-48 C 1152,48 1285,173 1392,328 L 1184,760 1120,624 992,720 C 1125,1003 1221,1315 1280,1656 L 1440,1608 1368,1320 Z M 1656,1168 L 1328,1168 1272,984 C 1336,792 1408,627 1488,488 1557,637 1608,819 1640,1032 L 1640,1040 1656,1168 Z M 144,1312 L 560,1312 560,1648 704,1648 704,1312 1088,1312 1088,1176 704,1176 704,808 560,808 560,1056 C 469,928 363,824 240,744 L 136,872 C 269,941 387,1043 488,1176 L 144,1176 144,1312 Z M 336,1616 L 440,1400 312,1336 216,1560 336,1616 Z M 928,1616 L 1048,1560 C 1000,1469 949,1400 896,1352 L 792,1448 C 845,1496 891,1552 928,1616 Z M 872,1104 L 1016,904 896,832 C 864,907 819,976 760,1040 L 872,1104 Z M 136,640 L 448,640 504,768 656,752 608,640 968,640 968,504 C 904,365 827,248 736,152 L 984,0 888,-144 616,40 C 504,-56 355,-133 168,-192 L 120,-56 C 259,-13 379,43 480,112 L 200,256 368,504 136,504 136,640 Z M 536,504 L 416,320 608,224 C 688,309 752,403 800,504 L 536,504 Z"/>
   <glyph unicode="收" horiz-adv-x="1774" d="M 1160,1656 L 1320,1608 1256,1320 1936,1320 1936,1168 1808,1168 C 1771,811 1685,523 1552,304 1664,176 1800,61 1960,-40 L 1840,-192 C 1696,-91 1568,29 1456,168 1339,24 1192,-96 1016,-192 L 904,-56 C 1085,40 1232,163 1344,312 1248,445 1160,603 1080,784 L 1000,624 872,720 C 1000,981 1096,1293 1160,1656 Z M 1160,1000 C 1240,781 1333,597 1440,448 1541,640 1608,880 1640,1168 L 1216,1168 1160,1000 Z M 208,1568 L 368,1568 368,368 672,456 672,1656 824,1656 824,-184 672,-184 672,304 280,192 208,264 208,1568 Z"/>
   <glyph unicode="摘" horiz-adv-x="1827" d="M 696,808 L 720,664 512,560 512,-8 C 507,-125 451,-184 344,-184 L 168,-160 136,8 C 195,-13 256,-24 320,-24 341,-24 352,8 352,72 L 352,488 160,416 96,584 352,672 352,1168 128,1168 128,1320 352,1320 352,1656 512,1656 512,1320 728,1320 728,1168 512,1168 512,728 696,808 Z M 1368,1672 L 1456,1496 1904,1496 1904,1360 1760,1360 1648,1128 1904,1128 1904,0 C 1904,-123 1832,-184 1688,-184 L 1536,-168 1504,-32 1680,-40 C 1728,-40 1752,-16 1752,32 L 1752,992 1448,992 1448,816 1688,816 1688,680 1448,680 1448,512 1632,512 1632,88 1112,88 1112,512 1296,512 1296,680 1056,680 1056,816 1296,816 1296,992 992,992 992,-184 840,-184 840,1128 1104,1128 960,1360 824,1360 824,1496 1280,1496 1208,1624 1368,1672 Z M 1272,1128 L 1488,1128 1592,1360 1144,1360 1272,1128 Z M 1256,208 L 1488,208 1488,392 1256,392 1256,208 Z"/>
   <glyph unicode="搜" horiz-adv-x="1880" d="M 968,432 C 1048,325 1152,235 1280,160 L 1456,288 1624,464 784,464 784,608 1216,608 1216,768 776,768 776,1496 C 893,1523 995,1560 1080,1608 L 1192,1488 C 1112,1445 1024,1413 928,1392 L 928,1216 1144,1216 1144,1080 928,1080 928,912 1216,912 1216,1656 1368,1656 1368,912 1656,912 1656,1080 1440,1080 1440,1216 1656,1216 1656,1376 1440,1376 1440,1520 1808,1520 1808,768 1368,768 1368,608 1816,608 1816,496 C 1720,315 1597,179 1448,88 1587,35 1760,3 1968,-8 L 1920,-168 C 1669,-157 1453,-107 1272,-16 1112,-96 933,-155 736,-192 L 656,-32 C 827,-5 976,32 1104,80 997,160 909,251 840,352 L 968,432 Z M 120,1320 L 312,1320 312,1656 464,1656 464,1320 656,1320 656,1168 464,1168 464,768 616,856 648,712 464,592 464,-32 C 459,-133 408,-184 312,-184 L 160,-168 120,-16 288,-32 C 304,-32 312,-3 312,56 L 312,512 144,424 88,592 312,696 312,1168 120,1168 120,1320 Z"/>
   <glyph unicode="提" horiz-adv-x="1853" d="M 696,808 L 720,664 512,560 512,-8 C 507,-125 451,-184 344,-184 L 168,-160 136,8 C 195,-13 256,-24 320,-24 341,-24 352,8 352,72 L 352,488 160,416 96,584 352,672 352,1168 128,1168 128,1320 352,1320 352,1656 512,1656 512,1320 728,1320 728,1168 512,1168 512,728 696,808 Z M 832,1616 L 1760,1616 1760,880 832,880 832,1616 Z M 984,1320 L 1608,1320 1608,1472 984,1472 984,1320 Z M 984,1024 L 1608,1024 1608,1176 984,1176 984,1024 Z M 864,552 L 1008,520 C 997,429 976,344 944,264 1013,168 1109,99 1232,56 L 1232,600 696,600 696,744 1864,744 1864,600 1384,600 1384,384 1760,384 1760,240 1384,240 1384,24 C 1480,8 1661,0 1928,0 L 1880,-160 1728,-160 C 1323,-160 1040,-69 880,112 827,0 760,-99 680,-184 L 560,-72 C 736,115 837,323 864,552 Z"/>
   <glyph unicode="推" horiz-adv-x="1880" d="M 112,1320 L 360,1320 360,1656 520,1656 520,1320 680,1320 680,1168 520,1168 520,776 704,864 736,720 520,600 520,0 C 515,-123 448,-184 320,-184 256,-184 197,-173 144,-152 L 112,8 C 171,-13 232,-24 296,-24 339,-24 360,3 360,56 L 360,528 160,448 96,616 360,712 360,1168 112,1168 112,1320 Z M 1032,-48 L 1032,-184 872,-184 872,976 760,824 680,984 C 829,1197 936,1424 1000,1664 L 1160,1608 1056,1328 1400,1328 1280,1600 1432,1656 C 1491,1555 1536,1445 1568,1328 L 1936,1328 1936,1176 1528,1176 1528,912 1888,912 1888,776 1528,776 1528,504 1888,504 1888,360 1528,360 1528,96 1952,96 1952,-48 1032,-48 Z M 1032,1176 L 1032,912 1376,912 1376,1176 1032,1176 Z M 1032,776 L 1032,504 1376,504 1376,776 1032,776 Z M 1032,360 L 1032,96 1376,96 1376,360 1032,360 Z"/>
   <glyph unicode="据" horiz-adv-x="1853" d="M 112,1320 L 360,1320 360,1656 520,1656 520,1320 680,1320 680,1168 520,1168 520,776 704,864 736,720 520,600 520,0 C 515,-123 448,-184 320,-184 256,-184 197,-173 144,-152 L 112,8 C 171,-13 232,-24 296,-24 339,-24 360,3 360,56 L 360,528 160,448 96,616 360,712 360,1168 112,1168 112,1320 Z M 1352,720 L 960,720 C 949,384 893,88 792,-168 L 648,-80 C 755,203 808,507 808,832 L 808,1576 1856,1576 1856,1088 1504,1088 1504,864 1928,864 1928,720 1504,720 1504,488 1848,488 1848,-184 1696,-184 1696,-64 1168,-64 1168,-184 1016,-184 1016,488 1352,488 1352,720 Z M 1704,1432 L 960,1432 960,1232 1704,1232 1704,1432 Z M 960,1088 L 960,864 1352,864 1352,1088 960,1088 Z M 1168,80 L 1696,80 1696,344 1168,344 1168,80 Z"/>
   <glyph unicode="报" horiz-adv-x="1880" d="M 104,1320 L 400,1320 400,1656 560,1656 560,1320 808,1320 808,1168 560,1168 560,752 808,856 840,712 560,584 560,-8 C 555,-125 496,-184 384,-184 L 144,-160 112,8 360,-24 C 387,-24 400,8 400,72 L 400,520 136,424 80,592 400,696 400,1168 104,1168 104,1320 Z M 1120,776 L 1032,776 1032,-176 872,-176 872,1616 1808,1616 C 1803,1333 1783,1159 1748,1092 1713,1025 1656,992 1576,992 L 1352,1016 1328,1168 1568,1144 C 1595,1144 1611,1152 1616,1168 1621,1184 1632,1283 1648,1464 L 1032,1464 1032,920 1872,920 C 1845,632 1763,389 1624,192 1715,107 1824,37 1952,-16 L 1864,-184 C 1731,-120 1613,-37 1512,64 1411,-43 1291,-131 1152,-200 L 1048,-56 C 1197,8 1317,88 1408,184 1285,323 1189,520 1120,776 Z M 1512,312 C 1603,456 1661,611 1688,776 L 1280,776 C 1333,595 1411,440 1512,312 Z"/>
   <glyph unicode="技" horiz-adv-x="1880" d="M 128,1320 L 392,1320 392,1656 552,1656 552,1320 776,1320 776,1168 552,1168 552,768 760,856 784,712 552,592 552,-8 C 547,-125 488,-184 376,-184 L 168,-160 136,8 C 205,-13 277,-24 352,-24 379,-24 392,8 392,72 L 392,520 144,424 88,592 392,696 392,1168 128,1168 128,1320 Z M 832,1352 L 1288,1352 1288,1656 1448,1656 1448,1352 1912,1352 1912,1200 1448,1200 1448,888 1824,888 1824,736 C 1733,533 1627,363 1504,224 1627,123 1779,40 1960,-24 L 1864,-192 C 1677,-123 1515,-24 1376,104 1227,-35 1053,-133 856,-192 L 776,-32 C 963,21 1123,107 1256,224 1133,368 1035,539 960,736 L 888,736 888,888 1288,888 1288,1200 832,1200 832,1352 Z M 1376,344 C 1477,461 1563,592 1632,736 L 1136,736 C 1195,581 1275,451 1376,344 Z"/>
   <glyph unicode="批" horiz-adv-x="1906" d="M 760,928 L 784,784 552,656 552,-8 C 547,-125 488,-184 376,-184 L 168,-160 136,8 C 205,-13 277,-24 352,-24 379,-24 392,8 392,72 L 392,576 120,464 64,632 392,760 392,1168 128,1168 128,1320 392,1320 392,1656 552,1656 552,1320 776,1320 776,1168 552,1168 552,824 760,928 Z M 896,1640 L 1056,1640 1056,1048 1328,1048 1328,896 1056,896 1056,32 1296,136 1328,-24 968,-160 896,-80 896,1640 Z M 1400,1640 L 1552,1640 1552,992 1856,1264 1960,1128 C 1832,1011 1696,909 1552,824 L 1552,56 C 1552,13 1581,-8 1640,-8 1704,-8 1745,7 1764,36 1783,65 1797,152 1808,296 L 1960,240 C 1939,53 1909,-60 1872,-100 1835,-140 1757,-160 1640,-160 1485,-160 1405,-107 1400,0 L 1400,1640 Z"/>
   <glyph unicode="手" horiz-adv-x="1880" d="M 1728,1664 L 1808,1520 1128,1400 1128,1072 1808,1072 1808,912 1128,912 1128,624 1944,624 1944,464 1128,464 1128,8 C 1123,-115 1048,-176 904,-176 L 648,-152 616,16 880,-16 C 939,-16 968,13 968,72 L 968,464 104,464 104,624 968,624 968,912 240,912 240,1072 968,1072 968,1376 248,1328 192,1496 C 704,1496 1216,1552 1728,1664 Z"/>
   <glyph unicode="成" horiz-adv-x="1880" d="M 1552,1656 C 1611,1597 1661,1531 1704,1456 L 1560,1392 1416,1592 1552,1656 Z M 1840,1352 L 1840,1208 1296,1208 C 1312,909 1355,659 1424,456 1499,611 1563,800 1616,1024 L 1776,960 C 1712,677 1621,440 1504,248 1589,72 1656,-16 1704,-16 1747,-16 1779,61 1800,216 L 1944,152 C 1896,-72 1816,-184 1704,-184 1603,-184 1499,-88 1392,104 1291,-19 1179,-115 1056,-184 L 976,-24 C 1104,51 1216,149 1312,272 1216,517 1157,829 1136,1208 L 416,1208 416,872 960,872 C 955,493 936,255 904,156 872,57 813,8 728,8 L 552,24 528,184 712,168 C 739,168 755,183 760,212 765,241 776,416 792,736 L 416,736 C 416,379 352,80 224,-160 L 80,-72 C 197,168 259,400 264,624 L 264,1352 1128,1352 1112,1656 1280,1656 1288,1352 1840,1352 Z"/>
   <glyph unicode="情" horiz-adv-x="1880" d="M 480,1136 L 480,-184 336,-184 336,1656 480,1656 480,1328 656,1120 568,992 480,1136 Z M 160,1256 L 280,1232 C 269,1024 245,832 208,656 L 80,720 160,1256 Z M 704,1536 L 1192,1536 1192,1656 1352,1656 1352,1536 1888,1536 1888,1400 1352,1400 1352,1272 1824,1272 1824,1136 1352,1136 1352,1008 1944,1008 1944,872 632,872 632,1008 1192,1008 1192,1136 784,1136 784,1272 1192,1272 1192,1400 704,1400 704,1536 Z M 1792,744 L 1792,8 C 1792,-120 1720,-184 1576,-184 L 1416,-168 1376,-16 1568,-32 C 1611,-32 1632,-5 1632,48 L 1632,104 936,104 936,-184 776,-184 776,744 1792,744 Z M 936,488 L 1632,488 1632,616 936,616 936,488 Z M 936,232 L 1632,232 1632,360 936,360 936,232 Z"/>
   <glyph unicode="息" horiz-adv-x="1880" d="M 848,1680 L 1024,1624 952,1512 1720,1512 1720,552 336,552 336,1512 768,1512 848,1680 Z M 496,1224 L 1560,1224 1560,1360 496,1360 496,1224 Z M 496,960 L 1560,960 1560,1096 496,1096 496,960 Z M 496,704 L 1560,704 1560,840 496,840 496,704 Z M 968,480 C 1085,416 1192,339 1288,248 L 1176,112 864,376 968,480 Z M 328,424 L 464,344 C 384,152 301,3 216,-104 L 80,16 C 181,144 264,280 328,424 Z M 576,416 L 736,416 736,88 C 736,51 745,27 764,16 783,5 835,0 920,0 1213,0 1368,19 1384,56 L 1416,208 1576,144 C 1544,-5 1501,-91 1448,-112 1373,-133 1173,-144 848,-144 677,-144 587,-99 576,-8 L 576,416 Z M 1680,416 C 1792,288 1885,147 1960,-8 L 1800,-88 C 1736,61 1648,205 1536,344 L 1680,416 Z"/>
   <glyph unicode="态" horiz-adv-x="1906" d="M 1048,544 C 1128,448 1195,341 1248,224 L 1096,160 C 1043,277 979,381 904,472 L 1048,544 Z M 1712,488 C 1813,344 1896,187 1960,16 L 1792,-56 C 1733,120 1656,277 1560,416 L 1712,488 Z M 576,480 L 736,480 736,96 C 736,64 744,41 760,28 776,15 829,8 920,8 L 1224,16 C 1304,16 1353,31 1372,60 1391,89 1405,155 1416,256 L 1576,184 C 1544,13 1501,-83 1448,-104 1373,-131 1173,-144 848,-144 677,-144 587,-93 576,8 L 576,480 Z M 328,456 L 464,368 C 379,165 291,5 200,-112 L 72,0 C 179,139 264,291 328,456 Z M 240,1384 L 896,1384 928,1656 1080,1640 1056,1384 1840,1384 1840,1232 1248,1232 C 1392,976 1616,808 1920,728 L 1856,568 C 1504,669 1245,891 1080,1232 L 1016,1232 C 899,885 637,667 232,576 L 136,720 C 493,800 731,971 848,1232 L 240,1232 240,1384 Z M 944,904 L 1256,728 1144,592 840,800 944,904 Z"/>
   <glyph unicode="影" horiz-adv-x="1880" d="M 1696,1640 L 1840,1560 C 1701,1336 1504,1149 1248,1000 L 1144,1136 C 1400,1301 1584,1469 1696,1640 Z M 1728,1104 L 1880,1016 C 1747,808 1549,632 1288,488 L 1184,624 C 1419,763 1600,923 1728,1104 Z M 1808,592 L 1960,504 C 1784,237 1528,11 1192,-176 L 1088,-40 C 1413,152 1653,363 1808,592 Z M 200,1608 L 1080,1608 1080,1056 688,1056 720,952 1176,952 1176,816 104,816 104,952 552,952 520,1056 200,1056 200,1608 Z M 352,1392 L 936,1392 936,1480 352,1480 352,1392 Z M 352,1184 L 936,1184 936,1272 352,1272 352,1184 Z M 200,720 L 1080,720 1080,320 736,320 736,-40 C 731,-136 661,-184 528,-184 480,-184 435,-173 392,-152 L 368,-16 C 421,-37 475,-48 528,-48 565,-48 584,-27 584,16 L 584,320 200,320 200,720 Z M 344,440 L 936,440 936,600 344,600 344,440 Z M 296,264 L 448,216 C 389,88 323,-19 248,-104 L 112,-32 C 197,69 259,168 296,264 Z M 928,232 C 997,168 1056,96 1104,16 L 968,-56 808,160 928,232 Z"/>
   <glyph unicode="式" horiz-adv-x="1800" d="M 144,1312 L 1144,1312 1128,1656 1304,1656 1312,1312 1912,1312 1912,1160 1320,1160 C 1341,856 1393,588 1476,356 1559,124 1627,8 1680,8 1728,8 1765,133 1792,384 L 1936,328 C 1893,-13 1808,-184 1680,-184 1573,-184 1467,-52 1360,212 1253,476 1184,792 1152,1160 L 144,1160 144,1312 Z M 1560,1656 C 1651,1608 1731,1549 1800,1480 L 1696,1352 C 1621,1432 1541,1499 1456,1552 L 1560,1656 Z M 208,832 L 1056,832 1056,680 696,680 696,168 1104,240 1128,88 C 845,19 528,-37 176,-80 L 144,88 536,144 536,680 208,680 208,832 Z"/>
   <glyph unicode="平" horiz-adv-x="1826" d="M 224,1576 L 1816,1576 1816,1424 1112,1424 1112,624 1920,624 1920,472 1112,472 1112,-176 952,-176 952,472 128,472 128,624 952,624 952,1424 224,1424 224,1576 Z M 1552,1328 L 1720,1272 C 1651,1053 1571,867 1480,712 L 1320,800 C 1421,981 1499,1157 1552,1328 Z M 456,1304 C 557,1149 643,976 712,784 L 544,712 C 480,904 400,1077 304,1232 L 456,1304 Z"/>
   <glyph unicode="布" horiz-adv-x="1853" d="M 136,1392 L 720,1392 848,1672 1008,1624 912,1392 1920,1392 1920,1240 840,1240 632,880 1048,880 1048,1184 1208,1184 1208,880 1784,880 1784,224 C 1784,96 1712,32 1568,32 L 1368,56 1328,208 1560,184 C 1603,184 1624,211 1624,264 L 1624,728 1208,728 1208,-184 1048,-184 1048,728 640,728 640,-16 480,-16 480,680 C 395,573 299,475 192,384 L 88,488 C 301,712 485,963 640,1240 L 136,1240 136,1392 Z"/>
   <glyph unicode="展" horiz-adv-x="1827" d="M 1480,576 L 1904,576 1904,440 1224,440 C 1277,349 1344,269 1424,200 1520,243 1603,299 1672,368 L 1784,248 1552,112 C 1653,53 1773,5 1912,-32 L 1832,-176 C 1469,-69 1213,136 1064,440 L 816,440 816,-8 1096,112 1160,-16 768,-192 656,-88 656,440 408,440 C 371,205 307,3 216,-168 L 80,-64 C 208,171 272,435 272,728 L 272,1600 1784,1600 1784,1120 1480,1120 1480,920 1792,920 1792,776 1480,776 1480,576 Z M 1624,1464 L 432,1464 432,1256 1624,1256 1624,1464 Z M 432,1120 L 424,576 800,576 800,776 488,776 488,920 800,920 800,1120 432,1120 Z M 1328,920 L 1328,1120 952,1120 952,920 1328,920 Z M 952,576 L 1328,576 1328,776 952,776 952,576 Z"/>
   <glyph unicode="导" horiz-adv-x="1774" d="M 1360,632 L 1520,632 1520,480 1904,480 1904,336 1520,336 1520,0 C 1515,-123 1435,-184 1280,-184 L 1112,-168 1080,-8 1280,-24 C 1333,-24 1360,3 1360,56 L 1360,336 152,336 152,480 1360,480 1360,632 Z M 560,264 C 683,211 792,149 888,80 L 784,-48 456,152 560,264 Z M 1664,1592 L 1664,1064 464,1064 464,912 C 464,880 489,859 540,848 591,837 765,832 1064,832 1448,832 1649,844 1668,868 1687,892 1701,941 1712,1016 L 1864,928 C 1837,789 1785,713 1708,700 1631,687 1416,680 1064,680 691,680 471,693 404,720 337,747 304,795 304,864 L 304,1592 1664,1592 Z M 464,1440 L 464,1216 1504,1216 1504,1440 464,1440 Z"/>
   <glyph unicode="容" horiz-adv-x="1880" d="M 1040,1672 L 1128,1480 1896,1480 1896,1112 1736,1112 1736,1336 312,1336 312,1112 152,1112 152,1480 952,1480 872,1624 1040,1672 Z M 712,1256 L 832,1160 C 699,1016 541,896 360,800 L 256,944 C 427,1019 579,1123 712,1256 Z M 1336,1240 C 1501,1149 1653,1040 1792,912 L 1680,776 C 1536,915 1387,1035 1232,1136 L 1336,1240 Z M 1008,1088 L 1168,1040 1096,960 C 1357,768 1640,621 1944,520 L 1848,360 1632,456 1632,-184 1472,-184 1472,-88 576,-88 576,-184 416,-184 416,456 184,344 104,488 C 525,680 827,880 1008,1088 Z M 480,496 L 1560,496 C 1357,603 1168,725 992,864 843,725 672,603 480,496 Z M 576,48 L 1472,48 1472,360 576,360 576,48 Z"/>
   <glyph unicode="学" horiz-adv-x="1880" d="M 1024,1672 C 1083,1597 1125,1512 1152,1416 L 992,1360 C 971,1456 933,1547 880,1632 L 1024,1672 Z M 1512,1656 L 1696,1600 C 1643,1504 1565,1408 1464,1312 L 1880,1312 1880,920 1728,920 1728,1168 312,1168 312,928 160,928 160,1312 1280,1312 C 1381,1424 1459,1539 1512,1656 Z M 496,1632 C 565,1568 621,1499 664,1424 L 520,1336 C 483,1411 429,1483 360,1552 L 496,1632 Z M 440,952 L 1584,952 1584,792 1112,544 1112,488 1944,488 1944,336 1112,336 1112,-24 C 1112,-131 1043,-184 904,-184 L 688,-160 664,-8 864,-32 C 928,-32 960,-21 960,0 L 960,336 104,336 104,488 960,488 960,624 1328,808 440,808 440,952 Z"/>
   <glyph unicode="如" horiz-adv-x="1801" d="M 104,1296 L 392,1296 472,1648 624,1616 552,1296 976,1296 C 971,864 896,531 752,296 L 992,56 848,-48 664,168 C 541,24 403,-96 248,-192 L 136,-48 C 317,59 453,168 544,280 L 192,584 360,1144 104,1144 104,1296 Z M 376,632 L 632,408 C 733,605 795,851 816,1144 L 520,1144 376,632 Z M 1864,1504 L 1864,-128 1704,-128 1704,48 1280,48 1280,-144 1120,-144 1120,1504 1864,1504 Z M 1280,200 L 1704,200 1704,1352 1280,1352 1280,200 Z"/>
   <glyph unicode="多" horiz-adv-x="1694" d="M 1032,1672 L 1192,1640 1048,1496 1712,1496 1712,1352 C 1504,1027 1027,811 280,704 L 216,864 C 904,933 1341,1096 1528,1352 L 848,1352 736,1288 912,1152 800,1040 584,1216 376,1136 272,1248 C 517,1333 691,1413 792,1488 L 800,1496 808,1496 1032,1672 Z M 1128,864 L 1272,792 1168,712 1784,712 1784,568 C 1549,184 1019,-69 192,-192 L 128,-32 C 907,59 1397,259 1600,568 L 976,568 760,440 960,288 840,168 608,360 384,264 288,400 C 603,507 883,661 1128,864 Z"/>
   <glyph unicode="处" horiz-adv-x="1853" d="M 496,1664 L 648,1616 568,1304 1056,1304 1056,1144 1040,1056 C 976,773 901,555 816,400 928,267 1067,168 1232,104 1397,40 1637,5 1952,0 L 1880,-168 C 1565,-163 1325,-127 1160,-60 995,7 848,112 720,256 581,59 416,-85 224,-176 L 152,-16 C 344,64 501,195 624,376 549,499 483,667 424,880 L 224,528 112,648 C 272,920 400,1259 496,1664 Z M 504,1104 C 563,880 635,693 720,544 800,699 859,899 896,1144 L 520,1144 504,1104 Z M 1296,1656 L 1456,1656 1456,1080 C 1653,989 1821,880 1960,752 L 1864,608 C 1747,720 1611,819 1456,904 L 1456,168 1296,168 1296,1656 Z"/>
   <glyph unicode="填" horiz-adv-x="1880" d="M 112,1184 L 344,1184 344,1624 496,1624 496,1184 728,1184 728,1032 496,1032 496,400 696,480 720,336 C 539,251 339,179 120,120 L 88,280 344,352 344,1032 112,1032 112,1184 Z M 792,1520 L 1280,1520 1304,1664 1472,1640 1448,1520 1896,1520 1896,1384 1416,1384 1392,1256 1824,1256 1824,304 1944,304 1944,168 736,168 736,304 848,304 848,1256 1224,1256 1248,1384 792,1384 792,1520 Z M 1664,1008 L 1664,1120 1008,1120 1008,1008 1664,1008 Z M 1008,888 L 1008,776 1664,776 1664,888 1008,888 Z M 1664,656 L 1008,656 1008,544 1664,544 1664,656 Z M 1664,416 L 1008,416 1008,304 1664,304 1664,416 Z M 1512,128 C 1651,85 1787,24 1920,-56 L 1832,-200 C 1699,-104 1560,-35 1416,8 L 1512,128 Z M 1080,128 L 1208,24 C 1080,-61 923,-133 736,-192 L 640,-56 C 800,-13 947,48 1080,128 Z"/>
   <glyph unicode="基" horiz-adv-x="1880" d="M 168,1520 L 496,1520 496,1656 640,1656 640,1520 1400,1520 1400,1656 1552,1656 1552,1520 1888,1520 1888,1376 1552,1376 1552,704 1960,704 1960,560 1488,560 C 1611,448 1771,363 1968,304 L 1880,136 C 1635,232 1437,373 1288,560 L 768,560 C 629,389 429,248 168,136 L 80,272 C 309,368 472,464 568,560 L 104,560 104,704 496,704 496,1376 168,1376 168,1520 Z M 640,1256 L 1400,1256 1400,1376 640,1376 640,1256 Z M 640,984 L 1400,984 1400,1120 640,1120 640,984 Z M 640,704 L 1400,704 1400,848 640,848 640,704 Z M 552,328 L 936,328 936,504 1096,504 1096,328 1480,328 1480,184 1096,184 1096,16 1800,16 1800,-128 264,-128 264,16 936,16 936,184 552,184 552,328 Z"/>
   <glyph unicode="图" horiz-adv-x="1721" d="M 776,1400 L 920,1368 888,1304 1400,1304 1400,1176 C 1336,1064 1259,973 1168,904 1317,835 1472,784 1632,752 L 1552,616 C 1381,659 1208,723 1032,808 877,728 693,669 480,632 L 400,760 C 592,792 752,840 880,904 L 704,1048 544,912 440,1008 C 589,1109 701,1240 776,1400 Z M 800,1152 L 1024,976 C 1104,1035 1168,1099 1216,1168 L 808,1168 800,1152 Z M 904,688 L 1328,544 1264,400 832,552 904,688 Z M 736,472 C 987,408 1197,331 1368,240 L 1280,112 C 1115,197 912,275 672,344 L 736,472 Z M 1864,1592 L 1864,-184 1704,-184 1704,-72 344,-72 344,-184 184,-184 184,1592 1864,1592 Z M 344,80 L 1704,80 1704,1440 344,1440 344,80 Z"/>
   <glyph unicode="回" horiz-adv-x="1615" d="M 1832,1544 L 1832,-184 1672,-184 1672,-40 384,-40 384,-184 224,-184 224,1544 1832,1544 Z M 384,112 L 1672,112 1672,1392 384,1392 384,112 Z M 648,1144 L 1400,1144 1400,360 648,360 648,1144 Z M 808,512 L 1240,512 1240,992 808,992 808,512 Z"/>
   <glyph unicode="响" horiz-adv-x="1747" d="M 1896,1376 L 1896,32 C 1896,-101 1819,-168 1664,-168 L 1472,-152 1432,8 1656,-8 C 1720,-8 1752,19 1752,72 L 1752,1224 984,1224 984,-192 840,-192 840,1376 1112,1376 C 1160,1461 1197,1563 1224,1680 L 1392,1640 1296,1376 1896,1376 Z M 1136,1048 L 1608,1048 1608,176 1136,176 1136,1048 Z M 1280,304 L 1456,304 1456,920 1280,920 1280,304 Z M 736,1480 L 736,216 584,216 584,344 312,344 312,144 160,144 160,1480 736,1480 Z M 312,496 L 584,496 584,1328 312,1328 312,496 Z"/>
   <glyph unicode="员" horiz-adv-x="1800" d="M 408,1608 L 1616,1608 1616,1112 408,1112 408,1608 Z M 568,1264 L 1456,1264 1456,1456 568,1456 568,1264 Z M 1720,976 L 1720,216 1560,216 1560,824 464,824 464,208 304,208 304,976 1720,976 Z M 912,728 L 1072,728 1072,424 C 1072,125 795,-83 240,-200 L 128,-56 C 427,3 631,75 740,160 849,245 904,352 904,480 909,485 912,568 912,728 Z M 1280,296 C 1488,189 1693,64 1896,-80 L 1768,-208 C 1592,-69 1384,67 1144,200 L 1280,296 Z"/>
   <glyph unicode="告" horiz-adv-x="1880" d="M 504,1648 L 664,1592 568,1368 952,1368 952,1656 1112,1656 1112,1368 1808,1368 1808,1216 1112,1216 1112,928 1944,928 1944,776 104,776 104,928 952,928 952,1216 480,1216 344,1024 208,1128 C 341,1288 440,1461 504,1648 Z M 1728,600 L 1728,-184 1568,-184 1568,-64 504,-64 504,-184 344,-184 344,600 1728,600 Z M 504,88 L 1568,88 1568,448 504,448 504,88 Z"/>
   <glyph unicode="合" horiz-adv-x="1880" d="M 1008,1680 L 1176,1632 1120,1568 C 1387,1355 1667,1189 1960,1072 L 1864,912 C 1581,1035 1301,1219 1024,1464 773,1229 488,1040 168,896 L 80,1040 C 512,1243 821,1456 1008,1680 Z M 416,992 L 1624,992 1624,832 416,832 416,992 Z M 1696,616 L 1696,-184 1536,-184 1536,-56 496,-56 496,-184 336,-184 336,616 1696,616 Z M 496,96 L 1536,96 1536,464 496,464 496,96 Z"/>
   <glyph unicode="台" horiz-adv-x="1721" d="M 1416,1432 C 1608,1261 1763,1080 1880,888 L 1728,800 1632,952 C 1168,877 704,835 240,824 L 168,976 C 445,1152 664,1381 824,1664 L 984,1600 C 797,1301 624,1096 464,984 784,995 1139,1029 1528,1088 L 1280,1344 1416,1432 Z M 1696,656 L 1696,-184 1536,-184 1536,-48 480,-48 480,-184 320,-184 320,656 1696,656 Z M 480,96 L 1536,96 1536,512 480,512 480,96 Z"/>
   <glyph unicode="可" horiz-adv-x="1880" d="M 104,1544 L 1952,1544 1952,1392 1648,1392 1648,0 C 1643,-123 1549,-184 1368,-184 L 1208,-168 1176,-16 1344,-32 C 1440,-32 1488,-3 1488,56 L 1488,1392 104,1392 104,1544 Z M 1096,1080 L 1096,376 488,376 488,264 328,264 328,1080 1096,1080 Z M 488,528 L 936,528 936,928 488,928 488,528 Z"/>
   <glyph unicode="取" horiz-adv-x="1880" d="M 128,1592 L 1032,1592 1032,1440 936,1440 936,376 1056,392 1080,248 936,224 936,-184 776,-184 776,200 136,112 104,272 248,288 248,1440 128,1440 128,1592 Z M 408,1184 L 776,1184 776,1440 408,1440 408,1184 Z M 408,784 L 776,784 776,1040 408,1040 408,784 Z M 408,304 L 776,352 776,640 408,640 408,304 Z M 1072,1560 L 1880,1560 C 1848,1112 1752,725 1592,400 1683,256 1805,107 1960,-48 L 1856,-176 C 1712,-37 1595,101 1504,240 1392,69 1261,-64 1112,-160 L 1024,-32 C 1189,85 1320,229 1416,400 1299,645 1216,981 1168,1408 L 1072,1408 1072,1560 Z M 1312,1408 C 1349,1067 1413,789 1504,576 1611,832 1677,1109 1704,1408 L 1312,1408 Z"/>
   <glyph unicode="发" horiz-adv-x="1801" d="M 896,1008 L 816,784 1728,784 1728,664 C 1627,461 1501,301 1352,184 1512,99 1691,27 1888,-32 L 1816,-184 C 1592,-120 1387,-29 1200,88 1003,-35 773,-125 512,-184 L 432,-24 C 677,24 885,93 1056,184 923,291 808,419 712,568 589,355 416,165 192,0 L 80,112 C 411,384 627,683 728,1008 L 280,1008 232,1144 400,1528 552,1496 416,1168 776,1168 888,1648 1040,1608 944,1168 1832,1168 1832,1008 896,1008 Z M 1200,280 C 1339,376 1448,493 1528,632 L 848,632 C 944,493 1061,376 1200,280 Z M 1424,1608 L 1704,1344 1592,1232 1296,1520 1424,1608 Z"/>
   <glyph unicode="去" horiz-adv-x="1880" d="M 232,1376 L 936,1376 936,1656 1096,1656 1096,1376 1784,1376 1784,1224 1096,1224 1096,816 1952,816 1952,656 1032,656 C 872,384 715,181 560,48 832,64 1125,109 1440,184 L 1256,464 1392,528 C 1552,331 1688,115 1800,-120 L 1632,-200 1528,32 C 1133,-64 739,-117 344,-128 L 272,40 C 507,205 696,411 840,656 L 104,656 104,816 936,816 936,1224 232,1224 232,1376 Z"/>
   <glyph unicode="单" horiz-adv-x="1774" d="M 680,1672 C 739,1613 789,1547 832,1472 L 688,1408 C 651,1483 603,1549 544,1608 L 680,1672 Z M 1384,1672 L 1552,1632 C 1515,1536 1467,1448 1408,1368 L 1712,1368 1712,496 1104,496 1104,312 1904,312 1904,168 1104,168 1104,-200 936,-200 936,168 136,168 136,312 936,312 936,496 328,496 328,1368 1224,1368 C 1293,1469 1347,1571 1384,1672 Z M 488,1008 L 936,1008 936,1216 488,1216 488,1008 Z M 1104,1216 L 1104,1008 1552,1008 1552,1216 1104,1216 Z M 488,648 L 936,648 936,856 488,856 488,648 Z M 1104,856 L 1104,648 1552,648 1552,856 1104,856 Z"/>
   <glyph unicode="化" horiz-adv-x="1880" d="M 568,1656 L 728,1608 520,1152 520,-184 360,-184 360,896 160,656 80,816 C 309,1083 472,1363 568,1656 Z M 1024,1616 L 1192,1616 1192,936 C 1395,1085 1576,1259 1736,1456 L 1856,1360 C 1664,1109 1443,899 1192,728 L 1192,104 C 1192,67 1201,41 1220,28 1239,15 1296,8 1392,8 1541,8 1619,13 1624,24 1683,24 1721,45 1740,88 1759,131 1771,235 1776,400 L 1944,328 C 1923,99 1891,-39 1848,-84 1805,-129 1627,-152 1312,-152 1189,-152 1111,-137 1076,-108 1041,-79 1024,-29 1024,40 L 1024,624 816,512 736,648 1024,816 1024,1616 Z"/>
   <glyph unicode="势" horiz-adv-x="1853" d="M 1184,1656 L 1344,1656 1344,1432 1704,1432 1704,984 C 1704,824 1717,744 1744,744 1776,744 1803,800 1824,912 L 1960,880 C 1933,677 1861,576 1744,576 1680,576 1632,608 1600,672 1568,736 1549,867 1544,1064 L 1544,1280 1336,1280 C 1325,1157 1299,1051 1256,960 L 1440,792 1328,672 1168,832 C 1099,747 1000,675 872,616 L 760,728 C 883,781 979,851 1048,936 L 904,1040 992,1152 1120,1064 1176,1280 944,1280 944,1432 1184,1432 1184,1656 Z M 200,472 L 816,472 824,600 984,600 976,472 1744,472 C 1744,173 1724,-9 1684,-76 1644,-143 1536,-176 1360,-176 L 1112,-160 1072,0 1360,-16 C 1456,-16 1512,-3 1528,24 1544,51 1556,87 1564,132 1572,177 1576,240 1576,320 L 952,320 C 920,192 859,96 768,32 645,-59 461,-136 216,-200 L 128,-56 C 512,29 728,155 776,320 L 200,320 200,472 Z M 144,1432 L 440,1432 440,1648 600,1648 600,1432 864,1432 864,1280 600,1280 600,1088 840,1144 864,1016 600,952 C 600,760 587,648 560,616 533,584 480,568 400,568 336,568 275,581 216,608 L 184,752 C 248,725 312,712 376,712 419,712 440,741 440,800 L 440,912 184,864 136,1008 440,1064 440,1280 144,1280 144,1432 Z"/>
   <glyph unicode="动" horiz-adv-x="1827" d="M 1016,1304 L 1264,1304 1264,1656 1424,1656 1424,1304 1896,1304 C 1891,547 1869,115 1832,8 1795,-99 1731,-152 1640,-152 L 1400,-128 1376,32 1632,8 C 1664,8 1685,53 1696,144 1728,352 1744,688 1744,1152 L 1424,1152 C 1419,507 1264,61 960,-184 L 848,-64 C 1120,165 1259,571 1264,1152 L 1016,1152 1016,1304 Z M 184,1512 L 864,1512 864,1368 184,1368 184,1512 Z M 120,1048 L 928,1048 928,896 576,896 C 485,587 387,363 280,224 440,240 608,277 784,336 L 664,624 808,664 C 893,509 957,336 1000,144 L 856,104 832,200 C 619,131 392,85 152,64 L 104,208 C 221,368 320,597 400,896 L 120,896 120,1048 Z"/>
   <glyph unicode="加" horiz-adv-x="1827" d="M 120,1296 L 408,1296 408,1656 568,1656 568,1296 992,1296 C 992,597 975,177 940,36 905,-105 816,-176 672,-176 L 504,-160 464,-8 672,-24 C 736,-24 776,8 792,72 808,136 820,259 828,440 836,621 840,856 840,1144 L 568,1144 C 563,488 435,37 184,-208 L 72,-88 C 291,141 403,552 408,1144 L 120,1144 120,1296 Z M 1872,1488 L 1872,-72 1720,-72 1720,64 1296,64 1296,-80 1144,-80 1144,1488 1872,1488 Z M 1296,208 L 1720,208 1720,1344 1296,1344 1296,208 Z"/>
   <glyph unicode="功" horiz-adv-x="1827" d="M 896,1296 L 1192,1296 1192,1656 1352,1656 1352,1296 1896,1296 C 1896,613 1875,195 1832,40 1800,-88 1720,-152 1592,-152 L 1320,-128 1288,24 1568,0 C 1621,0 1660,39 1684,116 1708,193 1725,536 1736,1144 L 1352,1144 C 1347,504 1168,61 816,-184 L 688,-56 C 1019,168 1187,568 1192,1144 L 896,1144 896,1296 Z M 128,1480 L 840,1480 840,1328 560,1328 560,320 904,424 928,280 C 688,195 424,123 136,64 L 104,216 400,280 400,1328 128,1328 128,1480 Z"/>
   <glyph unicode="力" horiz-adv-x="1694" d="M 232,1296 L 792,1296 792,1648 952,1648 952,1296 1800,1296 C 1800,629 1780,221 1740,72 1700,-77 1600,-152 1440,-152 L 1184,-136 1144,24 1440,8 C 1493,8 1532,23 1556,52 1580,81 1599,181 1612,352 1625,523 1632,787 1632,1144 L 952,1144 C 952,589 707,144 216,-192 L 128,-48 C 571,261 792,659 792,1144 L 232,1144 232,1296 Z"/>
   <glyph unicode="分" horiz-adv-x="1853" d="M 1320,1648 C 1517,1339 1728,1104 1952,944 L 1848,768 C 1624,939 1408,1189 1200,1520 L 1320,1648 Z M 736,1640 L 856,1544 C 680,1229 469,965 224,752 L 112,904 C 341,1080 549,1325 736,1640 Z M 432,864 L 1616,864 C 1616,421 1601,139 1572,16 1543,-107 1461,-168 1328,-168 L 1104,-152 1072,16 1304,0 C 1347,0 1377,27 1396,80 1415,133 1429,344 1440,712 L 944,712 C 928,488 872,309 776,176 680,43 517,-77 288,-184 L 160,-48 C 373,48 523,152 608,264 693,376 749,525 776,712 L 432,712 432,864 Z"/>
   <glyph unicode="击" horiz-adv-x="1826" d="M 128,888 L 952,888 952,1208 296,1208 296,1360 952,1360 952,1656 1112,1656 1112,1360 1800,1360 1800,1208 1112,1208 1112,888 1920,888 1920,736 1112,736 1112,88 1600,88 1600,592 1760,592 1760,-176 1600,-176 1600,-64 336,-64 336,592 496,592 496,88 952,88 952,736 128,736 128,888 Z"/>
   <glyph unicode="册" horiz-adv-x="1853" d="M 928,1632 L 928,872 1104,872 1104,1632 1752,1632 1752,872 1944,872 1944,720 1752,720 1752,40 C 1752,-109 1688,-184 1560,-184 L 1400,-176 1368,-16 1536,-24 C 1573,-24 1592,13 1592,88 L 1592,720 1272,720 C 1272,304 1224,0 1128,-192 L 960,-128 C 1056,59 1104,341 1104,720 L 928,720 928,40 C 923,-72 883,-139 808,-160 L 560,-168 528,-8 704,-8 C 747,-8 768,29 768,104 L 768,720 464,720 C 464,309 405,11 288,-176 L 136,-112 C 253,69 312,347 312,720 L 112,720 112,872 312,872 312,1632 928,1632 Z M 464,872 L 768,872 768,1472 464,1472 464,872 Z M 1272,872 L 1592,872 1592,1472 1272,1472 1272,872 Z"/>
   <glyph unicode="内" horiz-adv-x="1589" d="M 936,1664 L 1096,1664 1096,1304 1816,1304 1816,48 C 1816,-96 1739,-168 1584,-168 L 1296,-136 1256,32 1576,0 C 1629,0 1656,29 1656,88 L 1656,1152 1088,1152 1056,952 C 1253,792 1435,608 1600,400 L 1488,264 C 1339,472 1181,651 1016,800 920,571 763,376 544,216 L 464,368 C 752,581 909,843 936,1152 L 400,1152 400,-184 240,-184 240,1304 936,1304 936,1664 Z"/>
   <glyph unicode="关" horiz-adv-x="1853" d="M 1040,480 C 960,171 693,-53 240,-192 L 120,-40 C 573,88 829,296 888,584 L 192,584 192,736 912,736 912,792 920,1104 288,1104 288,1256 1184,1256 C 1269,1389 1333,1525 1376,1664 L 1552,1600 C 1504,1477 1443,1363 1368,1256 L 1784,1256 1784,1104 1080,1104 1072,736 1856,736 1856,584 1152,584 C 1291,296 1557,101 1952,0 L 1848,-192 C 1475,-69 1205,155 1040,480 Z M 632,1648 C 707,1557 765,1464 808,1368 L 672,1288 C 629,1384 573,1477 504,1568 L 632,1648 Z"/>
   <glyph unicode="全" horiz-adv-x="1880" d="M 1640,920 L 1640,840 1112,840 1112,520 1680,520 1680,368 1112,368 1112,48 1840,48 1840,-104 200,-104 200,48 944,48 944,368 376,368 376,520 944,520 944,840 392,840 392,912 168,784 88,944 C 509,1173 811,1416 992,1672 L 1160,1624 1120,1568 C 1387,1301 1669,1096 1968,952 L 1872,784 1640,920 Z M 1024,1448 C 869,1277 696,1125 504,992 L 1544,992 C 1347,1136 1173,1288 1024,1448 Z"/>
   <glyph unicode="入" horiz-adv-x="1880" d="M 952,1248 L 760,1560 912,1656 C 1056,1459 1177,1220 1276,940 1375,660 1477,447 1584,300 1691,153 1819,40 1968,-40 L 1840,-176 C 1584,-48 1373,227 1208,648 L 1056,1032 C 864,488 576,83 192,-184 L 104,-24 C 307,125 472,293 600,480 728,667 845,923 952,1248 Z"/>
   <glyph unicode="充" horiz-adv-x="1826" d="M 1048,1664 C 1091,1600 1123,1531 1144,1456 L 1936,1456 1936,1304 112,1304 112,1456 944,1456 880,1608 1048,1664 Z M 840,1376 L 1000,1328 C 851,1088 701,915 552,808 840,819 1141,848 1456,896 L 1232,1128 1368,1216 C 1560,1040 1717,853 1840,656 L 1688,568 1552,776 1296,736 1296,72 C 1296,51 1305,36 1324,28 1343,20 1397,16 1488,16 1611,16 1688,25 1720,44 1752,63 1771,152 1776,312 L 1936,256 C 1931,80 1907,-29 1864,-72 1821,-115 1696,-136 1488,-136 1339,-136 1243,-125 1200,-104 1157,-83 1136,-40 1136,24 L 1136,720 840,696 C 787,275 584,-19 232,-184 L 128,-40 C 443,99 627,339 680,680 L 304,664 264,792 C 488,920 680,1115 840,1376 Z"/>
   <glyph unicode="元" horiz-adv-x="1880" d="M 288,1528 L 1760,1528 1760,1376 288,1376 288,1528 Z M 160,992 L 1888,992 1888,840 1336,840 1336,64 C 1336,21 1363,0 1416,0 1571,0 1661,5 1688,16 1715,27 1736,48 1752,80 1768,112 1779,200 1784,344 L 1952,296 C 1941,93 1911,-33 1860,-84 1809,-135 1661,-160 1416,-160 1261,-160 1181,-112 1176,-16 L 1176,840 824,840 C 824,541 781,323 696,184 595,29 424,-93 184,-184 L 96,-32 C 309,43 457,143 540,268 623,393 664,584 664,840 L 160,840 160,992 Z"/>
   <glyph unicode="信" horiz-adv-x="1880" d="M 504,1656 L 664,1608 520,1240 520,-184 360,-184 360,936 160,656 80,816 C 277,1083 419,1363 504,1656 Z M 672,1424 L 1240,1424 1152,1600 1320,1656 1424,1424 1944,1424 1944,1272 672,1272 672,1424 Z M 776,1112 L 1832,1112 1832,968 776,968 776,1112 Z M 776,808 L 1832,808 1832,664 776,664 776,808 Z M 1816,504 L 1816,-168 1656,-168 1656,-72 952,-72 952,-176 792,-176 792,504 1816,504 Z M 952,72 L 1656,72 1656,360 952,360 952,72 Z"/>
   <glyph unicode="作" horiz-adv-x="1880" d="M 504,1656 L 664,1608 520,1240 520,-184 360,-184 360,936 160,656 80,816 C 277,1083 419,1363 504,1656 Z M 928,1656 L 1096,1616 1016,1376 1944,1376 1944,1224 1240,1224 1240,912 1816,912 1816,768 1240,768 1240,456 1840,456 1840,304 1240,304 1240,-184 1080,-184 1080,1224 952,1224 C 883,1059 789,909 672,776 L 560,904 C 720,1107 843,1357 928,1656 Z"/>
   <glyph unicode="传" horiz-adv-x="1853" d="M 568,1656 L 728,1608 520,1152 520,-184 360,-184 360,896 160,656 80,816 C 309,1083 472,1363 568,1656 Z M 1184,1664 L 1360,1640 1312,1424 1872,1424 1872,1272 1272,1272 1208,1048 1936,1048 1936,896 1160,896 1072,672 1824,672 1824,520 C 1728,365 1616,232 1488,120 L 1712,-32 1616,-176 C 1403,-21 1139,117 824,240 L 896,384 1336,192 C 1443,288 1541,397 1632,520 L 936,520 872,672 984,896 632,896 632,1048 1032,1048 1104,1272 736,1272 736,1424 1144,1424 1184,1664 Z"/>
   <glyph unicode="份" horiz-adv-x="1880" d="M 504,1656 L 664,1608 520,1240 520,-184 360,-184 360,936 160,656 80,816 C 277,1083 419,1363 504,1656 Z M 1472,1656 C 1627,1331 1787,1091 1952,936 L 1816,824 C 1640,1011 1483,1264 1344,1584 L 1472,1656 Z M 1040,1648 L 1192,1616 C 1096,1285 933,1011 704,792 L 592,904 C 789,1096 939,1344 1040,1648 Z M 832,864 L 1696,864 C 1696,352 1679,52 1644,-36 1609,-124 1552,-168 1472,-168 L 1304,-152 1280,0 1448,-16 C 1475,-16 1495,13 1508,72 1521,131 1531,344 1536,712 L 1184,712 C 1173,477 1131,293 1056,160 981,27 864,-88 704,-184 L 592,-64 C 747,27 855,128 916,240 977,352 1016,509 1032,712 L 832,712 832,864 Z"/>
   <glyph unicode="件" horiz-adv-x="1880" d="M 480,1656 L 640,1608 472,1168 472,-184 312,-184 312,864 160,656 80,816 C 261,1083 395,1363 480,1656 Z M 904,1584 L 1056,1536 960,1272 1240,1272 1240,1656 1400,1656 1400,1272 1880,1272 1880,1120 1400,1120 1400,648 1952,648 1952,496 1400,496 1400,-184 1240,-184 1240,496 608,496 608,648 1240,648 1240,1120 896,1120 C 837,992 771,880 696,784 L 560,888 C 715,1091 829,1323 904,1584 Z"/>
   <glyph unicode="人" horiz-adv-x="1880" d="M 928,1616 L 1096,1616 1096,1176 C 1096,1043 1157,853 1280,608 1403,363 1629,155 1960,-16 L 1872,-184 C 1461,29 1181,352 1032,784 909,389 624,67 176,-184 L 88,-32 C 648,299 928,701 928,1176 L 928,1616 Z"/>
   <glyph unicode="亮" horiz-adv-x="1826" d="M 1056,1664 C 1099,1616 1131,1565 1152,1512 L 1936,1512 1936,1376 112,1376 112,1512 960,1512 896,1616 1056,1664 Z M 416,1280 L 1640,1280 1640,896 416,896 416,1280 Z M 560,1032 L 1488,1032 1488,1144 560,1144 560,1032 Z M 1840,792 L 1840,408 1696,408 1696,648 360,648 360,392 208,392 208,792 1840,792 Z M 1400,520 L 1400,64 C 1405,27 1451,8 1536,8 1643,8 1708,19 1732,40 1756,61 1773,117 1784,208 L 1936,152 C 1931,35 1904,-44 1856,-84 1808,-124 1699,-144 1528,-144 1400,-144 1321,-132 1292,-108 1263,-84 1248,-35 1248,40 L 1248,376 784,376 C 784,179 743,45 660,-24 577,-93 427,-147 208,-184 L 112,-32 C 331,0 471,43 532,96 593,149 624,235 624,352 L 624,520 1400,520 Z"/>
   <glyph unicode="交" horiz-adv-x="1880" d="M 144,1392 L 928,1392 824,1608 992,1664 1112,1392 1896,1392 1896,1240 144,1240 144,1392 Z M 648,1184 L 776,1080 C 637,909 459,771 240,664 L 144,816 C 331,901 499,1024 648,1184 Z M 1392,1168 C 1568,1061 1728,939 1872,800 L 1752,656 C 1603,811 1445,944 1280,1056 L 1392,1168 Z M 1368,776 L 1520,712 C 1435,547 1323,403 1184,280 1435,136 1693,35 1960,-24 L 1864,-192 C 1523,-91 1251,29 1048,168 792,3 501,-120 176,-200 L 96,-40 C 427,29 693,133 896,272 741,389 605,520 488,664 L 624,768 C 736,619 872,488 1032,376 1165,488 1277,621 1368,776 Z"/>
   <glyph unicode="于" horiz-adv-x="1826" d="M 264,1536 L 1776,1536 1776,1384 1128,1384 1128,864 1920,864 1920,712 1128,712 1128,-8 C 1123,-125 1045,-184 896,-184 L 632,-160 600,-8 872,-32 C 931,-32 963,-11 968,32 L 968,712 128,712 128,864 968,864 968,1384 264,1384 264,1536 Z"/>
   <glyph unicode="习" horiz-adv-x="1536" d="M 256,1536 L 1776,1536 C 1776,709 1759,215 1724,52 1689,-111 1603,-192 1464,-192 L 1232,-168 1192,8 1464,-16 C 1523,-16 1557,27 1568,112 1595,277 1608,701 1608,1384 L 256,1384 256,1536 Z M 592,1192 C 779,1139 963,1053 1144,936 L 1056,792 C 869,915 683,1005 496,1064 L 592,1192 Z M 1328,688 L 1360,544 C 1056,379 715,235 336,112 L 272,288 C 667,405 1019,539 1328,688 Z"/>
   <glyph unicode="为" horiz-adv-x="1668" d="M 272,1112 L 848,1112 864,1656 1032,1656 1024,1112 1824,1112 C 1824,504 1803,139 1760,16 1717,-107 1611,-168 1440,-168 L 1232,-144 1192,16 1440,-8 C 1509,-8 1557,5 1584,32 1611,59 1631,148 1644,300 1657,452 1664,672 1664,960 L 1008,960 C 965,437 717,56 264,-184 L 176,-32 C 571,171 792,501 840,960 L 272,960 272,1112 Z M 520,1584 C 605,1483 675,1373 728,1256 L 560,1192 C 512,1309 448,1416 368,1512 L 520,1584 Z M 1176,744 C 1261,627 1331,501 1384,368 L 1208,288 C 1160,427 1099,552 1024,664 L 1176,744 Z"/>
   <glyph unicode="个" horiz-adv-x="1880" d="M 1008,1656 L 1176,1616 1136,1544 C 1323,1213 1600,984 1968,856 L 1872,680 C 1515,835 1237,1072 1040,1392 827,1088 549,840 208,648 L 96,776 C 496,1016 800,1309 1008,1656 Z M 944,976 L 1104,976 1104,-184 944,-184 944,976 Z"/>
   <glyph unicode="与" horiz-adv-x="1721" d="M 576,1208 L 576,832 1784,832 C 1768,357 1736,72 1688,-24 1640,-120 1555,-168 1432,-168 L 1080,-136 1048,16 1416,-16 C 1485,-16 1531,13 1552,72 1579,163 1603,365 1624,680 L 416,680 416,1656 576,1656 576,1360 1872,1360 1872,1208 576,1208 Z M 160,416 L 1392,416 1392,264 160,264 160,416 Z"/>
   <glyph unicode="上" horiz-adv-x="1747" d="M 856,1624 L 1024,1624 1024,1064 1808,1064 1808,904 1024,904 1024,64 1904,64 1904,-96 160,-96 160,64 856,64 856,1624 Z"/>
   <glyph unicode="、" horiz-adv-x="557" d="M 584,-136 L 464,-240 C 357,-69 219,80 48,208 L 168,304 C 360,149 499,3 584,-136 Z"/>
   <glyph unicode=" " horiz-adv-x="635"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_2" horiz-adv-x="2048">
   <font-face font-family="DejaVu Sans embedded" units-per-em="2048" font-weight="bold" font-style="normal" ascent="1879" descent="476"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="荐" horiz-adv-x="1933" d="M 120,1597 L 600,1597 600,1741 853,1741 853,1597 1288,1597 1288,1741 1533,1741 1533,1597 2013,1597 2013,1368 1533,1368 1533,1240 1288,1240 1288,1368 853,1368 853,1240 600,1240 600,1368 120,1368 120,1597 Z M 136,1205 L 737,1205 829,1372 1071,1312 1022,1205 1989,1205 1989,976 891,976 C 823,864 736,753 629,642 L 629,-184 392,-184 392,436 253,328 84,522 C 350,713 521,865 595,976 L 136,976 136,1205 Z M 864,925 L 1813,925 1813,709 1509,493 1509,501 2021,501 2021,272 1509,272 1509,9 C 1502,-109 1424,-168 1273,-168 L 1054,-149 1016,90 1237,69 C 1273,57 1284,51 1272,51 L 1272,272 688,272 688,501 1272,501 1272,618 1404,704 864,704 864,925 Z"/>
   <glyph unicode="能" horiz-adv-x="1959" d="M 892,1627 C 1016,1477 1120,1317 1202,1146 L 993,1023 930,1149 188,1068 129,1269 C 295,1378 435,1541 549,1758 L 793,1684 C 672,1462 606,1346 595,1337 L 797,1363 693,1502 892,1627 Z M 1061,1061 L 1061,67 C 1061,-90 980,-168 817,-168 L 576,-149 525,81 812,61 C 815,61 816,71 816,91 L 816,224 485,224 485,-184 240,-184 240,1061 1061,1061 Z M 485,741 L 816,741 816,832 485,832 485,741 Z M 485,437 L 816,437 816,528 485,528 485,437 Z M 1152,1693 L 1389,1693 1389,1438 1860,1597 1995,1400 C 1785,1311 1583,1244 1389,1201 L 1389,1019 C 1389,1017 1397,1013 1412,1006 1427,1000 1501,997 1635,997 1691,997 1728,1007 1745,1025 1761,1044 1777,1116 1791,1241 L 2018,1140 C 1991,975 1954,872 1906,834 1858,795 1767,776 1635,776 1436,776 1305,792 1244,824 1183,857 1152,911 1152,987 L 1152,1693 Z M 1152,781 L 1389,781 1389,514 C 1538,552 1702,610 1882,688 L 2029,479 C 1806,390 1593,324 1389,280 L 1389,75 C 1389,75 1397,72 1414,68 1432,64 1510,61 1651,61 1718,61 1759,69 1773,85 1787,101 1800,177 1814,312 L 2050,213 C 2024,42 1986,-64 1939,-106 1891,-147 1795,-168 1651,-168 1447,-168 1313,-152 1248,-120 1184,-88 1152,-31 1152,51 L 1152,781 Z"/>
   <glyph unicode="科" horiz-adv-x="2012" d="M 104,1205 L 416,1205 416,1373 184,1321 96,1548 C 367,1596 612,1667 830,1761 L 944,1547 653,1444 653,1205 941,1205 941,976 651,979 653,994 945,645 785,423 653,626 653,-184 416,-184 416,437 C 405,411 337,315 212,150 L 44,354 C 204,560 315,767 377,976 L 104,976 104,1205 Z M 2016,726 L 2041,488 1789,439 1789,-184 1544,-184 1544,391 943,281 906,517 1544,638 1544,1741 1789,1741 1789,679 2016,726 Z M 1147,1600 C 1303,1513 1444,1409 1572,1287 L 1415,1082 C 1277,1220 1133,1338 983,1436 L 1147,1600 Z M 1018,1143 C 1168,1068 1305,978 1430,872 L 1262,668 C 1136,788 1000,892 854,978 L 1018,1143 Z"/>
   <glyph unicode="社" horiz-adv-x="1959" d="M 136,1501 L 419,1501 346,1677 597,1760 689,1501 1005,1501 1005,1295 747,870 C 867,783 981,682 1089,567 L 932,337 C 830,474 759,560 717,596 L 717,-184 472,-184 472,539 C 428,489 346,433 229,371 L 87,584 C 355,750 561,976 702,1264 L 136,1264 136,1501 Z M 968,1157 L 1344,1157 1344,1741 1589,1741 1589,1157 1973,1157 1973,920 1589,920 1589,133 2045,133 2045,-104 872,-104 872,133 1344,133 1344,920 968,920 968,1157 Z"/>
   <glyph unicode="示" horiz-adv-x="1959" d="M 296,1629 L 1837,1629 1837,1392 296,1392 296,1629 Z M 152,1117 L 1981,1117 1981,880 1197,880 1197,59 C 1197,-29 1177,-91 1136,-128 1096,-165 1016,-184 898,-184 L 671,-175 622,73 900,53 C 935,53 952,63 952,83 L 952,880 152,880 152,1117 Z M 1494,780 C 1706,568 1889,344 2042,108 L 1841,-81 C 1686,176 1506,410 1300,622 L 1494,780 Z M 586,775 L 803,642 C 639,332 467,83 285,-104 L 85,72 C 289,288 456,522 586,775 Z"/>
   <glyph unicode="研" horiz-adv-x="1985" d="M 128,1613 L 949,1613 949,1376 610,1376 485,981 869,981 869,-16 632,-16 632,64 533,64 533,-120 304,-120 304,591 223,454 71,657 C 207,867 305,1106 365,1376 L 128,1376 128,1613 Z M 533,293 L 632,293 632,752 533,752 533,293 Z M 904,1661 L 1965,1661 1965,1424 1773,1424 1773,901 2037,901 2037,664 1773,664 1773,-184 1536,-184 1536,664 1347,664 C 1326,339 1200,52 968,-199 L 763,-42 C 970,176 1082,411 1101,664 L 848,664 848,901 1112,901 1112,1424 904,1424 904,1661 Z M 1536,901 L 1536,1424 1357,1424 1357,901 1536,901 Z"/>
   <glyph unicode="注" horiz-adv-x="1985" d="M 323,1735 C 462,1659 591,1566 708,1455 L 552,1251 C 424,1372 290,1476 150,1563 L 323,1735 Z M 245,1242 L 609,996 438,787 C 328,897 205,990 68,1065 L 245,1242 Z M 411,752 L 619,605 C 550,332 445,62 306,-204 L 74,-42 C 214,202 326,466 411,752 Z M 1255,1753 C 1355,1659 1436,1553 1499,1435 L 1291,1312 C 1231,1419 1149,1520 1046,1617 L 1255,1753 Z M 656,1357 L 1997,1357 1997,1120 1445,1120 1445,741 1925,741 1925,512 1445,512 1445,133 2029,133 2029,-104 600,-104 600,133 1200,133 1200,512 720,512 720,741 1200,741 1200,1120 656,1120 656,1357 Z"/>
   <glyph unicode="果" horiz-adv-x="1985" d="M 304,1669 L 1821,1669 1821,752 1181,752 1181,685 2013,685 2013,448 1378,448 C 1506,320 1727,207 2041,108 L 1902,-147 C 1562,-12 1322,142 1181,315 L 1181,-192 936,-192 936,311 C 790,141 559,-12 245,-145 L 78,69 C 385,193 605,319 738,448 L 120,448 120,685 936,685 936,752 304,752 304,1669 Z M 549,1317 L 936,1317 936,1432 549,1432 549,1317 Z M 1181,1432 L 1181,1317 1576,1317 1576,1432 1181,1432 Z M 549,989 L 936,989 936,1096 549,1096 549,989 Z M 1181,1096 L 1181,989 1576,989 1576,1096 1181,1096 Z"/>
   <glyph unicode="智" horiz-adv-x="1853" d="M 1789,757 L 1789,-184 1544,-184 1544,-88 589,-88 589,-184 344,-184 344,757 1789,757 Z M 589,445 L 1544,445 1544,528 589,528 589,445 Z M 589,141 L 1544,141 1544,224 589,224 589,141 Z M 418,1779 L 658,1729 608,1629 1093,1629 1093,1400 779,1400 775,1309 1133,1309 1133,1088 745,1088 751,1106 C 864,1057 990,982 1130,882 L 962,690 655,902 C 591,802 439,708 199,622 L 84,826 C 322,908 456,995 487,1088 L 128,1088 128,1309 538,1309 542,1400 451,1400 255,1222 100,1403 C 242,1502 348,1627 418,1779 Z M 1128,1613 L 1933,1613 1933,864 1128,864 1128,1613 Z M 1373,1085 L 1688,1085 1688,1384 1373,1384 1373,1085 Z"/>
   <glyph unicode="推" horiz-adv-x="1959" d="M 112,1405 L 360,1405 360,1741 605,1741 605,1405 765,1405 765,1168 605,1168 605,886 777,968 827,741 605,618 605,42 C 599,-109 518,-184 363,-184 293,-184 222,-169 149,-140 L 98,117 C 199,80 280,61 339,61 353,61 360,74 360,99 L 360,508 178,435 83,684 360,785 360,1168 112,1168 112,1405 Z M 1117,-48 L 1117,-184 872,-184 872,889 796,785 673,1030 C 829,1253 943,1497 1013,1762 L 1258,1677 1160,1413 1377,1413 1265,1667 1494,1751 C 1566,1626 1616,1513 1643,1413 L 2021,1413 2021,1176 1613,1176 1613,997 1973,997 1973,776 1613,776 1613,589 1973,589 1973,360 1613,360 1613,181 2037,181 2037,-48 1117,-48 Z M 1117,1176 L 1117,997 1376,997 1376,1176 1117,1176 Z M 1117,776 L 1117,589 1376,589 1376,776 1117,776 Z M 1117,360 L 1117,181 1376,181 1376,360 1117,360 Z"/>
   <glyph unicode="成" horiz-adv-x="1985" d="M 1604,1750 C 1679,1675 1747,1584 1807,1479 L 1588,1382 1394,1651 1604,1750 Z M 1925,1437 L 1925,1208 1384,1208 C 1398,943 1428,744 1473,611 1517,700 1568,872 1629,1125 L 1868,1029 C 1798,718 1707,471 1595,288 1666,142 1716,69 1747,69 1765,69 1785,153 1808,321 L 2036,220 C 1978,-49 1882,-184 1747,-184 1629,-184 1522,-99 1428,71 1350,-23 1234,-114 1081,-201 L 963,35 C 1109,121 1223,216 1306,322 1214,556 1158,852 1138,1208 L 501,1208 501,957 1046,957 C 1040,546 1019,284 983,174 948,63 876,8 769,8 L 557,27 520,274 757,253 C 758,253 761,262 764,278 767,295 775,448 790,736 L 501,736 C 501,400 429,96 283,-177 L 67,-46 C 193,212 259,450 264,667 L 264,1437 1126,1437 1110,1741 1364,1741 1372,1437 1925,1437 Z"/>
   <glyph unicode="息" horiz-adv-x="2012" d="M 868,1775 L 1133,1690 1073,1597 1805,1597 1805,552 336,552 336,1597 784,1597 868,1775 Z M 581,1309 L 1560,1309 1560,1360 581,1360 581,1309 Z M 581,1045 L 1560,1045 1560,1096 581,1096 581,1045 Z M 581,789 L 1560,789 1560,840 581,840 581,789 Z M 1003,575 C 1142,499 1271,406 1389,294 L 1224,94 844,416 1003,575 Z M 351,528 L 560,405 C 469,186 370,10 264,-123 L 64,53 C 180,200 276,358 351,528 Z M 576,501 L 821,501 821,131 C 821,110 825,97 834,92 842,88 885,85 963,85 1237,85 1378,94 1386,112 L 1427,309 1668,213 C 1628,25 1573,-82 1504,-110 1425,-133 1220,-144 891,-144 695,-144 590,-85 576,32 L 576,501 Z M 1733,512 C 1862,364 1971,199 2059,15 L 1821,-104 C 1747,70 1644,238 1512,401 L 1733,512 Z"/>
   <glyph unicode="展" horiz-adv-x="1959" d="M 1565,661 L 1989,661 1989,440 1341,440 C 1367,396 1411,347 1474,293 1549,326 1629,386 1716,472 L 1894,281 1679,155 C 1735,123 1848,83 2018,38 L 1895,-184 C 1499,-67 1227,141 1080,440 L 901,440 901,99 1159,210 1261,6 802,-200 656,-64 656,440 487,440 C 453,225 381,15 273,-190 L 68,-33 C 204,217 272,485 272,771 L 272,1685 1869,1685 1869,1120 1565,1120 1565,1005 1877,1005 1877,776 1565,776 1565,661 Z M 1624,1464 L 517,1464 517,1341 1624,1341 1624,1464 Z M 517,1120 L 510,661 800,661 800,776 488,776 488,1005 800,1005 800,1120 517,1120 Z M 1328,1005 L 1328,1120 1037,1120 1037,1005 1328,1005 Z M 1037,661 L 1328,661 1328,776 1037,776 1037,661 Z"/>
   <glyph unicode="员" horiz-adv-x="1933" d="M 408,1693 L 1701,1693 1701,1112 408,1112 408,1693 Z M 653,1349 L 1456,1349 1456,1456 653,1456 653,1349 Z M 1805,1061 L 1805,216 1560,216 1560,824 549,824 549,208 304,208 304,1061 1805,1061 Z M 912,813 L 1157,813 1157,467 C 1157,145 860,-79 265,-205 L 94,15 C 432,81 651,154 752,233 853,312 904,414 904,540 920,541 922,632 912,813 Z M 1319,388 C 1544,273 1773,133 2005,-32 L 1814,-222 C 1620,-69 1384,84 1107,238 L 1319,388 Z"/>
   <glyph unicode="动" horiz-adv-x="1906" d="M 1016,1389 L 1264,1389 1264,1741 1509,1741 1509,1389 1982,1389 C 1976,599 1953,144 1911,26 1870,-93 1793,-152 1681,-152 L 1405,-124 1368,122 1677,93 C 1682,93 1689,126 1696,192 1728,399 1744,719 1744,1152 L 1509,1152 C 1504,521 1334,71 999,-199 L 829,-18 C 1114,223 1259,612 1264,1152 L 1016,1152 1016,1389 Z M 184,1597 L 949,1597 949,1368 184,1368 184,1597 Z M 120,1133 L 1013,1133 1013,896 651,896 C 564,602 486,410 417,319 508,328 626,357 770,405 L 649,695 872,757 C 970,579 1044,379 1093,156 L 868,94 844,188 C 657,127 430,85 165,61 L 99,258 C 222,426 318,638 387,896 L 120,896 120,1133 Z"/>
   <glyph unicode="功" horiz-adv-x="1906" d="M 896,1381 L 1192,1381 1192,1741 1437,1741 1437,1381 1981,1381 C 1981,666 1960,230 1916,72 1879,-77 1784,-152 1633,-152 L 1327,-125 1277,114 1612,85 C 1644,85 1669,118 1690,183 1710,249 1725,569 1735,1144 L 1437,1144 C 1432,518 1237,71 854,-197 L 664,-7 C 1011,228 1187,612 1192,1144 L 896,1144 896,1381 Z M 128,1565 L 925,1565 925,1328 645,1328 645,420 981,522 1019,294 C 754,200 463,121 146,56 L 96,291 400,357 400,1328 128,1328 128,1565 Z"/>
   <glyph unicode="分" horiz-adv-x="1986" d="M 1369,1760 C 1583,1424 1811,1171 2051,999 L 1903,748 C 1649,941 1411,1214 1189,1568 L 1369,1760 Z M 767,1747 L 954,1597 C 763,1257 532,969 260,732 L 96,955 C 343,1145 566,1409 767,1747 Z M 432,949 L 1701,949 C 1701,475 1685,170 1653,35 1620,-100 1526,-168 1369,-168 L 1111,-150 1062,105 1348,85 C 1370,85 1388,106 1402,148 1417,190 1429,378 1439,712 L 1026,712 C 1012,506 954,334 854,194 753,55 575,-75 321,-193 L 131,9 C 374,118 536,226 617,332 698,439 748,565 769,712 L 432,712 432,949 Z"/>
   <glyph unicode="关" horiz-adv-x="1986" d="M 1096,403 C 1031,151 754,-50 267,-199 L 90,26 C 567,161 830,347 878,584 L 192,584 192,821 912,821 912,835 919,1104 288,1104 288,1341 1203,1341 C 1278,1458 1341,1599 1391,1762 L 1650,1668 C 1590,1515 1538,1406 1493,1341 L 1869,1341 1869,1104 1164,1104 1158,821 1941,821 1941,584 1263,584 C 1376,349 1641,177 2058,70 L 1911,-201 C 1504,-67 1232,134 1096,403 Z M 684,1747 C 777,1634 851,1516 905,1393 L 695,1270 C 641,1392 571,1509 484,1622 L 684,1747 Z"/>
   <glyph unicode="信" horiz-adv-x="1985" d="M 518,1752 L 763,1678 605,1275 605,-184 360,-184 360,846 196,616 73,863 C 277,1140 426,1436 518,1752 Z M 672,1509 L 1214,1509 1135,1668 1386,1751 1494,1509 2029,1509 2029,1272 672,1272 672,1509 Z M 776,1197 L 1917,1197 1917,968 776,968 776,1197 Z M 776,893 L 1917,893 1917,664 776,664 776,893 Z M 1901,589 L 1901,-168 1656,-168 1656,-72 1037,-72 1037,-176 792,-176 792,589 1901,589 Z M 1037,157 L 1656,157 1656,360 1037,360 1037,157 Z"/>
   <glyph unicode="人" horiz-adv-x="2012" d="M 928,1701 L 1181,1701 1181,1219 C 1181,1092 1241,910 1360,671 1479,433 1713,224 2060,45 L 1933,-199 C 1487,33 1202,329 1077,690 977,367 685,71 203,-199 L 73,26 C 643,363 928,760 928,1219 L 928,1701 Z"/>
   <glyph unicode="享" horiz-adv-x="1906" d="M 1112,1755 C 1170,1690 1208,1637 1224,1597 L 2021,1597 2021,1376 112,1376 112,1597 926,1597 873,1684 1112,1755 Z M 384,1349 L 1813,1349 1813,840 384,840 384,1349 Z M 629,1077 L 1568,1077 1568,1120 629,1120 629,1077 Z M 312,829 L 1813,829 1813,579 1221,395 1221,413 1997,413 1997,176 1221,176 1221,11 C 1221,-124 1134,-192 960,-192 L 718,-164 680,76 925,45 C 966,38 983,35 976,35 L 976,176 128,176 128,413 976,413 976,538 1427,635 312,592 312,829 Z"/>
   <glyph unicode="交" horiz-adv-x="2012" d="M 144,1477 L 903,1477 807,1676 1058,1759 1182,1477 1981,1477 1981,1240 144,1240 144,1477 Z M 687,1285 L 879,1129 C 718,931 514,772 267,652 L 125,877 C 336,974 523,1110 687,1285 Z M 1428,1264 C 1626,1145 1808,1005 1973,846 L 1797,635 C 1628,810 1447,963 1256,1092 L 1428,1264 Z M 1393,872 L 1622,776 C 1520,579 1412,430 1299,330 1512,208 1768,114 2068,48 L 1927,-200 C 1560,-91 1281,29 1090,159 846,2 548,-120 196,-207 L 76,33 C 437,109 700,203 866,316 740,412 608,544 470,714 L 675,871 C 801,702 934,569 1072,472 1185,567 1292,701 1393,872 Z"/>
   <glyph unicode="互" horiz-adv-x="1959" d="M 176,1629 L 1965,1629 1965,1392 883,1392 827,1197 1789,1197 1789,997 1562,133 2037,133 2037,-104 96,-104 96,133 1299,133 1378,408 480,408 397,574 626,1392 176,1392 176,1629 Z M 1443,645 L 1537,960 763,960 675,645 1443,645 Z"/>
   <glyph unicode="与" horiz-adv-x="1800" d="M 661,1208 L 661,917 1871,917 C 1854,407 1818,99 1765,-8 1712,-115 1614,-168 1473,-168 L 1087,-133 1037,106 1461,69 C 1509,69 1540,89 1554,128 1580,215 1602,399 1621,680 L 416,680 416,1741 661,1741 661,1445 1957,1445 1957,1208 661,1208 Z M 160,501 L 1477,501 1477,264 160,264 160,501 Z"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_3" horiz-adv-x="2048">
   <font-face font-family="等线 embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1879" descent="476"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="v" horiz-adv-x="1086" d="M 61,1120 L 256,1120 606,180 956,1120 1151,1120 731,0 481,0 61,1120 Z"/>
   <glyph unicode="u" horiz-adv-x="927" d="M 174,442 L 174,1120 358,1120 358,449 C 358,343 379,264 420,211 461,158 523,131 606,131 705,131 784,163 842,226 899,289 928,376 928,485 L 928,1120 1112,1120 1112,0 928,0 928,172 C 883,104 832,54 773,21 714,-12 645,-29 567,-29 438,-29 341,11 274,91 207,171 174,288 174,442 Z "/>
   <glyph unicode="r" horiz-adv-x="663" d="M 842,948 C 821,960 799,969 775,975 750,980 723,983 694,983 590,983 510,949 455,882 399,814 371,717 371,590 L 371,0 186,0 186,1120 371,1120 371,946 C 410,1014 460,1065 522,1098 584,1131 659,1147 748,1147 761,1147 775,1146 790,1145 805,1143 822,1140 841,1137 L 842,948 Z"/>
   <glyph unicode="n" horiz-adv-x="927" d="M 1124,676 L 1124,0 940,0 940,670 C 940,776 919,855 878,908 837,961 775,987 692,987 593,987 514,955 457,892 400,829 371,742 371,633 L 371,0 186,0 186,1120 371,1120 371,946 C 415,1013 467,1064 527,1097 586,1130 655,1147 733,1147 862,1147 959,1107 1025,1028 1091,948 1124,831 1124,676 Z"/>
   <glyph unicode="m" horiz-adv-x="1615" d="M 1065,905 C 1111,988 1166,1049 1230,1088 1294,1127 1369,1147 1456,1147 1573,1147 1663,1106 1726,1025 1789,943 1821,827 1821,676 L 1821,0 1636,0 1636,670 C 1636,777 1617,857 1579,909 1541,961 1483,987 1405,987 1310,987 1234,955 1179,892 1124,829 1096,742 1096,633 L 1096,0 911,0 911,670 C 911,778 892,858 854,910 816,961 757,987 678,987 584,987 509,955 454,892 399,828 371,742 371,633 L 371,0 186,0 186,1120 371,1120 371,946 C 413,1015 463,1065 522,1098 581,1131 650,1147 731,1147 812,1147 882,1126 939,1085 996,1044 1038,984 1065,905 Z"/>
   <glyph unicode="i" horiz-adv-x="186" d="M 193,1120 L 377,1120 377,0 193,0 193,1120 Z M 193,1556 L 377,1556 377,1323 193,1323 193,1556 Z"/>
   <glyph unicode="e" horiz-adv-x="1033" d="M 1151,606 L 1151,516 305,516 C 313,389 351,293 420,227 488,160 583,127 705,127 776,127 844,136 911,153 977,170 1043,196 1108,231 L 1108,57 C 1042,29 974,8 905,-7 836,-22 765,-29 694,-29 515,-29 374,23 270,127 165,231 113,372 113,549 113,732 163,878 262,986 361,1093 494,1147 662,1147 813,1147 932,1099 1020,1002 1107,905 1151,773 1151,606 Z M 967,659 C 966,760 938,841 883,901 828,961 755,991 664,991 561,991 479,962 418,904 356,846 320,764 311,659 L 967,659 Z"/>
   <glyph unicode="b" horiz-adv-x="1007" d="M 997,559 C 997,694 969,801 914,878 858,955 781,993 684,993 587,993 510,955 455,878 399,801 371,694 371,559 371,424 399,318 455,241 510,164 587,125 684,125 781,125 858,164 914,241 969,318 997,424 997,559 Z M 371,950 C 410,1017 459,1066 518,1099 577,1131 647,1147 729,1147 865,1147 976,1093 1061,985 1146,877 1188,735 1188,559 1188,383 1146,241 1061,133 976,25 865,-29 729,-29 647,-29 577,-13 518,20 459,52 410,101 371,168 L 371,0 186,0 186,1556 371,1556 371,950 Z"/>
   <glyph unicode="a" horiz-adv-x="953" d="M 702,563 C 553,563 450,546 393,512 336,478 307,420 307,338 307,273 329,221 372,183 415,144 473,125 547,125 649,125 731,161 793,234 854,306 885,402 885,522 L 885,563 702,563 Z M 1069,639 L 1069,0 885,0 885,170 C 843,102 791,52 728,20 665,-13 589,-29 498,-29 383,-29 292,3 225,68 157,132 123,218 123,326 123,452 165,547 250,611 334,675 460,707 627,707 L 885,707 885,725 C 885,810 857,875 802,922 746,968 668,991 567,991 503,991 441,983 380,968 319,953 261,930 205,899 L 205,1069 C 272,1095 338,1115 401,1128 464,1141 526,1147 586,1147 748,1147 869,1105 949,1021 1029,937 1069,810 1069,639 Z"/>
   <glyph unicode="X" horiz-adv-x="1271" d="M 129,1493 L 346,1493 717,938 1090,1493 1307,1493 827,776 1339,0 1122,0 702,635 279,0 61,0 594,797 129,1493 Z"/>
   <glyph unicode="I" horiz-adv-x="213" d="M 201,1493 L 403,1493 403,0 201,0 201,1493 Z"/>
   <glyph unicode="A" horiz-adv-x="1351" d="M 700,1294 L 426,551 975,551 700,1294 Z M 586,1493 L 815,1493 1384,0 1174,0 1038,383 365,383 229,0 16,0 586,1493 Z"/>
   <glyph unicode="&gt;" horiz-adv-x="1271" d="M 217,1008 L 217,1190 1499,725 1499,559 217,94 217,276 1247,641 217,1008 Z"/>
   <glyph unicode="&lt;" horiz-adv-x="1271" d="M 1499,1008 L 467,641 1499,276 1499,94 217,559 217,725 1499,1190 1499,1008 Z"/>
   <glyph unicode="6" horiz-adv-x="1033" d="M 676,827 C 585,827 514,796 461,734 408,672 381,587 381,479 381,372 408,287 461,225 514,162 585,131 676,131 767,131 839,162 892,225 945,287 971,372 971,479 971,587 945,672 892,734 839,796 767,827 676,827 Z M 1077,1460 L 1077,1276 C 1026,1300 975,1318 924,1331 872,1344 821,1350 770,1350 637,1350 535,1305 465,1215 394,1125 354,989 344,807 383,865 433,910 492,941 551,972 617,987 688,987 838,987 957,942 1044,851 1131,760 1174,636 1174,479 1174,326 1129,203 1038,110 947,17 827,-29 676,-29 503,-29 371,37 280,170 189,302 143,494 143,745 143,981 199,1169 311,1310 423,1450 573,1520 762,1520 813,1520 864,1515 916,1505 967,1495 1021,1480 1077,1460 Z"/>
   <glyph unicode="5" horiz-adv-x="953" d="M 221,1493 L 1014,1493 1014,1323 406,1323 406,957 C 435,967 465,975 494,980 523,985 553,987 582,987 749,987 881,941 978,850 1075,759 1124,635 1124,479 1124,318 1074,194 974,105 874,16 733,-29 551,-29 488,-29 425,-24 360,-13 295,-2 227,14 158,35 L 158,238 C 218,205 280,181 344,165 408,149 476,141 547,141 662,141 754,171 821,232 888,293 922,375 922,479 922,583 888,665 821,726 754,787 662,817 547,817 493,817 439,811 386,799 332,787 277,768 221,743 L 221,1493 Z"/>
   <glyph unicode="2" horiz-adv-x="953" d="M 393,170 L 1098,170 1098,0 150,0 150,170 C 227,249 331,356 464,490 596,623 679,709 713,748 778,821 823,882 849,933 874,983 887,1032 887,1081 887,1160 859,1225 804,1275 748,1325 675,1350 586,1350 523,1350 456,1339 386,1317 315,1295 240,1262 160,1217 L 160,1421 C 241,1454 317,1478 388,1495 459,1512 523,1520 582,1520 737,1520 860,1481 952,1404 1044,1327 1090,1223 1090,1094 1090,1033 1079,975 1056,920 1033,865 991,800 930,725 913,706 860,650 771,558 682,465 556,336 393,170 Z"/>
   <glyph unicode="0" horiz-adv-x="1033" d="M 651,1360 C 547,1360 469,1309 417,1207 364,1104 338,950 338,745 338,540 364,387 417,285 469,182 547,131 651,131 756,131 834,182 887,285 939,387 965,540 965,745 965,950 939,1104 887,1207 834,1309 756,1360 651,1360 Z M 651,1520 C 818,1520 946,1454 1035,1322 1123,1189 1167,997 1167,745 1167,494 1123,302 1035,170 946,37 818,-29 651,-29 484,-29 356,37 268,170 179,302 135,494 135,745 135,997 179,1189 268,1322 356,1454 484,1520 651,1520 Z"/>
   <glyph unicode="/" horiz-adv-x="689" d="M 520,1493 L 690,1493 170,-190 0,-190 520,1493 Z"/>
   <glyph unicode=" " horiz-adv-x="635"/>
  </font>
 </defs>
 <defs class="TextShapeIndex">
  <g ooo:slide="id1" ooo:id-list="id7 id8 id9 id10 id11 id12 id13 id14 id15 id16 id17 id18 id19 id20 id21 id22 id23 id24 id25 id26 id27 id28 id29 id30 id31 id32 id33 id34 id35 id36 id37 id38 id39 id40 id41 id42 id43 id44 id45 id46 id47 id48 id49 id50 id51 id52 id53 id54 id55 id56"/>
 </defs>
 <defs class="EmbeddedBulletChars">
  <g id="bullet-char-template-57356" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 580,1141 L 1163,571 580,0 -4,571 580,1141 Z"/>
  </g>
  <g id="bullet-char-template-57354" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 8,1128 L 1137,1128 1137,0 8,0 8,1128 Z"/>
  </g>
  <g id="bullet-char-template-10146" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 174,0 L 602,739 174,1481 1456,739 174,0 Z M 1358,739 L 309,1346 659,739 1358,739 Z"/>
  </g>
  <g id="bullet-char-template-10132" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 2015,739 L 1276,0 717,0 1260,543 174,543 174,936 1260,936 717,1481 1274,1481 2015,739 Z"/>
  </g>
  <g id="bullet-char-template-10007" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 0,-2 C -7,14 -16,27 -25,37 L 356,567 C 262,823 215,952 215,954 215,979 228,992 255,992 264,992 276,990 289,987 310,991 331,999 354,1012 L 381,999 492,748 772,1049 836,1024 860,1049 C 881,1039 901,1025 922,1006 886,937 835,863 770,784 769,783 710,716 594,584 L 774,223 C 774,196 753,168 711,139 L 727,119 C 717,90 699,76 672,76 641,76 570,178 457,381 L 164,-76 C 142,-110 111,-127 72,-127 30,-127 9,-110 8,-76 1,-67 -2,-52 -2,-32 -2,-23 -1,-13 0,-2 Z"/>
  </g>
  <g id="bullet-char-template-10004" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 285,-33 C 182,-33 111,30 74,156 52,228 41,333 41,471 41,549 55,616 82,672 116,743 169,778 240,778 293,778 328,747 346,684 L 369,508 C 377,444 397,411 428,410 L 1163,1116 C 1174,1127 1196,1133 1229,1133 1271,1133 1292,1118 1292,1087 L 1292,965 C 1292,929 1282,901 1262,881 L 442,47 C 390,-6 338,-33 285,-33 Z"/>
  </g>
  <g id="bullet-char-template-9679" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z"/>
  </g>
  <g id="bullet-char-template-8226" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 346,457 C 273,457 209,483 155,535 101,586 74,649 74,723 74,796 101,859 155,911 209,963 273,989 346,989 419,989 480,963 531,910 582,859 608,796 608,723 608,648 583,586 532,535 482,483 420,457 346,457 Z"/>
  </g>
  <g id="bullet-char-template-8211" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z"/>
  </g>
  <g id="bullet-char-template-61548" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 173,740 C 173,903 231,1043 346,1159 462,1274 601,1332 765,1332 928,1332 1067,1274 1183,1159 1299,1043 1357,903 1357,740 1357,577 1299,437 1183,322 1067,206 928,148 765,148 601,148 462,206 346,322 231,437 173,577 173,740 Z"/>
  </g>
 </defs>
 <defs>
  <g id="dummy-master-page" ooo:name="dummy-master-page" class="Master_Slide">
   <g id="bg-dummy-master-page" class="Background" visibility="hidden"/>
   <g id="bo-dummy-master-page" class="BackgroundObjects" visibility="hidden"/>
  </g>
  <g id="id2" ooo:name="标题幻灯片" class="Master_Slide">
   <g id="bg-id2" class="Background">
    <path fill="rgb(255,255,255)" stroke="none" d="M 16933,19049 L 0,19049 0,0 33866,0 33866,19049 16933,19049 Z"/>
   </g>
   <g id="bo-id2" class="BackgroundObjects">
    <g visibility="hidden" ooo:text-adjust="left" class="Date/Time">
     <g id="id4">
      <rect class="BoundingBox" stroke="none" fill="none" x="2328" y="17657" width="7620" height="1014"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="等线" font-size="423px" font-weight="400"><tspan class="TextPosition" x="2582" y="18333"><tspan class="PlaceholderText" fill="rgb(139,139,139)" stroke="none">6/20/25</tspan></tspan></tspan></text>
     </g>
    </g>
    <g visibility="hidden" ooo:text-adjust="left" class="Footer">
     <g id="id5">
      <rect class="BoundingBox" stroke="none" fill="none" x="11218" y="17657" width="11430" height="1014"/>
     </g>
    </g>
    <g visibility="hidden" ooo:text-adjust="left" class="Slide_Number">
     <g id="id6">
      <rect class="BoundingBox" stroke="none" fill="none" x="23918" y="17657" width="7620" height="1014"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="等线" font-size="423px" font-weight="400"><tspan class="TextPosition" x="28926" y="18333"><tspan class="PlaceholderText" fill="rgb(139,139,139)" stroke="none">&lt;number&gt;</tspan></tspan></tspan></text>
     </g>
    </g>
   </g>
  </g>
 </defs>
 <g class="DummySlide">
  <g>
   <g id="dummy-slide" class="Slide" clip-path="url(#presentation_clip_path)">
    <g ooo:name="dummy-page" class="Page"/>
   </g>
  </g>
 </g>
 <g class="SlideGroup">
  <g visibility="hidden">
   <g id="container-id1">
    <g id="id1" class="Slide" clip-path="url(#presentation_clip_path)">
     <g ooo:name="page1" class="Page">
      <g class="Group">
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id7">
         <rect class="BoundingBox" stroke="none" fill="none" x="5643" y="1998" width="22578" height="15052"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id8">
         <rect class="BoundingBox" stroke="none" fill="none" x="5637" y="2692" width="3796" height="1917"/>
         <path fill="rgb(68,114,196)" stroke="none" d="M 5655,2898 L 5655,2898 5655,2889 5656,2879 5657,2870 5659,2860 5661,2851 5663,2842 5666,2833 5670,2824 5674,2816 5678,2807 5683,2799 5688,2791 5694,2783 5700,2776 5706,2769 5713,2762 5720,2756 5727,2750 5735,2744 5743,2739 5751,2734 5759,2730 5768,2726 5777,2722 5786,2719 5795,2716 5804,2714 5814,2712 5823,2711 5832,2710 5842,2710 9226,2710 9226,2710 9236,2710 9245,2711 9255,2712 9265,2714 9274,2716 9284,2719 9293,2722 9302,2726 9311,2730 9319,2735 9328,2740 9336,2746 9343,2752 9351,2758 9358,2765 9365,2772 9371,2779 9377,2787 9382,2795 9388,2803 9392,2812 9397,2821 9400,2830 9404,2839 9406,2849 9409,2858 9411,2868 9412,2877 9413,2887 9413,2897 9414,4402 9414,4402 9414,4412 9413,4422 9412,4431 9410,4441 9408,4450 9405,4460 9402,4469 9398,4478 9394,4487 9389,4496 9384,4504 9378,4512 9372,4520 9366,4527 9359,4535 9352,4541 9345,4548 9337,4554 9329,4559 9321,4564 9312,4569 9303,4573 9294,4577 9285,4581 9275,4583 9266,4586 9256,4588 9247,4589 9237,4590 9227,4590 5843,4590 5843,4590 5833,4590 5823,4589 5814,4588 5804,4586 5795,4584 5785,4581 5776,4578 5767,4574 5758,4570 5749,4565 5741,4560 5733,4554 5725,4548 5718,4542 5710,4535 5704,4528 5697,4521 5691,4513 5686,4505 5681,4497 5676,4488 5672,4479 5668,4470 5664,4461 5662,4451 5659,4442 5657,4432 5656,4423 5655,4413 5655,4403 5655,2898 Z"/>
         <path fill="none" stroke="rgb(255,255,255)" stroke-width="35" stroke-linejoin="miter" d="M 5655,2898 L 5655,2898 5655,2889 5656,2879 5657,2870 5659,2860 5661,2851 5663,2842 5666,2833 5670,2824 5674,2816 5678,2807 5683,2799 5688,2791 5694,2783 5700,2776 5706,2769 5713,2762 5720,2756 5727,2750 5735,2744 5743,2739 5751,2734 5759,2730 5768,2726 5777,2722 5786,2719 5795,2716 5804,2714 5814,2712 5823,2711 5832,2710 5842,2710 9226,2710 9226,2710 9236,2710 9245,2711 9255,2712 9265,2714 9274,2716 9284,2719 9293,2722 9302,2726 9311,2730 9319,2735 9328,2740 9336,2746 9343,2752 9351,2758 9358,2765 9365,2772 9371,2779 9377,2787 9382,2795 9388,2803 9392,2812 9397,2821 9400,2830 9404,2839 9406,2849 9409,2858 9411,2868 9412,2877 9413,2887 9413,2897 9414,4402 9414,4402 9414,4412 9413,4422 9412,4431 9410,4441 9408,4450 9405,4460 9402,4469 9398,4478 9394,4487 9389,4496 9384,4504 9378,4512 9372,4520 9366,4527 9359,4535 9352,4541 9345,4548 9337,4554 9329,4559 9321,4564 9312,4569 9303,4573 9294,4577 9285,4581 9275,4583 9266,4586 9256,4588 9247,4589 9237,4590 9227,4590 5843,4590 5843,4590 5833,4590 5823,4589 5814,4588 5804,4586 5795,4584 5785,4581 5776,4578 5767,4574 5758,4570 5749,4565 5741,4560 5733,4554 5725,4548 5718,4542 5710,4535 5704,4528 5697,4521 5691,4513 5686,4505 5681,4497 5676,4488 5672,4479 5668,4470 5664,4461 5662,4451 5659,4442 5657,4432 5656,4423 5655,4413 5655,4403 5655,2898 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="494px" font-weight="700"><tspan class="TextPosition" x="6076" y="3277"><tspan fill="rgb(255,255,255)" stroke="none">科研人员信息</tspan></tspan><tspan class="TextPosition" x="6076" y="3809"><tspan fill="rgb(255,255,255)" stroke="none">展示与成果分</tspan></tspan><tspan class="TextPosition" x="7314" y="4341"><tspan fill="rgb(255,255,255)" stroke="none">享</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id9">
         <rect class="BoundingBox" stroke="none" fill="none" x="6012" y="4590" width="395" height="1429"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 6030,4590 L 6030,6000 6406,6000"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id10">
         <rect class="BoundingBox" stroke="none" fill="none" x="6389" y="5042" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 6407,5248 L 6407,5248 6407,5239 6408,5229 6409,5220 6411,5210 6413,5201 6415,5192 6418,5183 6422,5174 6426,5166 6430,5157 6435,5149 6440,5141 6446,5133 6452,5126 6458,5119 6465,5112 6472,5106 6479,5100 6487,5094 6495,5089 6503,5084 6511,5080 6520,5076 6529,5072 6538,5069 6547,5066 6556,5064 6566,5062 6575,5061 6584,5060 6594,5060 9226,5060 9226,5060 9236,5060 9245,5061 9255,5062 9265,5064 9274,5066 9284,5069 9293,5072 9302,5076 9311,5080 9319,5085 9328,5090 9336,5096 9343,5102 9351,5108 9358,5115 9365,5122 9371,5129 9377,5137 9382,5145 9388,5153 9392,5162 9397,5171 9400,5180 9404,5189 9406,5199 9409,5208 9411,5218 9412,5227 9413,5237 9413,5247 9414,6752 9414,6752 9414,6762 9413,6772 9412,6781 9410,6791 9408,6800 9405,6810 9402,6819 9398,6828 9394,6837 9389,6846 9384,6854 9378,6862 9372,6870 9366,6877 9359,6885 9352,6891 9345,6898 9337,6904 9329,6909 9321,6914 9312,6919 9303,6923 9294,6927 9285,6931 9275,6933 9266,6936 9256,6938 9247,6939 9237,6940 9227,6940 6595,6940 6595,6940 6585,6940 6575,6939 6566,6938 6556,6936 6547,6934 6537,6931 6528,6928 6519,6924 6510,6920 6501,6915 6493,6910 6485,6904 6477,6898 6470,6892 6462,6885 6456,6878 6449,6871 6443,6863 6438,6855 6433,6847 6428,6838 6424,6829 6420,6820 6416,6811 6414,6801 6411,6792 6409,6782 6408,6773 6407,6763 6407,6753 6407,5248 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6407,5248 L 6407,5248 6407,5239 6408,5229 6409,5220 6411,5210 6413,5201 6415,5192 6418,5183 6422,5174 6426,5166 6430,5157 6435,5149 6440,5141 6446,5133 6452,5126 6458,5119 6465,5112 6472,5106 6479,5100 6487,5094 6495,5089 6503,5084 6511,5080 6520,5076 6529,5072 6538,5069 6547,5066 6556,5064 6566,5062 6575,5061 6584,5060 6594,5060 9226,5060 9226,5060 9236,5060 9245,5061 9255,5062 9265,5064 9274,5066 9284,5069 9293,5072 9302,5076 9311,5080 9319,5085 9328,5090 9336,5096 9343,5102 9351,5108 9358,5115 9365,5122 9371,5129 9377,5137 9382,5145 9388,5153 9392,5162 9397,5171 9400,5180 9404,5189 9406,5199 9409,5208 9411,5218 9412,5227 9413,5237 9413,5247 9414,6752 9414,6752 9414,6762 9413,6772 9412,6781 9410,6791 9408,6800 9405,6810 9402,6819 9398,6828 9394,6837 9389,6846 9384,6854 9378,6862 9372,6870 9366,6877 9359,6885 9352,6891 9345,6898 9337,6904 9329,6909 9321,6914 9312,6919 9303,6923 9294,6927 9285,6931 9275,6933 9266,6936 9256,6938 9247,6939 9237,6940 9227,6940 6595,6940 6595,6940 6585,6940 6575,6939 6566,6938 6556,6936 6547,6934 6537,6931 6528,6928 6519,6924 6510,6920 6501,6915 6493,6910 6485,6904 6477,6898 6470,6892 6462,6885 6456,6878 6449,6871 6443,6863 6438,6855 6433,6847 6428,6838 6424,6829 6420,6820 6416,6811 6414,6801 6411,6792 6409,6782 6408,6773 6407,6763 6407,6753 6407,5248 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="6668" y="5908"><tspan fill="rgb(0,0,0)" stroke="none">注册与身份校</tspan></tspan><tspan class="TextPosition" x="6879" y="6364"><tspan fill="rgb(0,0,0)" stroke="none">验（邮箱）</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id11">
         <rect class="BoundingBox" stroke="none" fill="none" x="6012" y="4591" width="395" height="3778"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 6030,4591 L 6030,8350 6406,8350"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id12">
         <rect class="BoundingBox" stroke="none" fill="none" x="6389" y="7391" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 6407,7597 L 6407,7597 6407,7588 6408,7578 6409,7569 6411,7559 6413,7550 6415,7541 6418,7532 6422,7523 6426,7515 6430,7506 6435,7498 6440,7490 6446,7482 6452,7475 6458,7468 6465,7461 6472,7455 6479,7449 6487,7443 6495,7438 6503,7433 6511,7429 6520,7425 6529,7421 6538,7418 6547,7415 6556,7413 6566,7411 6575,7410 6584,7409 6594,7409 9226,7409 9226,7409 9236,7409 9245,7410 9255,7411 9265,7413 9274,7415 9284,7418 9293,7421 9302,7425 9311,7429 9319,7434 9328,7439 9336,7445 9343,7451 9351,7457 9358,7464 9365,7471 9371,7478 9377,7486 9382,7494 9388,7502 9392,7511 9397,7520 9400,7529 9404,7538 9406,7548 9409,7557 9411,7567 9412,7576 9413,7586 9413,7596 9414,9101 9414,9101 9414,9111 9413,9121 9412,9130 9410,9140 9408,9149 9405,9159 9402,9168 9398,9177 9394,9186 9389,9195 9384,9203 9378,9211 9372,9219 9366,9226 9359,9234 9352,9240 9345,9247 9337,9253 9329,9258 9321,9263 9312,9268 9303,9272 9294,9276 9285,9280 9275,9282 9266,9285 9256,9287 9247,9288 9237,9289 9227,9289 6595,9289 6595,9289 6585,9289 6575,9288 6566,9287 6556,9285 6547,9283 6537,9280 6528,9277 6519,9273 6510,9269 6501,9264 6493,9259 6485,9253 6477,9247 6470,9241 6462,9234 6456,9227 6449,9220 6443,9212 6438,9204 6433,9196 6428,9187 6424,9178 6420,9169 6416,9160 6414,9150 6411,9141 6409,9131 6408,9122 6407,9112 6407,9102 6407,7597 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6407,7597 L 6407,7597 6407,7588 6408,7578 6409,7569 6411,7559 6413,7550 6415,7541 6418,7532 6422,7523 6426,7515 6430,7506 6435,7498 6440,7490 6446,7482 6452,7475 6458,7468 6465,7461 6472,7455 6479,7449 6487,7443 6495,7438 6503,7433 6511,7429 6520,7425 6529,7421 6538,7418 6547,7415 6556,7413 6566,7411 6575,7410 6584,7409 6594,7409 9226,7409 9226,7409 9236,7409 9245,7410 9255,7411 9265,7413 9274,7415 9284,7418 9293,7421 9302,7425 9311,7429 9319,7434 9328,7439 9336,7445 9343,7451 9351,7457 9358,7464 9365,7471 9371,7478 9377,7486 9382,7494 9388,7502 9392,7511 9397,7520 9400,7529 9404,7538 9406,7548 9409,7557 9411,7567 9412,7576 9413,7586 9413,7596 9414,9101 9414,9101 9414,9111 9413,9121 9412,9130 9410,9140 9408,9149 9405,9159 9402,9168 9398,9177 9394,9186 9389,9195 9384,9203 9378,9211 9372,9219 9366,9226 9359,9234 9352,9240 9345,9247 9337,9253 9329,9258 9321,9263 9312,9268 9303,9272 9294,9276 9285,9280 9275,9282 9266,9285 9256,9287 9247,9288 9237,9289 9227,9289 6595,9289 6595,9289 6585,9289 6575,9288 6566,9287 6556,9285 6547,9283 6537,9280 6528,9277 6519,9273 6510,9269 6501,9264 6493,9259 6485,9253 6477,9247 6470,9241 6462,9234 6456,9227 6449,9220 6443,9212 6438,9204 6433,9196 6428,9187 6424,9178 6420,9169 6416,9160 6414,9150 6411,9141 6409,9131 6408,9122 6407,9112 6407,9102 6407,7597 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="6668" y="8485"><tspan fill="rgb(0,0,0)" stroke="none">个人信息管理</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id13">
         <rect class="BoundingBox" stroke="none" fill="none" x="6012" y="4591" width="395" height="6128"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 6030,4591 L 6030,10700 6406,10700"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id14">
         <rect class="BoundingBox" stroke="none" fill="none" x="6389" y="9741" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 6407,9947 L 6407,9947 6407,9938 6408,9928 6409,9919 6411,9909 6413,9900 6415,9891 6418,9882 6422,9873 6426,9865 6430,9856 6435,9848 6440,9840 6446,9832 6452,9825 6458,9818 6465,9811 6472,9805 6479,9799 6487,9793 6495,9788 6503,9783 6511,9779 6520,9775 6529,9771 6538,9768 6547,9765 6556,9763 6566,9761 6575,9760 6584,9759 6594,9759 9226,9759 9226,9759 9236,9759 9245,9760 9255,9761 9265,9763 9274,9765 9284,9768 9293,9771 9302,9775 9311,9779 9319,9784 9328,9789 9336,9795 9343,9801 9351,9807 9358,9814 9365,9821 9371,9828 9377,9836 9382,9844 9388,9852 9392,9861 9397,9870 9400,9879 9404,9888 9406,9898 9409,9907 9411,9917 9412,9926 9413,9936 9413,9946 9414,11451 9414,11451 9414,11461 9413,11471 9412,11480 9410,11490 9408,11499 9405,11509 9402,11518 9398,11527 9394,11536 9389,11545 9384,11553 9378,11561 9372,11569 9366,11576 9359,11584 9352,11590 9345,11597 9337,11603 9329,11608 9321,11613 9312,11618 9303,11622 9294,11626 9285,11630 9275,11632 9266,11635 9256,11637 9247,11638 9237,11639 9227,11639 6595,11639 6595,11639 6585,11639 6575,11638 6566,11637 6556,11635 6547,11633 6537,11630 6528,11627 6519,11623 6510,11619 6501,11614 6493,11609 6485,11603 6477,11597 6470,11591 6462,11584 6456,11577 6449,11570 6443,11562 6438,11554 6433,11546 6428,11537 6424,11528 6420,11519 6416,11510 6414,11500 6411,11491 6409,11481 6408,11472 6407,11462 6407,11452 6407,9947 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6407,9947 L 6407,9947 6407,9938 6408,9928 6409,9919 6411,9909 6413,9900 6415,9891 6418,9882 6422,9873 6426,9865 6430,9856 6435,9848 6440,9840 6446,9832 6452,9825 6458,9818 6465,9811 6472,9805 6479,9799 6487,9793 6495,9788 6503,9783 6511,9779 6520,9775 6529,9771 6538,9768 6547,9765 6556,9763 6566,9761 6575,9760 6584,9759 6594,9759 9226,9759 9226,9759 9236,9759 9245,9760 9255,9761 9265,9763 9274,9765 9284,9768 9293,9771 9302,9775 9311,9779 9319,9784 9328,9789 9336,9795 9343,9801 9351,9807 9358,9814 9365,9821 9371,9828 9377,9836 9382,9844 9388,9852 9392,9861 9397,9870 9400,9879 9404,9888 9406,9898 9409,9907 9411,9917 9412,9926 9413,9936 9413,9946 9414,11451 9414,11451 9414,11461 9413,11471 9412,11480 9410,11490 9408,11499 9405,11509 9402,11518 9398,11527 9394,11536 9389,11545 9384,11553 9378,11561 9372,11569 9366,11576 9359,11584 9352,11590 9345,11597 9337,11603 9329,11608 9321,11613 9312,11618 9303,11622 9294,11626 9285,11630 9275,11632 9266,11635 9256,11637 9247,11638 9237,11639 9227,11639 6595,11639 6595,11639 6585,11639 6575,11638 6566,11637 6556,11635 6547,11633 6537,11630 6528,11627 6519,11623 6510,11619 6501,11614 6493,11609 6485,11603 6477,11597 6470,11591 6462,11584 6456,11577 6449,11570 6443,11562 6438,11554 6433,11546 6428,11537 6424,11528 6420,11519 6416,11510 6414,11500 6411,11491 6409,11481 6408,11472 6407,11462 6407,11452 6407,9947 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="6668" y="10607"><tspan fill="rgb(0,0,0)" stroke="none">成果分类上传</tspan></tspan><tspan class="TextPosition" x="7303" y="11063"><tspan fill="rgb(0,0,0)" stroke="none">与导入</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id15">
         <rect class="BoundingBox" stroke="none" fill="none" x="6012" y="4590" width="395" height="8477"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 6030,4590 L 6030,13048 6406,13048"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id16">
         <rect class="BoundingBox" stroke="none" fill="none" x="6389" y="12091" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 6407,12297 L 6407,12297 6407,12288 6408,12278 6409,12269 6411,12259 6413,12250 6415,12241 6418,12232 6422,12223 6426,12215 6430,12206 6435,12198 6440,12190 6446,12182 6452,12175 6458,12168 6465,12161 6472,12155 6479,12149 6487,12143 6495,12138 6503,12133 6511,12129 6520,12125 6529,12121 6538,12118 6547,12115 6556,12113 6566,12111 6575,12110 6584,12109 6594,12109 9226,12109 9226,12109 9236,12109 9245,12110 9255,12111 9265,12113 9274,12115 9284,12118 9293,12121 9302,12125 9311,12129 9319,12134 9328,12139 9336,12145 9343,12151 9351,12157 9358,12164 9365,12171 9371,12178 9377,12186 9382,12194 9388,12202 9392,12211 9397,12220 9400,12229 9404,12238 9406,12248 9409,12257 9411,12267 9412,12276 9413,12286 9413,12296 9414,13801 9414,13801 9414,13811 9413,13821 9412,13830 9410,13840 9408,13849 9405,13859 9402,13868 9398,13877 9394,13886 9389,13895 9384,13903 9378,13911 9372,13919 9366,13926 9359,13934 9352,13940 9345,13947 9337,13953 9329,13958 9321,13963 9312,13968 9303,13972 9294,13976 9285,13980 9275,13982 9266,13985 9256,13987 9247,13988 9237,13989 9227,13989 6595,13989 6595,13989 6585,13989 6575,13988 6566,13987 6556,13985 6547,13983 6537,13980 6528,13977 6519,13973 6510,13969 6501,13964 6493,13959 6485,13953 6477,13947 6470,13941 6462,13934 6456,13927 6449,13920 6443,13912 6438,13904 6433,13896 6428,13887 6424,13878 6420,13869 6416,13860 6414,13850 6411,13841 6409,13831 6408,13822 6407,13812 6407,13802 6407,12297 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6407,12297 L 6407,12297 6407,12288 6408,12278 6409,12269 6411,12259 6413,12250 6415,12241 6418,12232 6422,12223 6426,12215 6430,12206 6435,12198 6440,12190 6446,12182 6452,12175 6458,12168 6465,12161 6472,12155 6479,12149 6487,12143 6495,12138 6503,12133 6511,12129 6520,12125 6529,12121 6538,12118 6547,12115 6556,12113 6566,12111 6575,12110 6584,12109 6594,12109 9226,12109 9226,12109 9236,12109 9245,12110 9255,12111 9265,12113 9274,12115 9284,12118 9293,12121 9302,12125 9311,12129 9319,12134 9328,12139 9336,12145 9343,12151 9351,12157 9358,12164 9365,12171 9371,12178 9377,12186 9382,12194 9388,12202 9392,12211 9397,12220 9400,12229 9404,12238 9406,12248 9409,12257 9411,12267 9412,12276 9413,12286 9413,12296 9414,13801 9414,13801 9414,13811 9413,13821 9412,13830 9410,13840 9408,13849 9405,13859 9402,13868 9398,13877 9394,13886 9389,13895 9384,13903 9378,13911 9372,13919 9366,13926 9359,13934 9352,13940 9345,13947 9337,13953 9329,13958 9321,13963 9312,13968 9303,13972 9294,13976 9285,13980 9275,13982 9266,13985 9256,13987 9247,13988 9237,13989 9227,13989 6595,13989 6595,13989 6585,13989 6575,13988 6566,13987 6556,13985 6547,13983 6537,13980 6528,13977 6519,13973 6510,13969 6501,13964 6493,13959 6485,13953 6477,13947 6470,13941 6462,13934 6456,13927 6449,13920 6443,13912 6438,13904 6433,13896 6428,13887 6424,13878 6420,13869 6416,13860 6414,13850 6411,13841 6409,13831 6408,13822 6407,13812 6407,13802 6407,12297 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="6761" y="12957"><tspan fill="rgb(0,0,0)" stroke="none"> </tspan><tspan fill="rgb(0,0,0)" stroke="none">成果全文上</tspan></tspan><tspan class="TextPosition" x="6668" y="13413"><tspan fill="rgb(0,0,0)" stroke="none">传与自动填充</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id17">
         <rect class="BoundingBox" stroke="none" fill="none" x="6012" y="4589" width="395" height="10828"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 6030,4590 L 6030,15398 6406,15398"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id18">
         <rect class="BoundingBox" stroke="none" fill="none" x="6389" y="14440" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 6407,14646 L 6407,14646 6407,14637 6408,14627 6409,14618 6411,14608 6413,14599 6415,14590 6418,14581 6422,14572 6426,14564 6430,14555 6435,14547 6440,14539 6446,14531 6452,14524 6458,14517 6465,14510 6472,14504 6479,14498 6487,14492 6495,14487 6503,14482 6511,14478 6520,14474 6529,14470 6538,14467 6547,14464 6556,14462 6566,14460 6575,14459 6584,14458 6594,14458 9226,14458 9226,14458 9236,14458 9245,14459 9255,14460 9265,14462 9274,14464 9284,14467 9293,14470 9302,14474 9311,14478 9319,14483 9328,14488 9336,14494 9343,14500 9351,14506 9358,14513 9365,14520 9371,14527 9377,14535 9382,14543 9388,14551 9392,14560 9397,14569 9400,14578 9404,14587 9406,14597 9409,14606 9411,14616 9412,14625 9413,14635 9413,14645 9414,16150 9414,16150 9414,16160 9413,16170 9412,16179 9410,16189 9408,16198 9405,16208 9402,16217 9398,16226 9394,16235 9389,16244 9384,16252 9378,16260 9372,16268 9366,16275 9359,16283 9352,16289 9345,16296 9337,16302 9329,16307 9321,16312 9312,16317 9303,16321 9294,16325 9285,16329 9275,16331 9266,16334 9256,16336 9247,16337 9237,16338 9227,16338 6595,16338 6595,16338 6585,16338 6575,16337 6566,16336 6556,16334 6547,16332 6537,16329 6528,16326 6519,16322 6510,16318 6501,16313 6493,16308 6485,16302 6477,16296 6470,16290 6462,16283 6456,16276 6449,16269 6443,16261 6438,16253 6433,16245 6428,16236 6424,16227 6420,16218 6416,16209 6414,16199 6411,16190 6409,16180 6408,16171 6407,16161 6407,16151 6407,14646 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6407,14646 L 6407,14646 6407,14637 6408,14627 6409,14618 6411,14608 6413,14599 6415,14590 6418,14581 6422,14572 6426,14564 6430,14555 6435,14547 6440,14539 6446,14531 6452,14524 6458,14517 6465,14510 6472,14504 6479,14498 6487,14492 6495,14487 6503,14482 6511,14478 6520,14474 6529,14470 6538,14467 6547,14464 6556,14462 6566,14460 6575,14459 6584,14458 6594,14458 9226,14458 9226,14458 9236,14458 9245,14459 9255,14460 9265,14462 9274,14464 9284,14467 9293,14470 9302,14474 9311,14478 9319,14483 9328,14488 9336,14494 9343,14500 9351,14506 9358,14513 9365,14520 9371,14527 9377,14535 9382,14543 9388,14551 9392,14560 9397,14569 9400,14578 9404,14587 9406,14597 9409,14606 9411,14616 9412,14625 9413,14635 9413,14645 9414,16150 9414,16150 9414,16160 9413,16170 9412,16179 9410,16189 9408,16198 9405,16208 9402,16217 9398,16226 9394,16235 9389,16244 9384,16252 9378,16260 9372,16268 9366,16275 9359,16283 9352,16289 9345,16296 9337,16302 9329,16307 9321,16312 9312,16317 9303,16321 9294,16325 9285,16329 9275,16331 9266,16334 9256,16336 9247,16337 9237,16338 9227,16338 6595,16338 6595,16338 6585,16338 6575,16337 6566,16336 6556,16334 6547,16332 6537,16329 6528,16326 6519,16322 6510,16318 6501,16313 6493,16308 6485,16302 6477,16296 6470,16290 6462,16283 6456,16276 6449,16269 6443,16261 6438,16253 6433,16245 6428,16236 6424,16227 6420,16218 6416,16209 6414,16199 6411,16190 6409,16180 6408,16171 6407,16161 6407,16151 6407,14646 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="6668" y="15306"><tspan fill="rgb(0,0,0)" stroke="none">项目发布与合</tspan></tspan><tspan class="TextPosition" x="7303" y="15762"><tspan fill="rgb(0,0,0)" stroke="none">作邀请</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id19">
         <rect class="BoundingBox" stroke="none" fill="none" x="10337" y="2692" width="3796" height="1917"/>
         <path fill="rgb(68,114,196)" stroke="none" d="M 10355,2898 L 10355,2898 10355,2889 10356,2879 10357,2870 10359,2860 10361,2851 10363,2842 10366,2833 10370,2824 10374,2816 10378,2807 10383,2799 10388,2791 10394,2783 10400,2776 10406,2769 10413,2762 10420,2756 10427,2750 10435,2744 10443,2739 10451,2734 10459,2730 10468,2726 10477,2722 10486,2719 10495,2716 10504,2714 10514,2712 10523,2711 10532,2710 10542,2710 13926,2710 13926,2710 13936,2710 13945,2711 13955,2712 13965,2714 13974,2716 13984,2719 13993,2722 14002,2726 14011,2730 14019,2735 14028,2740 14036,2746 14043,2752 14051,2758 14058,2765 14065,2772 14071,2779 14077,2787 14082,2795 14088,2803 14092,2812 14097,2821 14100,2830 14104,2839 14106,2849 14109,2858 14111,2868 14112,2877 14113,2887 14113,2897 14114,4402 14114,4402 14114,4412 14113,4422 14112,4431 14110,4441 14108,4450 14105,4460 14102,4469 14098,4478 14094,4487 14089,4496 14084,4504 14078,4512 14072,4520 14066,4527 14059,4535 14052,4541 14045,4548 14037,4554 14029,4559 14021,4564 14012,4569 14003,4573 13994,4577 13985,4581 13975,4583 13966,4586 13956,4588 13947,4589 13937,4590 13927,4590 10543,4590 10543,4590 10533,4590 10523,4589 10514,4588 10504,4586 10495,4584 10485,4581 10476,4578 10467,4574 10458,4570 10449,4565 10441,4560 10433,4554 10425,4548 10418,4542 10410,4535 10404,4528 10397,4521 10391,4513 10386,4505 10381,4497 10376,4488 10372,4479 10368,4470 10364,4461 10362,4451 10359,4442 10357,4432 10356,4423 10355,4413 10355,4403 10355,2898 Z"/>
         <path fill="none" stroke="rgb(255,255,255)" stroke-width="35" stroke-linejoin="miter" d="M 10355,2898 L 10355,2898 10355,2889 10356,2879 10357,2870 10359,2860 10361,2851 10363,2842 10366,2833 10370,2824 10374,2816 10378,2807 10383,2799 10388,2791 10394,2783 10400,2776 10406,2769 10413,2762 10420,2756 10427,2750 10435,2744 10443,2739 10451,2734 10459,2730 10468,2726 10477,2722 10486,2719 10495,2716 10504,2714 10514,2712 10523,2711 10532,2710 10542,2710 13926,2710 13926,2710 13936,2710 13945,2711 13955,2712 13965,2714 13974,2716 13984,2719 13993,2722 14002,2726 14011,2730 14019,2735 14028,2740 14036,2746 14043,2752 14051,2758 14058,2765 14065,2772 14071,2779 14077,2787 14082,2795 14088,2803 14092,2812 14097,2821 14100,2830 14104,2839 14106,2849 14109,2858 14111,2868 14112,2877 14113,2887 14113,2897 14114,4402 14114,4402 14114,4412 14113,4422 14112,4431 14110,4441 14108,4450 14105,4460 14102,4469 14098,4478 14094,4487 14089,4496 14084,4504 14078,4512 14072,4520 14066,4527 14059,4535 14052,4541 14045,4548 14037,4554 14029,4559 14021,4564 14012,4569 14003,4573 13994,4577 13985,4581 13975,4583 13966,4586 13956,4588 13947,4589 13937,4590 13927,4590 10543,4590 10543,4590 10533,4590 10523,4589 10514,4588 10504,4586 10495,4584 10485,4581 10476,4578 10467,4574 10458,4570 10449,4565 10441,4560 10433,4554 10425,4548 10418,4542 10410,4535 10404,4528 10397,4521 10391,4513 10386,4505 10381,4497 10376,4488 10372,4479 10368,4470 10364,4461 10362,4451 10359,4442 10357,4432 10356,4423 10355,4413 10355,4403 10355,2898 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="494px" font-weight="700"><tspan class="TextPosition" x="10776" y="3809"><tspan fill="rgb(255,255,255)" stroke="none">社交互动功能</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id20">
         <rect class="BoundingBox" stroke="none" fill="none" x="10712" y="4590" width="395" height="1429"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 10730,4590 L 10730,6000 11106,6000"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id21">
         <rect class="BoundingBox" stroke="none" fill="none" x="11088" y="5042" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 11106,5248 L 11106,5248 11106,5239 11107,5229 11108,5220 11110,5210 11112,5201 11114,5192 11117,5183 11121,5174 11125,5166 11129,5157 11134,5149 11139,5141 11145,5133 11151,5126 11157,5119 11164,5112 11171,5106 11178,5100 11186,5094 11194,5089 11202,5084 11210,5080 11219,5076 11228,5072 11237,5069 11246,5066 11255,5064 11265,5062 11274,5061 11283,5060 11293,5060 13925,5060 13925,5060 13935,5060 13944,5061 13954,5062 13964,5064 13973,5066 13983,5069 13992,5072 14001,5076 14010,5080 14018,5085 14027,5090 14035,5096 14042,5102 14050,5108 14057,5115 14064,5122 14070,5129 14076,5137 14081,5145 14087,5153 14091,5162 14096,5171 14099,5180 14103,5189 14105,5199 14108,5208 14110,5218 14111,5227 14112,5237 14112,5247 14113,6752 14113,6752 14113,6762 14112,6772 14111,6781 14109,6791 14107,6800 14104,6810 14101,6819 14097,6828 14093,6837 14088,6846 14083,6854 14077,6862 14071,6870 14065,6877 14058,6885 14051,6891 14044,6898 14036,6904 14028,6909 14020,6914 14011,6919 14002,6923 13993,6927 13984,6931 13974,6933 13965,6936 13955,6938 13946,6939 13936,6940 13926,6940 11294,6940 11294,6940 11284,6940 11274,6939 11265,6938 11255,6936 11246,6934 11236,6931 11227,6928 11218,6924 11209,6920 11200,6915 11192,6910 11184,6904 11176,6898 11169,6892 11161,6885 11155,6878 11148,6871 11142,6863 11137,6855 11132,6847 11127,6838 11123,6829 11119,6820 11115,6811 11113,6801 11110,6792 11108,6782 11107,6773 11106,6763 11106,6753 11106,5248 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11106,5248 L 11106,5248 11106,5239 11107,5229 11108,5220 11110,5210 11112,5201 11114,5192 11117,5183 11121,5174 11125,5166 11129,5157 11134,5149 11139,5141 11145,5133 11151,5126 11157,5119 11164,5112 11171,5106 11178,5100 11186,5094 11194,5089 11202,5084 11210,5080 11219,5076 11228,5072 11237,5069 11246,5066 11255,5064 11265,5062 11274,5061 11283,5060 11293,5060 13925,5060 13925,5060 13935,5060 13944,5061 13954,5062 13964,5064 13973,5066 13983,5069 13992,5072 14001,5076 14010,5080 14018,5085 14027,5090 14035,5096 14042,5102 14050,5108 14057,5115 14064,5122 14070,5129 14076,5137 14081,5145 14087,5153 14091,5162 14096,5171 14099,5180 14103,5189 14105,5199 14108,5208 14110,5218 14111,5227 14112,5237 14112,5247 14113,6752 14113,6752 14113,6762 14112,6772 14111,6781 14109,6791 14107,6800 14104,6810 14101,6819 14097,6828 14093,6837 14088,6846 14083,6854 14077,6862 14071,6870 14065,6877 14058,6885 14051,6891 14044,6898 14036,6904 14028,6909 14020,6914 14011,6919 14002,6923 13993,6927 13984,6931 13974,6933 13965,6936 13955,6938 13946,6939 13936,6940 13926,6940 11294,6940 11294,6940 11284,6940 11274,6939 11265,6938 11255,6936 11246,6934 11236,6931 11227,6928 11218,6924 11209,6920 11200,6915 11192,6910 11184,6904 11176,6898 11169,6892 11161,6885 11155,6878 11148,6871 11142,6863 11137,6855 11132,6847 11127,6838 11123,6829 11119,6820 11115,6811 11113,6801 11110,6792 11108,6782 11107,6773 11106,6763 11106,6753 11106,5248 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="11367" y="5908"><tspan fill="rgb(0,0,0)" stroke="none">多维搜索与关</tspan></tspan><tspan class="TextPosition" x="12425" y="6364"><tspan fill="rgb(0,0,0)" stroke="none">注</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id22">
         <rect class="BoundingBox" stroke="none" fill="none" x="10712" y="4591" width="395" height="3778"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 10730,4591 L 10730,8350 11106,8350"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id23">
         <rect class="BoundingBox" stroke="none" fill="none" x="11088" y="7391" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 11106,7597 L 11106,7597 11106,7588 11107,7578 11108,7569 11110,7559 11112,7550 11114,7541 11117,7532 11121,7523 11125,7515 11129,7506 11134,7498 11139,7490 11145,7482 11151,7475 11157,7468 11164,7461 11171,7455 11178,7449 11186,7443 11194,7438 11202,7433 11210,7429 11219,7425 11228,7421 11237,7418 11246,7415 11255,7413 11265,7411 11274,7410 11283,7409 11293,7409 13925,7409 13925,7409 13935,7409 13944,7410 13954,7411 13964,7413 13973,7415 13983,7418 13992,7421 14001,7425 14010,7429 14018,7434 14027,7439 14035,7445 14042,7451 14050,7457 14057,7464 14064,7471 14070,7478 14076,7486 14081,7494 14087,7502 14091,7511 14096,7520 14099,7529 14103,7538 14105,7548 14108,7557 14110,7567 14111,7576 14112,7586 14112,7596 14113,9101 14113,9101 14113,9111 14112,9121 14111,9130 14109,9140 14107,9149 14104,9159 14101,9168 14097,9177 14093,9186 14088,9195 14083,9203 14077,9211 14071,9219 14065,9226 14058,9234 14051,9240 14044,9247 14036,9253 14028,9258 14020,9263 14011,9268 14002,9272 13993,9276 13984,9280 13974,9282 13965,9285 13955,9287 13946,9288 13936,9289 13926,9289 11294,9289 11294,9289 11284,9289 11274,9288 11265,9287 11255,9285 11246,9283 11236,9280 11227,9277 11218,9273 11209,9269 11200,9264 11192,9259 11184,9253 11176,9247 11169,9241 11161,9234 11155,9227 11148,9220 11142,9212 11137,9204 11132,9196 11127,9187 11123,9178 11119,9169 11115,9160 11113,9150 11110,9141 11108,9131 11107,9122 11106,9112 11106,9102 11106,7597 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11106,7597 L 11106,7597 11106,7588 11107,7578 11108,7569 11110,7559 11112,7550 11114,7541 11117,7532 11121,7523 11125,7515 11129,7506 11134,7498 11139,7490 11145,7482 11151,7475 11157,7468 11164,7461 11171,7455 11178,7449 11186,7443 11194,7438 11202,7433 11210,7429 11219,7425 11228,7421 11237,7418 11246,7415 11255,7413 11265,7411 11274,7410 11283,7409 11293,7409 13925,7409 13925,7409 13935,7409 13944,7410 13954,7411 13964,7413 13973,7415 13983,7418 13992,7421 14001,7425 14010,7429 14018,7434 14027,7439 14035,7445 14042,7451 14050,7457 14057,7464 14064,7471 14070,7478 14076,7486 14081,7494 14087,7502 14091,7511 14096,7520 14099,7529 14103,7538 14105,7548 14108,7557 14110,7567 14111,7576 14112,7586 14112,7596 14113,9101 14113,9101 14113,9111 14112,9121 14111,9130 14109,9140 14107,9149 14104,9159 14101,9168 14097,9177 14093,9186 14088,9195 14083,9203 14077,9211 14071,9219 14065,9226 14058,9234 14051,9240 14044,9247 14036,9253 14028,9258 14020,9263 14011,9268 14002,9272 13993,9276 13984,9280 13974,9282 13965,9285 13955,9287 13946,9288 13936,9289 13926,9289 11294,9289 11294,9289 11284,9289 11274,9288 11265,9287 11255,9285 11246,9283 11236,9280 11227,9277 11218,9273 11209,9269 11200,9264 11192,9259 11184,9253 11176,9247 11169,9241 11161,9234 11155,9227 11148,9220 11142,9212 11137,9204 11132,9196 11127,9187 11123,9178 11119,9169 11115,9160 11113,9150 11110,9141 11108,9131 11107,9122 11106,9112 11106,9102 11106,7597 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="11367" y="8257"><tspan fill="rgb(0,0,0)" stroke="none">私信、评论、</tspan></tspan><tspan class="TextPosition" x="12213" y="8713"><tspan fill="rgb(0,0,0)" stroke="none">点赞</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id24">
         <rect class="BoundingBox" stroke="none" fill="none" x="10712" y="4591" width="395" height="6128"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 10730,4591 L 10730,10700 11106,10700"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id25">
         <rect class="BoundingBox" stroke="none" fill="none" x="11088" y="9741" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 11106,9947 L 11106,9947 11106,9938 11107,9928 11108,9919 11110,9909 11112,9900 11114,9891 11117,9882 11121,9873 11125,9865 11129,9856 11134,9848 11139,9840 11145,9832 11151,9825 11157,9818 11164,9811 11171,9805 11178,9799 11186,9793 11194,9788 11202,9783 11210,9779 11219,9775 11228,9771 11237,9768 11246,9765 11255,9763 11265,9761 11274,9760 11283,9759 11293,9759 13925,9759 13925,9759 13935,9759 13944,9760 13954,9761 13964,9763 13973,9765 13983,9768 13992,9771 14001,9775 14010,9779 14018,9784 14027,9789 14035,9795 14042,9801 14050,9807 14057,9814 14064,9821 14070,9828 14076,9836 14081,9844 14087,9852 14091,9861 14096,9870 14099,9879 14103,9888 14105,9898 14108,9907 14110,9917 14111,9926 14112,9936 14112,9946 14113,11451 14113,11451 14113,11461 14112,11471 14111,11480 14109,11490 14107,11499 14104,11509 14101,11518 14097,11527 14093,11536 14088,11545 14083,11553 14077,11561 14071,11569 14065,11576 14058,11584 14051,11590 14044,11597 14036,11603 14028,11608 14020,11613 14011,11618 14002,11622 13993,11626 13984,11630 13974,11632 13965,11635 13955,11637 13946,11638 13936,11639 13926,11639 11294,11639 11294,11639 11284,11639 11274,11638 11265,11637 11255,11635 11246,11633 11236,11630 11227,11627 11218,11623 11209,11619 11200,11614 11192,11609 11184,11603 11176,11597 11169,11591 11161,11584 11155,11577 11148,11570 11142,11562 11137,11554 11132,11546 11127,11537 11123,11528 11119,11519 11115,11510 11113,11500 11110,11491 11108,11481 11107,11472 11106,11462 11106,11452 11106,9947 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11106,9947 L 11106,9947 11106,9938 11107,9928 11108,9919 11110,9909 11112,9900 11114,9891 11117,9882 11121,9873 11125,9865 11129,9856 11134,9848 11139,9840 11145,9832 11151,9825 11157,9818 11164,9811 11171,9805 11178,9799 11186,9793 11194,9788 11202,9783 11210,9779 11219,9775 11228,9771 11237,9768 11246,9765 11255,9763 11265,9761 11274,9760 11283,9759 11293,9759 13925,9759 13925,9759 13935,9759 13944,9760 13954,9761 13964,9763 13973,9765 13983,9768 13992,9771 14001,9775 14010,9779 14018,9784 14027,9789 14035,9795 14042,9801 14050,9807 14057,9814 14064,9821 14070,9828 14076,9836 14081,9844 14087,9852 14091,9861 14096,9870 14099,9879 14103,9888 14105,9898 14108,9907 14110,9917 14111,9926 14112,9936 14112,9946 14113,11451 14113,11451 14113,11461 14112,11471 14111,11480 14109,11490 14107,11499 14104,11509 14101,11518 14097,11527 14093,11536 14088,11545 14083,11553 14077,11561 14071,11569 14065,11576 14058,11584 14051,11590 14044,11597 14036,11603 14028,11608 14020,11613 14011,11618 14002,11622 13993,11626 13984,11630 13974,11632 13965,11635 13955,11637 13946,11638 13936,11639 13926,11639 11294,11639 11294,11639 11284,11639 11274,11638 11265,11637 11255,11635 11246,11633 11236,11630 11227,11627 11218,11623 11209,11619 11200,11614 11192,11609 11184,11603 11176,11597 11169,11591 11161,11584 11155,11577 11148,11570 11142,11562 11137,11554 11132,11546 11127,11537 11123,11528 11119,11519 11115,11510 11113,11500 11110,11491 11108,11481 11107,11472 11106,11462 11106,11452 11106,9947 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="11367" y="10379"><tspan fill="rgb(0,0,0)" stroke="none">成果请求功能</tspan></tspan><tspan class="TextPosition" x="11406" y="10835"><tspan fill="rgb(0,0,0)" stroke="none">（如全文</tspan><tspan font-family="等线" fill="rgb(0,0,0)" stroke="none">/</tspan><tspan fill="rgb(0,0,0)" stroke="none">数</tspan></tspan><tspan class="TextPosition" x="12213" y="11291"><tspan fill="rgb(0,0,0)" stroke="none">据）</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id26">
         <rect class="BoundingBox" stroke="none" fill="none" x="10712" y="4590" width="395" height="8477"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 10730,4590 L 10730,13048 11106,13048"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id27">
         <rect class="BoundingBox" stroke="none" fill="none" x="11088" y="12091" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 11106,12297 L 11106,12297 11106,12288 11107,12278 11108,12269 11110,12259 11112,12250 11114,12241 11117,12232 11121,12223 11125,12215 11129,12206 11134,12198 11139,12190 11145,12182 11151,12175 11157,12168 11164,12161 11171,12155 11178,12149 11186,12143 11194,12138 11202,12133 11210,12129 11219,12125 11228,12121 11237,12118 11246,12115 11255,12113 11265,12111 11274,12110 11283,12109 11293,12109 13925,12109 13925,12109 13935,12109 13944,12110 13954,12111 13964,12113 13973,12115 13983,12118 13992,12121 14001,12125 14010,12129 14018,12134 14027,12139 14035,12145 14042,12151 14050,12157 14057,12164 14064,12171 14070,12178 14076,12186 14081,12194 14087,12202 14091,12211 14096,12220 14099,12229 14103,12238 14105,12248 14108,12257 14110,12267 14111,12276 14112,12286 14112,12296 14113,13801 14113,13801 14113,13811 14112,13821 14111,13830 14109,13840 14107,13849 14104,13859 14101,13868 14097,13877 14093,13886 14088,13895 14083,13903 14077,13911 14071,13919 14065,13926 14058,13934 14051,13940 14044,13947 14036,13953 14028,13958 14020,13963 14011,13968 14002,13972 13993,13976 13984,13980 13974,13982 13965,13985 13955,13987 13946,13988 13936,13989 13926,13989 11294,13989 11294,13989 11284,13989 11274,13988 11265,13987 11255,13985 11246,13983 11236,13980 11227,13977 11218,13973 11209,13969 11200,13964 11192,13959 11184,13953 11176,13947 11169,13941 11161,13934 11155,13927 11148,13920 11142,13912 11137,13904 11132,13896 11127,13887 11123,13878 11119,13869 11115,13860 11113,13850 11110,13841 11108,13831 11107,13822 11106,13812 11106,13802 11106,12297 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11106,12297 L 11106,12297 11106,12288 11107,12278 11108,12269 11110,12259 11112,12250 11114,12241 11117,12232 11121,12223 11125,12215 11129,12206 11134,12198 11139,12190 11145,12182 11151,12175 11157,12168 11164,12161 11171,12155 11178,12149 11186,12143 11194,12138 11202,12133 11210,12129 11219,12125 11228,12121 11237,12118 11246,12115 11255,12113 11265,12111 11274,12110 11283,12109 11293,12109 13925,12109 13925,12109 13935,12109 13944,12110 13954,12111 13964,12113 13973,12115 13983,12118 13992,12121 14001,12125 14010,12129 14018,12134 14027,12139 14035,12145 14042,12151 14050,12157 14057,12164 14064,12171 14070,12178 14076,12186 14081,12194 14087,12202 14091,12211 14096,12220 14099,12229 14103,12238 14105,12248 14108,12257 14110,12267 14111,12276 14112,12286 14112,12296 14113,13801 14113,13801 14113,13811 14112,13821 14111,13830 14109,13840 14107,13849 14104,13859 14101,13868 14097,13877 14093,13886 14088,13895 14083,13903 14077,13911 14071,13919 14065,13926 14058,13934 14051,13940 14044,13947 14036,13953 14028,13958 14020,13963 14011,13968 14002,13972 13993,13976 13984,13980 13974,13982 13965,13985 13955,13987 13946,13988 13936,13989 13926,13989 11294,13989 11294,13989 11284,13989 11274,13988 11265,13987 11255,13985 11246,13983 11236,13980 11227,13977 11218,13973 11209,13969 11200,13964 11192,13959 11184,13953 11176,13947 11169,13941 11161,13934 11155,13927 11148,13920 11142,13912 11137,13904 11132,13896 11127,13887 11123,13878 11119,13869 11115,13860 11113,13850 11110,13841 11108,13831 11107,13822 11106,13812 11106,13802 11106,12297 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="11367" y="12957"><tspan fill="rgb(0,0,0)" stroke="none">提问与回答、</tspan></tspan><tspan class="TextPosition" x="11790" y="13413"><tspan fill="rgb(0,0,0)" stroke="none">问题关注</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id28">
         <rect class="BoundingBox" stroke="none" fill="none" x="10712" y="4589" width="395" height="10828"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 10730,4590 L 10730,15398 11106,15398"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id29">
         <rect class="BoundingBox" stroke="none" fill="none" x="11088" y="14440" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 11106,14646 L 11106,14646 11106,14637 11107,14627 11108,14618 11110,14608 11112,14599 11114,14590 11117,14581 11121,14572 11125,14564 11129,14555 11134,14547 11139,14539 11145,14531 11151,14524 11157,14517 11164,14510 11171,14504 11178,14498 11186,14492 11194,14487 11202,14482 11210,14478 11219,14474 11228,14470 11237,14467 11246,14464 11255,14462 11265,14460 11274,14459 11283,14458 11293,14458 13925,14458 13925,14458 13935,14458 13944,14459 13954,14460 13964,14462 13973,14464 13983,14467 13992,14470 14001,14474 14010,14478 14018,14483 14027,14488 14035,14494 14042,14500 14050,14506 14057,14513 14064,14520 14070,14527 14076,14535 14081,14543 14087,14551 14091,14560 14096,14569 14099,14578 14103,14587 14105,14597 14108,14606 14110,14616 14111,14625 14112,14635 14112,14645 14113,16150 14113,16150 14113,16160 14112,16170 14111,16179 14109,16189 14107,16198 14104,16208 14101,16217 14097,16226 14093,16235 14088,16244 14083,16252 14077,16260 14071,16268 14065,16275 14058,16283 14051,16289 14044,16296 14036,16302 14028,16307 14020,16312 14011,16317 14002,16321 13993,16325 13984,16329 13974,16331 13965,16334 13955,16336 13946,16337 13936,16338 13926,16338 11294,16338 11294,16338 11284,16338 11274,16337 11265,16336 11255,16334 11246,16332 11236,16329 11227,16326 11218,16322 11209,16318 11200,16313 11192,16308 11184,16302 11176,16296 11169,16290 11161,16283 11155,16276 11148,16269 11142,16261 11137,16253 11132,16245 11127,16236 11123,16227 11119,16218 11115,16209 11113,16199 11110,16190 11108,16180 11107,16171 11106,16161 11106,16151 11106,14646 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11106,14646 L 11106,14646 11106,14637 11107,14627 11108,14618 11110,14608 11112,14599 11114,14590 11117,14581 11121,14572 11125,14564 11129,14555 11134,14547 11139,14539 11145,14531 11151,14524 11157,14517 11164,14510 11171,14504 11178,14498 11186,14492 11194,14487 11202,14482 11210,14478 11219,14474 11228,14470 11237,14467 11246,14464 11255,14462 11265,14460 11274,14459 11283,14458 11293,14458 13925,14458 13925,14458 13935,14458 13944,14459 13954,14460 13964,14462 13973,14464 13983,14467 13992,14470 14001,14474 14010,14478 14018,14483 14027,14488 14035,14494 14042,14500 14050,14506 14057,14513 14064,14520 14070,14527 14076,14535 14081,14543 14087,14551 14091,14560 14096,14569 14099,14578 14103,14587 14105,14597 14108,14606 14110,14616 14111,14625 14112,14635 14112,14645 14113,16150 14113,16150 14113,16160 14112,16170 14111,16179 14109,16189 14107,16198 14104,16208 14101,16217 14097,16226 14093,16235 14088,16244 14083,16252 14077,16260 14071,16268 14065,16275 14058,16283 14051,16289 14044,16296 14036,16302 14028,16307 14020,16312 14011,16317 14002,16321 13993,16325 13984,16329 13974,16331 13965,16334 13955,16336 13946,16337 13936,16338 13926,16338 11294,16338 11294,16338 11284,16338 11274,16337 11265,16336 11255,16334 11246,16332 11236,16329 11227,16326 11218,16322 11209,16318 11200,16313 11192,16308 11184,16302 11176,16296 11169,16290 11161,16283 11155,16276 11148,16269 11142,16261 11137,16253 11132,16245 11127,16236 11123,16227 11119,16218 11115,16209 11113,16199 11110,16190 11108,16180 11107,16171 11106,16161 11106,16151 11106,14646 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="11367" y="15534"><tspan fill="rgb(0,0,0)" stroke="none">项目申请加入</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id30">
         <rect class="BoundingBox" stroke="none" fill="none" x="15036" y="2692" width="3796" height="1917"/>
         <path fill="rgb(143,170,220)" stroke="none" d="M 15054,2898 L 15054,2898 15054,2889 15055,2879 15056,2870 15058,2860 15060,2851 15062,2842 15065,2833 15069,2824 15073,2816 15077,2807 15082,2799 15087,2791 15093,2783 15099,2776 15105,2769 15112,2762 15119,2756 15126,2750 15134,2744 15142,2739 15150,2734 15158,2730 15167,2726 15176,2722 15185,2719 15194,2716 15203,2714 15213,2712 15222,2711 15231,2710 15241,2710 18625,2710 18625,2710 18635,2710 18644,2711 18654,2712 18664,2714 18673,2716 18683,2719 18692,2722 18701,2726 18710,2730 18718,2735 18727,2740 18735,2746 18742,2752 18750,2758 18757,2765 18764,2772 18770,2779 18776,2787 18781,2795 18787,2803 18791,2812 18796,2821 18799,2830 18803,2839 18805,2849 18808,2858 18810,2868 18811,2877 18812,2887 18812,2897 18813,4402 18813,4402 18813,4412 18812,4422 18811,4431 18809,4441 18807,4450 18804,4460 18801,4469 18797,4478 18793,4487 18788,4496 18783,4504 18777,4512 18771,4520 18765,4527 18758,4535 18751,4541 18744,4548 18736,4554 18728,4559 18720,4564 18711,4569 18702,4573 18693,4577 18684,4581 18674,4583 18665,4586 18655,4588 18646,4589 18636,4590 18626,4590 15242,4590 15242,4590 15232,4590 15222,4589 15213,4588 15203,4586 15194,4584 15184,4581 15175,4578 15166,4574 15157,4570 15148,4565 15140,4560 15132,4554 15124,4548 15117,4542 15109,4535 15103,4528 15096,4521 15090,4513 15085,4505 15080,4497 15075,4488 15071,4479 15067,4470 15063,4461 15061,4451 15058,4442 15056,4432 15055,4423 15054,4413 15054,4403 15054,2898 Z"/>
         <path fill="none" stroke="rgb(255,255,255)" stroke-width="35" stroke-linejoin="miter" d="M 15054,2898 L 15054,2898 15054,2889 15055,2879 15056,2870 15058,2860 15060,2851 15062,2842 15065,2833 15069,2824 15073,2816 15077,2807 15082,2799 15087,2791 15093,2783 15099,2776 15105,2769 15112,2762 15119,2756 15126,2750 15134,2744 15142,2739 15150,2734 15158,2730 15167,2726 15176,2722 15185,2719 15194,2716 15203,2714 15213,2712 15222,2711 15231,2710 15241,2710 18625,2710 18625,2710 18635,2710 18644,2711 18654,2712 18664,2714 18673,2716 18683,2719 18692,2722 18701,2726 18710,2730 18718,2735 18727,2740 18735,2746 18742,2752 18750,2758 18757,2765 18764,2772 18770,2779 18776,2787 18781,2795 18787,2803 18791,2812 18796,2821 18799,2830 18803,2839 18805,2849 18808,2858 18810,2868 18811,2877 18812,2887 18812,2897 18813,4402 18813,4402 18813,4412 18812,4422 18811,4431 18809,4441 18807,4450 18804,4460 18801,4469 18797,4478 18793,4487 18788,4496 18783,4504 18777,4512 18771,4520 18765,4527 18758,4535 18751,4541 18744,4548 18736,4554 18728,4559 18720,4564 18711,4569 18702,4573 18693,4577 18684,4581 18674,4583 18665,4586 18655,4588 18646,4589 18636,4590 18626,4590 15242,4590 15242,4590 15232,4590 15222,4589 15213,4588 15203,4586 15194,4584 15184,4581 15175,4578 15166,4574 15157,4570 15148,4565 15140,4560 15132,4554 15124,4548 15117,4542 15109,4535 15103,4528 15096,4521 15090,4513 15085,4505 15080,4497 15075,4488 15071,4479 15067,4470 15063,4461 15061,4451 15058,4442 15056,4432 15055,4423 15054,4413 15054,4403 15054,2898 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="494px" font-weight="700"><tspan class="TextPosition" x="15475" y="3543"><tspan fill="rgb(255,255,255)" stroke="none">智能推荐与关</tspan></tspan><tspan class="TextPosition" x="16713" y="4075"><tspan fill="rgb(255,255,255)" stroke="none">注</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id31">
         <rect class="BoundingBox" stroke="none" fill="none" x="15411" y="4590" width="395" height="1429"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 15429,4590 L 15429,6000 15805,6000"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id32">
         <rect class="BoundingBox" stroke="none" fill="none" x="15788" y="5042" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 15806,5248 L 15806,5248 15806,5239 15807,5229 15808,5220 15810,5210 15812,5201 15814,5192 15817,5183 15821,5174 15825,5166 15829,5157 15834,5149 15839,5141 15845,5133 15851,5126 15857,5119 15864,5112 15871,5106 15878,5100 15886,5094 15894,5089 15902,5084 15910,5080 15919,5076 15928,5072 15937,5069 15946,5066 15955,5064 15965,5062 15974,5061 15983,5060 15993,5060 18625,5060 18625,5060 18635,5060 18644,5061 18654,5062 18664,5064 18673,5066 18683,5069 18692,5072 18701,5076 18710,5080 18718,5085 18727,5090 18735,5096 18742,5102 18750,5108 18757,5115 18764,5122 18770,5129 18776,5137 18781,5145 18787,5153 18791,5162 18796,5171 18799,5180 18803,5189 18805,5199 18808,5208 18810,5218 18811,5227 18812,5237 18812,5247 18813,6752 18813,6752 18813,6762 18812,6772 18811,6781 18809,6791 18807,6800 18804,6810 18801,6819 18797,6828 18793,6837 18788,6846 18783,6854 18777,6862 18771,6870 18765,6877 18758,6885 18751,6891 18744,6898 18736,6904 18728,6909 18720,6914 18711,6919 18702,6923 18693,6927 18684,6931 18674,6933 18665,6936 18655,6938 18646,6939 18636,6940 18626,6940 15994,6940 15994,6940 15984,6940 15974,6939 15965,6938 15955,6936 15946,6934 15936,6931 15927,6928 15918,6924 15909,6920 15900,6915 15892,6910 15884,6904 15876,6898 15869,6892 15861,6885 15855,6878 15848,6871 15842,6863 15837,6855 15832,6847 15827,6838 15823,6829 15819,6820 15815,6811 15813,6801 15810,6792 15808,6782 15807,6773 15806,6763 15806,6753 15806,5248 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15806,5248 L 15806,5248 15806,5239 15807,5229 15808,5220 15810,5210 15812,5201 15814,5192 15817,5183 15821,5174 15825,5166 15829,5157 15834,5149 15839,5141 15845,5133 15851,5126 15857,5119 15864,5112 15871,5106 15878,5100 15886,5094 15894,5089 15902,5084 15910,5080 15919,5076 15928,5072 15937,5069 15946,5066 15955,5064 15965,5062 15974,5061 15983,5060 15993,5060 18625,5060 18625,5060 18635,5060 18644,5061 18654,5062 18664,5064 18673,5066 18683,5069 18692,5072 18701,5076 18710,5080 18718,5085 18727,5090 18735,5096 18742,5102 18750,5108 18757,5115 18764,5122 18770,5129 18776,5137 18781,5145 18787,5153 18791,5162 18796,5171 18799,5180 18803,5189 18805,5199 18808,5208 18810,5218 18811,5227 18812,5237 18812,5247 18813,6752 18813,6752 18813,6762 18812,6772 18811,6781 18809,6791 18807,6800 18804,6810 18801,6819 18797,6828 18793,6837 18788,6846 18783,6854 18777,6862 18771,6870 18765,6877 18758,6885 18751,6891 18744,6898 18736,6904 18728,6909 18720,6914 18711,6919 18702,6923 18693,6927 18684,6931 18674,6933 18665,6936 18655,6938 18646,6939 18636,6940 18626,6940 15994,6940 15994,6940 15984,6940 15974,6939 15965,6938 15955,6936 15946,6934 15936,6931 15927,6928 15918,6924 15909,6920 15900,6915 15892,6910 15884,6904 15876,6898 15869,6892 15861,6885 15855,6878 15848,6871 15842,6863 15837,6855 15832,6847 15827,6838 15823,6829 15819,6820 15815,6811 15813,6801 15810,6792 15808,6782 15807,6773 15806,6763 15806,6753 15806,5248 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="16067" y="5908"><tspan fill="rgb(0,0,0)" stroke="none">基于行为的内</tspan></tspan><tspan class="TextPosition" x="16702" y="6364"><tspan fill="rgb(0,0,0)" stroke="none">容推荐</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id33">
         <rect class="BoundingBox" stroke="none" fill="none" x="15411" y="4591" width="395" height="3778"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 15429,4591 L 15429,8350 15805,8350"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id34">
         <rect class="BoundingBox" stroke="none" fill="none" x="15788" y="7391" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 15806,7597 L 15806,7597 15806,7588 15807,7578 15808,7569 15810,7559 15812,7550 15814,7541 15817,7532 15821,7523 15825,7515 15829,7506 15834,7498 15839,7490 15845,7482 15851,7475 15857,7468 15864,7461 15871,7455 15878,7449 15886,7443 15894,7438 15902,7433 15910,7429 15919,7425 15928,7421 15937,7418 15946,7415 15955,7413 15965,7411 15974,7410 15983,7409 15993,7409 18625,7409 18625,7409 18635,7409 18644,7410 18654,7411 18664,7413 18673,7415 18683,7418 18692,7421 18701,7425 18710,7429 18718,7434 18727,7439 18735,7445 18742,7451 18750,7457 18757,7464 18764,7471 18770,7478 18776,7486 18781,7494 18787,7502 18791,7511 18796,7520 18799,7529 18803,7538 18805,7548 18808,7557 18810,7567 18811,7576 18812,7586 18812,7596 18813,9101 18813,9101 18813,9111 18812,9121 18811,9130 18809,9140 18807,9149 18804,9159 18801,9168 18797,9177 18793,9186 18788,9195 18783,9203 18777,9211 18771,9219 18765,9226 18758,9234 18751,9240 18744,9247 18736,9253 18728,9258 18720,9263 18711,9268 18702,9272 18693,9276 18684,9280 18674,9282 18665,9285 18655,9287 18646,9288 18636,9289 18626,9289 15994,9289 15994,9289 15984,9289 15974,9288 15965,9287 15955,9285 15946,9283 15936,9280 15927,9277 15918,9273 15909,9269 15900,9264 15892,9259 15884,9253 15876,9247 15869,9241 15861,9234 15855,9227 15848,9220 15842,9212 15837,9204 15832,9196 15827,9187 15823,9178 15819,9169 15815,9160 15813,9150 15810,9141 15808,9131 15807,9122 15806,9112 15806,9102 15806,7597 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15806,7597 L 15806,7597 15806,7588 15807,7578 15808,7569 15810,7559 15812,7550 15814,7541 15817,7532 15821,7523 15825,7515 15829,7506 15834,7498 15839,7490 15845,7482 15851,7475 15857,7468 15864,7461 15871,7455 15878,7449 15886,7443 15894,7438 15902,7433 15910,7429 15919,7425 15928,7421 15937,7418 15946,7415 15955,7413 15965,7411 15974,7410 15983,7409 15993,7409 18625,7409 18625,7409 18635,7409 18644,7410 18654,7411 18664,7413 18673,7415 18683,7418 18692,7421 18701,7425 18710,7429 18718,7434 18727,7439 18735,7445 18742,7451 18750,7457 18757,7464 18764,7471 18770,7478 18776,7486 18781,7494 18787,7502 18791,7511 18796,7520 18799,7529 18803,7538 18805,7548 18808,7557 18810,7567 18811,7576 18812,7586 18812,7596 18813,9101 18813,9101 18813,9111 18812,9121 18811,9130 18809,9140 18807,9149 18804,9159 18801,9168 18797,9177 18793,9186 18788,9195 18783,9203 18777,9211 18771,9219 18765,9226 18758,9234 18751,9240 18744,9247 18736,9253 18728,9258 18720,9263 18711,9268 18702,9272 18693,9276 18684,9280 18674,9282 18665,9285 18655,9287 18646,9288 18636,9289 18626,9289 15994,9289 15994,9289 15984,9289 15974,9288 15965,9287 15955,9285 15946,9283 15936,9280 15927,9277 15918,9273 15909,9269 15900,9264 15892,9259 15884,9253 15876,9247 15869,9241 15861,9234 15855,9227 15848,9220 15842,9212 15837,9204 15832,9196 15827,9187 15823,9178 15819,9169 15815,9160 15813,9150 15810,9141 15808,9131 15807,9122 15806,9112 15806,9102 15806,7597 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="16067" y="8257"><tspan fill="rgb(0,0,0)" stroke="none">关注人状态展</tspan></tspan><tspan class="TextPosition" x="16490" y="8713"><tspan fill="rgb(0,0,0)" stroke="none">示与提醒</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id35">
         <rect class="BoundingBox" stroke="none" fill="none" x="15411" y="4591" width="395" height="6128"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 15429,4591 L 15429,10700 15805,10700"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id36">
         <rect class="BoundingBox" stroke="none" fill="none" x="15788" y="9741" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 15806,9947 L 15806,9947 15806,9938 15807,9928 15808,9919 15810,9909 15812,9900 15814,9891 15817,9882 15821,9873 15825,9865 15829,9856 15834,9848 15839,9840 15845,9832 15851,9825 15857,9818 15864,9811 15871,9805 15878,9799 15886,9793 15894,9788 15902,9783 15910,9779 15919,9775 15928,9771 15937,9768 15946,9765 15955,9763 15965,9761 15974,9760 15983,9759 15993,9759 18625,9759 18625,9759 18635,9759 18644,9760 18654,9761 18664,9763 18673,9765 18683,9768 18692,9771 18701,9775 18710,9779 18718,9784 18727,9789 18735,9795 18742,9801 18750,9807 18757,9814 18764,9821 18770,9828 18776,9836 18781,9844 18787,9852 18791,9861 18796,9870 18799,9879 18803,9888 18805,9898 18808,9907 18810,9917 18811,9926 18812,9936 18812,9946 18813,11451 18813,11451 18813,11461 18812,11471 18811,11480 18809,11490 18807,11499 18804,11509 18801,11518 18797,11527 18793,11536 18788,11545 18783,11553 18777,11561 18771,11569 18765,11576 18758,11584 18751,11590 18744,11597 18736,11603 18728,11608 18720,11613 18711,11618 18702,11622 18693,11626 18684,11630 18674,11632 18665,11635 18655,11637 18646,11638 18636,11639 18626,11639 15994,11639 15994,11639 15984,11639 15974,11638 15965,11637 15955,11635 15946,11633 15936,11630 15927,11627 15918,11623 15909,11619 15900,11614 15892,11609 15884,11603 15876,11597 15869,11591 15861,11584 15855,11577 15848,11570 15842,11562 15837,11554 15832,11546 15827,11537 15823,11528 15819,11519 15815,11510 15813,11500 15810,11491 15808,11481 15807,11472 15806,11462 15806,11452 15806,9947 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15806,9947 L 15806,9947 15806,9938 15807,9928 15808,9919 15810,9909 15812,9900 15814,9891 15817,9882 15821,9873 15825,9865 15829,9856 15834,9848 15839,9840 15845,9832 15851,9825 15857,9818 15864,9811 15871,9805 15878,9799 15886,9793 15894,9788 15902,9783 15910,9779 15919,9775 15928,9771 15937,9768 15946,9765 15955,9763 15965,9761 15974,9760 15983,9759 15993,9759 18625,9759 18625,9759 18635,9759 18644,9760 18654,9761 18664,9763 18673,9765 18683,9768 18692,9771 18701,9775 18710,9779 18718,9784 18727,9789 18735,9795 18742,9801 18750,9807 18757,9814 18764,9821 18770,9828 18776,9836 18781,9844 18787,9852 18791,9861 18796,9870 18799,9879 18803,9888 18805,9898 18808,9907 18810,9917 18811,9926 18812,9936 18812,9946 18813,11451 18813,11451 18813,11461 18812,11471 18811,11480 18809,11490 18807,11499 18804,11509 18801,11518 18797,11527 18793,11536 18788,11545 18783,11553 18777,11561 18771,11569 18765,11576 18758,11584 18751,11590 18744,11597 18736,11603 18728,11608 18720,11613 18711,11618 18702,11622 18693,11626 18684,11630 18674,11632 18665,11635 18655,11637 18646,11638 18636,11639 18626,11639 15994,11639 15994,11639 15984,11639 15974,11638 15965,11637 15955,11635 15946,11633 15936,11630 15927,11627 15918,11623 15909,11619 15900,11614 15892,11609 15884,11603 15876,11597 15869,11591 15861,11584 15855,11577 15848,11570 15842,11562 15837,11554 15832,11546 15827,11537 15823,11528 15819,11519 15815,11510 15813,11500 15810,11491 15808,11481 15807,11472 15806,11462 15806,11452 15806,9947 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="16067" y="10835"><tspan fill="rgb(0,0,0)" stroke="none">邮件推送通知</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id37">
         <rect class="BoundingBox" stroke="none" fill="none" x="19735" y="2692" width="3796" height="1917"/>
         <path fill="rgb(143,170,220)" stroke="none" d="M 19753,2898 L 19753,2898 19753,2889 19754,2879 19755,2870 19757,2860 19759,2851 19761,2842 19764,2833 19768,2824 19772,2816 19776,2807 19781,2799 19786,2791 19792,2783 19798,2776 19804,2769 19811,2762 19818,2756 19825,2750 19833,2744 19841,2739 19849,2734 19857,2730 19866,2726 19875,2722 19884,2719 19893,2716 19902,2714 19912,2712 19921,2711 19930,2710 19940,2710 23324,2710 23324,2710 23334,2710 23343,2711 23353,2712 23363,2714 23372,2716 23382,2719 23391,2722 23400,2726 23409,2730 23417,2735 23426,2740 23434,2746 23441,2752 23449,2758 23456,2765 23463,2772 23469,2779 23475,2787 23480,2795 23486,2803 23490,2812 23495,2821 23498,2830 23502,2839 23504,2849 23507,2858 23509,2868 23510,2877 23511,2887 23511,2897 23512,4402 23512,4402 23512,4412 23511,4422 23510,4431 23508,4441 23506,4450 23503,4460 23500,4469 23496,4478 23492,4487 23487,4496 23482,4504 23476,4512 23470,4520 23464,4527 23457,4535 23450,4541 23443,4548 23435,4554 23427,4559 23419,4564 23410,4569 23401,4573 23392,4577 23383,4581 23373,4583 23364,4586 23354,4588 23345,4589 23335,4590 23325,4590 19941,4590 19941,4590 19931,4590 19921,4589 19912,4588 19902,4586 19893,4584 19883,4581 19874,4578 19865,4574 19856,4570 19847,4565 19839,4560 19831,4554 19823,4548 19816,4542 19808,4535 19802,4528 19795,4521 19789,4513 19784,4505 19779,4497 19774,4488 19770,4479 19766,4470 19762,4461 19760,4451 19757,4442 19755,4432 19754,4423 19753,4413 19753,4403 19753,2898 Z"/>
         <path fill="none" stroke="rgb(255,255,255)" stroke-width="35" stroke-linejoin="miter" d="M 19753,2898 L 19753,2898 19753,2889 19754,2879 19755,2870 19757,2860 19759,2851 19761,2842 19764,2833 19768,2824 19772,2816 19776,2807 19781,2799 19786,2791 19792,2783 19798,2776 19804,2769 19811,2762 19818,2756 19825,2750 19833,2744 19841,2739 19849,2734 19857,2730 19866,2726 19875,2722 19884,2719 19893,2716 19902,2714 19912,2712 19921,2711 19930,2710 19940,2710 23324,2710 23324,2710 23334,2710 23343,2711 23353,2712 23363,2714 23372,2716 23382,2719 23391,2722 23400,2726 23409,2730 23417,2735 23426,2740 23434,2746 23441,2752 23449,2758 23456,2765 23463,2772 23469,2779 23475,2787 23480,2795 23486,2803 23490,2812 23495,2821 23498,2830 23502,2839 23504,2849 23507,2858 23509,2868 23510,2877 23511,2887 23511,2897 23512,4402 23512,4402 23512,4412 23511,4422 23510,4431 23508,4441 23506,4450 23503,4460 23500,4469 23496,4478 23492,4487 23487,4496 23482,4504 23476,4512 23470,4520 23464,4527 23457,4535 23450,4541 23443,4548 23435,4554 23427,4559 23419,4564 23410,4569 23401,4573 23392,4577 23383,4581 23373,4583 23364,4586 23354,4588 23345,4589 23335,4590 23325,4590 19941,4590 19941,4590 19931,4590 19921,4589 19912,4588 19902,4586 19893,4584 19883,4581 19874,4578 19865,4574 19856,4570 19847,4565 19839,4560 19831,4554 19823,4548 19816,4542 19808,4535 19802,4528 19795,4521 19789,4513 19784,4505 19779,4497 19774,4488 19770,4479 19766,4470 19762,4461 19760,4451 19757,4442 19755,4432 19754,4423 19753,4413 19753,4403 19753,2898 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="20174" y="3543"><tspan fill="rgb(255,255,255)" stroke="none">智能文献管理</tspan></tspan><tspan class="TextPosition" x="20917" y="4075"><tspan fill="rgb(255,255,255)" stroke="none">与学习</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id38">
         <rect class="BoundingBox" stroke="none" fill="none" x="20110" y="4590" width="395" height="1429"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 20128,4590 L 20128,6000 20504,6000"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id39">
         <rect class="BoundingBox" stroke="none" fill="none" x="20487" y="5042" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 20505,5248 L 20505,5248 20505,5239 20506,5229 20507,5220 20509,5210 20511,5201 20513,5192 20516,5183 20520,5174 20524,5166 20528,5157 20533,5149 20538,5141 20544,5133 20550,5126 20556,5119 20563,5112 20570,5106 20577,5100 20585,5094 20593,5089 20601,5084 20609,5080 20618,5076 20627,5072 20636,5069 20645,5066 20654,5064 20664,5062 20673,5061 20682,5060 20692,5060 23324,5060 23324,5060 23334,5060 23343,5061 23353,5062 23363,5064 23372,5066 23382,5069 23391,5072 23400,5076 23409,5080 23417,5085 23426,5090 23434,5096 23441,5102 23449,5108 23456,5115 23463,5122 23469,5129 23475,5137 23480,5145 23486,5153 23490,5162 23495,5171 23498,5180 23502,5189 23504,5199 23507,5208 23509,5218 23510,5227 23511,5237 23511,5247 23512,6752 23512,6752 23512,6762 23511,6772 23510,6781 23508,6791 23506,6800 23503,6810 23500,6819 23496,6828 23492,6837 23487,6846 23482,6854 23476,6862 23470,6870 23464,6877 23457,6885 23450,6891 23443,6898 23435,6904 23427,6909 23419,6914 23410,6919 23401,6923 23392,6927 23383,6931 23373,6933 23364,6936 23354,6938 23345,6939 23335,6940 23325,6940 20693,6940 20693,6940 20683,6940 20673,6939 20664,6938 20654,6936 20645,6934 20635,6931 20626,6928 20617,6924 20608,6920 20599,6915 20591,6910 20583,6904 20575,6898 20568,6892 20560,6885 20554,6878 20547,6871 20541,6863 20536,6855 20531,6847 20526,6838 20522,6829 20518,6820 20514,6811 20512,6801 20509,6792 20507,6782 20506,6773 20505,6763 20505,6753 20505,5248 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20505,5248 L 20505,5248 20505,5239 20506,5229 20507,5220 20509,5210 20511,5201 20513,5192 20516,5183 20520,5174 20524,5166 20528,5157 20533,5149 20538,5141 20544,5133 20550,5126 20556,5119 20563,5112 20570,5106 20577,5100 20585,5094 20593,5089 20601,5084 20609,5080 20618,5076 20627,5072 20636,5069 20645,5066 20654,5064 20664,5062 20673,5061 20682,5060 20692,5060 23324,5060 23324,5060 23334,5060 23343,5061 23353,5062 23363,5064 23372,5066 23382,5069 23391,5072 23400,5076 23409,5080 23417,5085 23426,5090 23434,5096 23441,5102 23449,5108 23456,5115 23463,5122 23469,5129 23475,5137 23480,5145 23486,5153 23490,5162 23495,5171 23498,5180 23502,5189 23504,5199 23507,5208 23509,5218 23510,5227 23511,5237 23511,5247 23512,6752 23512,6752 23512,6762 23511,6772 23510,6781 23508,6791 23506,6800 23503,6810 23500,6819 23496,6828 23492,6837 23487,6846 23482,6854 23476,6862 23470,6870 23464,6877 23457,6885 23450,6891 23443,6898 23435,6904 23427,6909 23419,6914 23410,6919 23401,6923 23392,6927 23383,6931 23373,6933 23364,6936 23354,6938 23345,6939 23335,6940 23325,6940 20693,6940 20693,6940 20683,6940 20673,6939 20664,6938 20654,6936 20645,6934 20635,6931 20626,6928 20617,6924 20608,6920 20599,6915 20591,6910 20583,6904 20575,6898 20568,6892 20560,6885 20554,6878 20547,6871 20541,6863 20536,6855 20531,6847 20526,6838 20522,6829 20518,6820 20514,6811 20512,6801 20509,6792 20507,6782 20506,6773 20505,6763 20505,6753 20505,5248 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="20766" y="5680"><tspan fill="rgb(0,0,0)" stroke="none">文献收集（手</tspan></tspan><tspan class="TextPosition" x="21211" y="6136"><tspan fill="rgb(0,0,0)" stroke="none">动上传 </tspan><tspan font-family="等线" fill="rgb(0,0,0)" stroke="none">/ </tspan></tspan><tspan class="TextPosition" x="20736" y="6592"><tspan font-family="等线" fill="rgb(0,0,0)" stroke="none">arXiv </tspan><tspan fill="rgb(0,0,0)" stroke="none">订阅）</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id40">
         <rect class="BoundingBox" stroke="none" fill="none" x="20110" y="4591" width="395" height="3778"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 20128,4591 L 20128,8350 20504,8350"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id41">
         <rect class="BoundingBox" stroke="none" fill="none" x="20487" y="7391" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 20505,7597 L 20505,7597 20505,7588 20506,7578 20507,7569 20509,7559 20511,7550 20513,7541 20516,7532 20520,7523 20524,7515 20528,7506 20533,7498 20538,7490 20544,7482 20550,7475 20556,7468 20563,7461 20570,7455 20577,7449 20585,7443 20593,7438 20601,7433 20609,7429 20618,7425 20627,7421 20636,7418 20645,7415 20654,7413 20664,7411 20673,7410 20682,7409 20692,7409 23324,7409 23324,7409 23334,7409 23343,7410 23353,7411 23363,7413 23372,7415 23382,7418 23391,7421 23400,7425 23409,7429 23417,7434 23426,7439 23434,7445 23441,7451 23449,7457 23456,7464 23463,7471 23469,7478 23475,7486 23480,7494 23486,7502 23490,7511 23495,7520 23498,7529 23502,7538 23504,7548 23507,7557 23509,7567 23510,7576 23511,7586 23511,7596 23512,9101 23512,9101 23512,9111 23511,9121 23510,9130 23508,9140 23506,9149 23503,9159 23500,9168 23496,9177 23492,9186 23487,9195 23482,9203 23476,9211 23470,9219 23464,9226 23457,9234 23450,9240 23443,9247 23435,9253 23427,9258 23419,9263 23410,9268 23401,9272 23392,9276 23383,9280 23373,9282 23364,9285 23354,9287 23345,9288 23335,9289 23325,9289 20693,9289 20693,9289 20683,9289 20673,9288 20664,9287 20654,9285 20645,9283 20635,9280 20626,9277 20617,9273 20608,9269 20599,9264 20591,9259 20583,9253 20575,9247 20568,9241 20560,9234 20554,9227 20547,9220 20541,9212 20536,9204 20531,9196 20526,9187 20522,9178 20518,9169 20514,9160 20512,9150 20509,9141 20507,9131 20506,9122 20505,9112 20505,9102 20505,7597 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20505,7597 L 20505,7597 20505,7588 20506,7578 20507,7569 20509,7559 20511,7550 20513,7541 20516,7532 20520,7523 20524,7515 20528,7506 20533,7498 20538,7490 20544,7482 20550,7475 20556,7468 20563,7461 20570,7455 20577,7449 20585,7443 20593,7438 20601,7433 20609,7429 20618,7425 20627,7421 20636,7418 20645,7415 20654,7413 20664,7411 20673,7410 20682,7409 20692,7409 23324,7409 23324,7409 23334,7409 23343,7410 23353,7411 23363,7413 23372,7415 23382,7418 23391,7421 23400,7425 23409,7429 23417,7434 23426,7439 23434,7445 23441,7451 23449,7457 23456,7464 23463,7471 23469,7478 23475,7486 23480,7494 23486,7502 23490,7511 23495,7520 23498,7529 23502,7538 23504,7548 23507,7557 23509,7567 23510,7576 23511,7586 23511,7596 23512,9101 23512,9101 23512,9111 23511,9121 23510,9130 23508,9140 23506,9149 23503,9159 23500,9168 23496,9177 23492,9186 23487,9195 23482,9203 23476,9211 23470,9219 23464,9226 23457,9234 23450,9240 23443,9247 23435,9253 23427,9258 23419,9263 23410,9268 23401,9272 23392,9276 23383,9280 23373,9282 23364,9285 23354,9287 23345,9288 23335,9289 23325,9289 20693,9289 20693,9289 20683,9289 20673,9288 20664,9287 20654,9285 20645,9283 20635,9280 20626,9277 20617,9273 20608,9269 20599,9264 20591,9259 20583,9253 20575,9247 20568,9241 20560,9234 20554,9227 20547,9220 20541,9212 20536,9204 20531,9196 20526,9187 20522,9178 20518,9169 20514,9160 20512,9150 20509,9141 20507,9131 20506,9122 20505,9112 20505,9102 20505,7597 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="20766" y="8257"><tspan fill="rgb(0,0,0)" stroke="none">元数据提取与</tspan></tspan><tspan class="TextPosition" x="21612" y="8713"><tspan fill="rgb(0,0,0)" stroke="none">去重</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id42">
         <rect class="BoundingBox" stroke="none" fill="none" x="20110" y="4591" width="395" height="6128"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 20128,4591 L 20128,10700 20504,10700"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id43">
         <rect class="BoundingBox" stroke="none" fill="none" x="20487" y="9741" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 20505,9947 L 20505,9947 20505,9938 20506,9928 20507,9919 20509,9909 20511,9900 20513,9891 20516,9882 20520,9873 20524,9865 20528,9856 20533,9848 20538,9840 20544,9832 20550,9825 20556,9818 20563,9811 20570,9805 20577,9799 20585,9793 20593,9788 20601,9783 20609,9779 20618,9775 20627,9771 20636,9768 20645,9765 20654,9763 20664,9761 20673,9760 20682,9759 20692,9759 23324,9759 23324,9759 23334,9759 23343,9760 23353,9761 23363,9763 23372,9765 23382,9768 23391,9771 23400,9775 23409,9779 23417,9784 23426,9789 23434,9795 23441,9801 23449,9807 23456,9814 23463,9821 23469,9828 23475,9836 23480,9844 23486,9852 23490,9861 23495,9870 23498,9879 23502,9888 23504,9898 23507,9907 23509,9917 23510,9926 23511,9936 23511,9946 23512,11451 23512,11451 23512,11461 23511,11471 23510,11480 23508,11490 23506,11499 23503,11509 23500,11518 23496,11527 23492,11536 23487,11545 23482,11553 23476,11561 23470,11569 23464,11576 23457,11584 23450,11590 23443,11597 23435,11603 23427,11608 23419,11613 23410,11618 23401,11622 23392,11626 23383,11630 23373,11632 23364,11635 23354,11637 23345,11638 23335,11639 23325,11639 20693,11639 20693,11639 20683,11639 20673,11638 20664,11637 20654,11635 20645,11633 20635,11630 20626,11627 20617,11623 20608,11619 20599,11614 20591,11609 20583,11603 20575,11597 20568,11591 20560,11584 20554,11577 20547,11570 20541,11562 20536,11554 20531,11546 20526,11537 20522,11528 20518,11519 20514,11510 20512,11500 20509,11491 20507,11481 20506,11472 20505,11462 20505,11452 20505,9947 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20505,9947 L 20505,9947 20505,9938 20506,9928 20507,9919 20509,9909 20511,9900 20513,9891 20516,9882 20520,9873 20524,9865 20528,9856 20533,9848 20538,9840 20544,9832 20550,9825 20556,9818 20563,9811 20570,9805 20577,9799 20585,9793 20593,9788 20601,9783 20609,9779 20618,9775 20627,9771 20636,9768 20645,9765 20654,9763 20664,9761 20673,9760 20682,9759 20692,9759 23324,9759 23324,9759 23334,9759 23343,9760 23353,9761 23363,9763 23372,9765 23382,9768 23391,9771 23400,9775 23409,9779 23417,9784 23426,9789 23434,9795 23441,9801 23449,9807 23456,9814 23463,9821 23469,9828 23475,9836 23480,9844 23486,9852 23490,9861 23495,9870 23498,9879 23502,9888 23504,9898 23507,9907 23509,9917 23510,9926 23511,9936 23511,9946 23512,11451 23512,11451 23512,11461 23511,11471 23510,11480 23508,11490 23506,11499 23503,11509 23500,11518 23496,11527 23492,11536 23487,11545 23482,11553 23476,11561 23470,11569 23464,11576 23457,11584 23450,11590 23443,11597 23435,11603 23427,11608 23419,11613 23410,11618 23401,11622 23392,11626 23383,11630 23373,11632 23364,11635 23354,11637 23345,11638 23335,11639 23325,11639 20693,11639 20693,11639 20683,11639 20673,11638 20664,11637 20654,11635 20645,11633 20635,11630 20626,11627 20617,11623 20608,11619 20599,11614 20591,11609 20583,11603 20575,11597 20568,11591 20560,11584 20554,11577 20547,11570 20541,11562 20536,11554 20531,11546 20526,11537 20522,11528 20518,11519 20514,11510 20512,11500 20509,11491 20507,11481 20506,11472 20505,11462 20505,11452 20505,9947 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="20766" y="10607"><tspan fill="rgb(0,0,0)" stroke="none">分类管理与批</tspan></tspan><tspan class="TextPosition" x="21401" y="11063"><tspan fill="rgb(0,0,0)" stroke="none">注笔记</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id44">
         <rect class="BoundingBox" stroke="none" fill="none" x="20110" y="4590" width="395" height="8477"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 20128,4590 L 20128,13048 20504,13048"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id45">
         <rect class="BoundingBox" stroke="none" fill="none" x="20487" y="12091" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 20505,12297 L 20505,12297 20505,12288 20506,12278 20507,12269 20509,12259 20511,12250 20513,12241 20516,12232 20520,12223 20524,12215 20528,12206 20533,12198 20538,12190 20544,12182 20550,12175 20556,12168 20563,12161 20570,12155 20577,12149 20585,12143 20593,12138 20601,12133 20609,12129 20618,12125 20627,12121 20636,12118 20645,12115 20654,12113 20664,12111 20673,12110 20682,12109 20692,12109 23324,12109 23324,12109 23334,12109 23343,12110 23353,12111 23363,12113 23372,12115 23382,12118 23391,12121 23400,12125 23409,12129 23417,12134 23426,12139 23434,12145 23441,12151 23449,12157 23456,12164 23463,12171 23469,12178 23475,12186 23480,12194 23486,12202 23490,12211 23495,12220 23498,12229 23502,12238 23504,12248 23507,12257 23509,12267 23510,12276 23511,12286 23511,12296 23512,13801 23512,13801 23512,13811 23511,13821 23510,13830 23508,13840 23506,13849 23503,13859 23500,13868 23496,13877 23492,13886 23487,13895 23482,13903 23476,13911 23470,13919 23464,13926 23457,13934 23450,13940 23443,13947 23435,13953 23427,13958 23419,13963 23410,13968 23401,13972 23392,13976 23383,13980 23373,13982 23364,13985 23354,13987 23345,13988 23335,13989 23325,13989 20693,13989 20693,13989 20683,13989 20673,13988 20664,13987 20654,13985 20645,13983 20635,13980 20626,13977 20617,13973 20608,13969 20599,13964 20591,13959 20583,13953 20575,13947 20568,13941 20560,13934 20554,13927 20547,13920 20541,13912 20536,13904 20531,13896 20526,13887 20522,13878 20518,13869 20514,13860 20512,13850 20509,13841 20507,13831 20506,13822 20505,13812 20505,13802 20505,12297 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20505,12297 L 20505,12297 20505,12288 20506,12278 20507,12269 20509,12259 20511,12250 20513,12241 20516,12232 20520,12223 20524,12215 20528,12206 20533,12198 20538,12190 20544,12182 20550,12175 20556,12168 20563,12161 20570,12155 20577,12149 20585,12143 20593,12138 20601,12133 20609,12129 20618,12125 20627,12121 20636,12118 20645,12115 20654,12113 20664,12111 20673,12110 20682,12109 20692,12109 23324,12109 23324,12109 23334,12109 23343,12110 23353,12111 23363,12113 23372,12115 23382,12118 23391,12121 23400,12125 23409,12129 23417,12134 23426,12139 23434,12145 23441,12151 23449,12157 23456,12164 23463,12171 23469,12178 23475,12186 23480,12194 23486,12202 23490,12211 23495,12220 23498,12229 23502,12238 23504,12248 23507,12257 23509,12267 23510,12276 23511,12286 23511,12296 23512,13801 23512,13801 23512,13811 23511,13821 23510,13830 23508,13840 23506,13849 23503,13859 23500,13868 23496,13877 23492,13886 23487,13895 23482,13903 23476,13911 23470,13919 23464,13926 23457,13934 23450,13940 23443,13947 23435,13953 23427,13958 23419,13963 23410,13968 23401,13972 23392,13976 23383,13980 23373,13982 23364,13985 23354,13987 23345,13988 23335,13989 23325,13989 20693,13989 20693,13989 20683,13989 20673,13988 20664,13987 20654,13985 20645,13983 20635,13980 20626,13977 20617,13973 20608,13969 20599,13964 20591,13959 20583,13953 20575,13947 20568,13941 20560,13934 20554,13927 20547,13920 20541,13912 20536,13904 20531,13896 20526,13887 20522,13878 20518,13869 20514,13860 20512,13850 20509,13841 20507,13831 20506,13822 20505,13812 20505,13802 20505,12297 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="等线" font-size="423px" font-weight="400"><tspan class="TextPosition" x="20866" y="12957"><tspan fill="rgb(0,0,0)" stroke="none">AI </tspan><tspan font-family="DejaVu Sans, sans-serif" fill="rgb(0,0,0)" stroke="none">摘要、笔</tspan></tspan><tspan class="TextPosition" x="20766" y="13413"><tspan font-family="DejaVu Sans, sans-serif" fill="rgb(0,0,0)" stroke="none">记关联、高亮</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id46">
         <rect class="BoundingBox" stroke="none" fill="none" x="20110" y="4589" width="395" height="10828"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 20128,4590 L 20128,15398 20504,15398"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id47">
         <rect class="BoundingBox" stroke="none" fill="none" x="20487" y="14440" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 20505,14646 L 20505,14646 20505,14637 20506,14627 20507,14618 20509,14608 20511,14599 20513,14590 20516,14581 20520,14572 20524,14564 20528,14555 20533,14547 20538,14539 20544,14531 20550,14524 20556,14517 20563,14510 20570,14504 20577,14498 20585,14492 20593,14487 20601,14482 20609,14478 20618,14474 20627,14470 20636,14467 20645,14464 20654,14462 20664,14460 20673,14459 20682,14458 20692,14458 23324,14458 23324,14458 23334,14458 23343,14459 23353,14460 23363,14462 23372,14464 23382,14467 23391,14470 23400,14474 23409,14478 23417,14483 23426,14488 23434,14494 23441,14500 23449,14506 23456,14513 23463,14520 23469,14527 23475,14535 23480,14543 23486,14551 23490,14560 23495,14569 23498,14578 23502,14587 23504,14597 23507,14606 23509,14616 23510,14625 23511,14635 23511,14645 23512,16150 23512,16150 23512,16160 23511,16170 23510,16179 23508,16189 23506,16198 23503,16208 23500,16217 23496,16226 23492,16235 23487,16244 23482,16252 23476,16260 23470,16268 23464,16275 23457,16283 23450,16289 23443,16296 23435,16302 23427,16307 23419,16312 23410,16317 23401,16321 23392,16325 23383,16329 23373,16331 23364,16334 23354,16336 23345,16337 23335,16338 23325,16338 20693,16338 20693,16338 20683,16338 20673,16337 20664,16336 20654,16334 20645,16332 20635,16329 20626,16326 20617,16322 20608,16318 20599,16313 20591,16308 20583,16302 20575,16296 20568,16290 20560,16283 20554,16276 20547,16269 20541,16261 20536,16253 20531,16245 20526,16236 20522,16227 20518,16218 20514,16209 20512,16199 20509,16190 20507,16180 20506,16171 20505,16161 20505,16151 20505,14646 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20505,14646 L 20505,14646 20505,14637 20506,14627 20507,14618 20509,14608 20511,14599 20513,14590 20516,14581 20520,14572 20524,14564 20528,14555 20533,14547 20538,14539 20544,14531 20550,14524 20556,14517 20563,14510 20570,14504 20577,14498 20585,14492 20593,14487 20601,14482 20609,14478 20618,14474 20627,14470 20636,14467 20645,14464 20654,14462 20664,14460 20673,14459 20682,14458 20692,14458 23324,14458 23324,14458 23334,14458 23343,14459 23353,14460 23363,14462 23372,14464 23382,14467 23391,14470 23400,14474 23409,14478 23417,14483 23426,14488 23434,14494 23441,14500 23449,14506 23456,14513 23463,14520 23469,14527 23475,14535 23480,14543 23486,14551 23490,14560 23495,14569 23498,14578 23502,14587 23504,14597 23507,14606 23509,14616 23510,14625 23511,14635 23511,14645 23512,16150 23512,16150 23512,16160 23511,16170 23510,16179 23508,16189 23506,16198 23503,16208 23500,16217 23496,16226 23492,16235 23487,16244 23482,16252 23476,16260 23470,16268 23464,16275 23457,16283 23450,16289 23443,16296 23435,16302 23427,16307 23419,16312 23410,16317 23401,16321 23392,16325 23383,16329 23373,16331 23364,16334 23354,16336 23345,16337 23335,16338 23325,16338 20693,16338 20693,16338 20683,16338 20673,16337 20664,16336 20654,16334 20645,16332 20635,16329 20626,16326 20617,16322 20608,16318 20599,16313 20591,16308 20583,16302 20575,16296 20568,16290 20560,16283 20554,16276 20547,16269 20541,16261 20536,16253 20531,16245 20526,16236 20522,16227 20518,16218 20514,16209 20512,16199 20509,16190 20507,16180 20506,16171 20505,16161 20505,16151 20505,14646 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="20766" y="15078"><tspan fill="rgb(0,0,0)" stroke="none">技术趋势分析</tspan></tspan><tspan class="TextPosition" x="20815" y="15534"><tspan fill="rgb(0,0,0)" stroke="none">（</tspan><tspan font-family="等线" fill="rgb(0,0,0)" stroke="none">AI </tspan><tspan fill="rgb(0,0,0)" stroke="none">生成报</tspan></tspan><tspan class="TextPosition" x="21612" y="15990"><tspan fill="rgb(0,0,0)" stroke="none">告）</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id48">
         <rect class="BoundingBox" stroke="none" fill="none" x="24434" y="2692" width="3796" height="1917"/>
         <path fill="rgb(173,185,202)" stroke="none" d="M 24452,2898 L 24452,2898 24452,2889 24453,2879 24454,2870 24456,2860 24458,2851 24460,2842 24463,2833 24467,2824 24471,2816 24475,2807 24480,2799 24485,2791 24491,2783 24497,2776 24503,2769 24510,2762 24517,2756 24524,2750 24532,2744 24540,2739 24548,2734 24556,2730 24565,2726 24574,2722 24583,2719 24592,2716 24601,2714 24611,2712 24620,2711 24629,2710 24639,2710 28023,2710 28023,2710 28033,2710 28042,2711 28052,2712 28062,2714 28071,2716 28081,2719 28090,2722 28099,2726 28108,2730 28116,2735 28125,2740 28133,2746 28140,2752 28148,2758 28155,2765 28162,2772 28168,2779 28174,2787 28179,2795 28185,2803 28189,2812 28194,2821 28197,2830 28201,2839 28203,2849 28206,2858 28208,2868 28209,2877 28210,2887 28210,2897 28211,4402 28211,4402 28211,4412 28210,4422 28209,4431 28207,4441 28205,4450 28202,4460 28199,4469 28195,4478 28191,4487 28186,4496 28181,4504 28175,4512 28169,4520 28163,4527 28156,4535 28149,4541 28142,4548 28134,4554 28126,4559 28118,4564 28109,4569 28100,4573 28091,4577 28082,4581 28072,4583 28063,4586 28053,4588 28044,4589 28034,4590 28024,4590 24640,4590 24640,4590 24630,4590 24620,4589 24611,4588 24601,4586 24592,4584 24582,4581 24573,4578 24564,4574 24555,4570 24546,4565 24538,4560 24530,4554 24522,4548 24515,4542 24507,4535 24501,4528 24494,4521 24488,4513 24483,4505 24478,4497 24473,4488 24469,4479 24465,4470 24461,4461 24459,4451 24456,4442 24454,4432 24453,4423 24452,4413 24452,4403 24452,2898 Z"/>
         <path fill="none" stroke="rgb(255,255,255)" stroke-width="35" stroke-linejoin="miter" d="M 24452,2898 L 24452,2898 24452,2889 24453,2879 24454,2870 24456,2860 24458,2851 24460,2842 24463,2833 24467,2824 24471,2816 24475,2807 24480,2799 24485,2791 24491,2783 24497,2776 24503,2769 24510,2762 24517,2756 24524,2750 24532,2744 24540,2739 24548,2734 24556,2730 24565,2726 24574,2722 24583,2719 24592,2716 24601,2714 24611,2712 24620,2711 24629,2710 24639,2710 28023,2710 28023,2710 28033,2710 28042,2711 28052,2712 28062,2714 28071,2716 28081,2719 28090,2722 28099,2726 28108,2730 28116,2735 28125,2740 28133,2746 28140,2752 28148,2758 28155,2765 28162,2772 28168,2779 28174,2787 28179,2795 28185,2803 28189,2812 28194,2821 28197,2830 28201,2839 28203,2849 28206,2858 28208,2868 28209,2877 28210,2887 28210,2897 28211,4402 28211,4402 28211,4412 28210,4422 28209,4431 28207,4441 28205,4450 28202,4460 28199,4469 28195,4478 28191,4487 28186,4496 28181,4504 28175,4512 28169,4520 28163,4527 28156,4535 28149,4541 28142,4548 28134,4554 28126,4559 28118,4564 28109,4569 28100,4573 28091,4577 28082,4581 28072,4583 28063,4586 28053,4588 28044,4589 28034,4590 28024,4590 24640,4590 24640,4590 24630,4590 24620,4589 24611,4588 24601,4586 24592,4584 24582,4581 24573,4578 24564,4574 24555,4570 24546,4565 24538,4560 24530,4554 24522,4548 24515,4542 24507,4535 24501,4528 24494,4521 24488,4513 24483,4505 24478,4497 24473,4488 24469,4479 24465,4470 24461,4461 24459,4451 24456,4442 24454,4432 24453,4423 24452,4413 24452,4403 24452,2898 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="24873" y="3543"><tspan fill="rgb(255,255,255)" stroke="none">知识图谱可视</tspan></tspan><tspan class="TextPosition" x="26111" y="4075"><tspan fill="rgb(255,255,255)" stroke="none">化</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id49">
         <rect class="BoundingBox" stroke="none" fill="none" x="24809" y="4590" width="395" height="1429"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 24827,4590 L 24827,6000 25203,6000"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id50">
         <rect class="BoundingBox" stroke="none" fill="none" x="25186" y="5042" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 25204,5248 L 25204,5248 25204,5239 25205,5229 25206,5220 25208,5210 25210,5201 25212,5192 25215,5183 25219,5174 25223,5166 25227,5157 25232,5149 25237,5141 25243,5133 25249,5126 25255,5119 25262,5112 25269,5106 25276,5100 25284,5094 25292,5089 25300,5084 25308,5080 25317,5076 25326,5072 25335,5069 25344,5066 25353,5064 25363,5062 25372,5061 25381,5060 25391,5060 28023,5060 28023,5060 28033,5060 28042,5061 28052,5062 28062,5064 28071,5066 28081,5069 28090,5072 28099,5076 28108,5080 28116,5085 28125,5090 28133,5096 28140,5102 28148,5108 28155,5115 28162,5122 28168,5129 28174,5137 28179,5145 28185,5153 28189,5162 28194,5171 28197,5180 28201,5189 28203,5199 28206,5208 28208,5218 28209,5227 28210,5237 28210,5247 28211,6752 28211,6752 28211,6762 28210,6772 28209,6781 28207,6791 28205,6800 28202,6810 28199,6819 28195,6828 28191,6837 28186,6846 28181,6854 28175,6862 28169,6870 28163,6877 28156,6885 28149,6891 28142,6898 28134,6904 28126,6909 28118,6914 28109,6919 28100,6923 28091,6927 28082,6931 28072,6933 28063,6936 28053,6938 28044,6939 28034,6940 28024,6940 25392,6940 25392,6940 25382,6940 25372,6939 25363,6938 25353,6936 25344,6934 25334,6931 25325,6928 25316,6924 25307,6920 25298,6915 25290,6910 25282,6904 25274,6898 25267,6892 25259,6885 25253,6878 25246,6871 25240,6863 25235,6855 25230,6847 25225,6838 25221,6829 25217,6820 25213,6811 25211,6801 25208,6792 25206,6782 25205,6773 25204,6763 25204,6753 25204,5248 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25204,5248 L 25204,5248 25204,5239 25205,5229 25206,5220 25208,5210 25210,5201 25212,5192 25215,5183 25219,5174 25223,5166 25227,5157 25232,5149 25237,5141 25243,5133 25249,5126 25255,5119 25262,5112 25269,5106 25276,5100 25284,5094 25292,5089 25300,5084 25308,5080 25317,5076 25326,5072 25335,5069 25344,5066 25353,5064 25363,5062 25372,5061 25381,5060 25391,5060 28023,5060 28023,5060 28033,5060 28042,5061 28052,5062 28062,5064 28071,5066 28081,5069 28090,5072 28099,5076 28108,5080 28116,5085 28125,5090 28133,5096 28140,5102 28148,5108 28155,5115 28162,5122 28168,5129 28174,5137 28179,5145 28185,5153 28189,5162 28194,5171 28197,5180 28201,5189 28203,5199 28206,5208 28208,5218 28209,5227 28210,5237 28210,5247 28211,6752 28211,6752 28211,6762 28210,6772 28209,6781 28207,6791 28205,6800 28202,6810 28199,6819 28195,6828 28191,6837 28186,6846 28181,6854 28175,6862 28169,6870 28163,6877 28156,6885 28149,6891 28142,6898 28134,6904 28126,6909 28118,6914 28109,6919 28100,6923 28091,6927 28082,6931 28072,6933 28063,6936 28053,6938 28044,6939 28034,6940 28024,6940 25392,6940 25392,6940 25382,6940 25372,6939 25363,6938 25353,6936 25344,6934 25334,6931 25325,6928 25316,6924 25307,6920 25298,6915 25290,6910 25282,6904 25274,6898 25267,6892 25259,6885 25253,6878 25246,6871 25240,6863 25235,6855 25230,6847 25225,6838 25221,6829 25217,6820 25213,6811 25211,6801 25208,6792 25206,6782 25205,6773 25204,6763 25204,6753 25204,5248 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="25465" y="5908"><tspan fill="rgb(0,0,0)" stroke="none">科研人员关系</tspan></tspan><tspan class="TextPosition" x="26311" y="6364"><tspan fill="rgb(0,0,0)" stroke="none">图谱</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id51">
         <rect class="BoundingBox" stroke="none" fill="none" x="24809" y="4591" width="395" height="3778"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 24827,4591 L 24827,8350 25203,8350"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id52">
         <rect class="BoundingBox" stroke="none" fill="none" x="25186" y="7391" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 25204,7597 L 25204,7597 25204,7588 25205,7578 25206,7569 25208,7559 25210,7550 25212,7541 25215,7532 25219,7523 25223,7515 25227,7506 25232,7498 25237,7490 25243,7482 25249,7475 25255,7468 25262,7461 25269,7455 25276,7449 25284,7443 25292,7438 25300,7433 25308,7429 25317,7425 25326,7421 25335,7418 25344,7415 25353,7413 25363,7411 25372,7410 25381,7409 25391,7409 28023,7409 28023,7409 28033,7409 28042,7410 28052,7411 28062,7413 28071,7415 28081,7418 28090,7421 28099,7425 28108,7429 28116,7434 28125,7439 28133,7445 28140,7451 28148,7457 28155,7464 28162,7471 28168,7478 28174,7486 28179,7494 28185,7502 28189,7511 28194,7520 28197,7529 28201,7538 28203,7548 28206,7557 28208,7567 28209,7576 28210,7586 28210,7596 28211,9101 28211,9101 28211,9111 28210,9121 28209,9130 28207,9140 28205,9149 28202,9159 28199,9168 28195,9177 28191,9186 28186,9195 28181,9203 28175,9211 28169,9219 28163,9226 28156,9234 28149,9240 28142,9247 28134,9253 28126,9258 28118,9263 28109,9268 28100,9272 28091,9276 28082,9280 28072,9282 28063,9285 28053,9287 28044,9288 28034,9289 28024,9289 25392,9289 25392,9289 25382,9289 25372,9288 25363,9287 25353,9285 25344,9283 25334,9280 25325,9277 25316,9273 25307,9269 25298,9264 25290,9259 25282,9253 25274,9247 25267,9241 25259,9234 25253,9227 25246,9220 25240,9212 25235,9204 25230,9196 25225,9187 25221,9178 25217,9169 25213,9160 25211,9150 25208,9141 25206,9131 25205,9122 25204,9112 25204,9102 25204,7597 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25204,7597 L 25204,7597 25204,7588 25205,7578 25206,7569 25208,7559 25210,7550 25212,7541 25215,7532 25219,7523 25223,7515 25227,7506 25232,7498 25237,7490 25243,7482 25249,7475 25255,7468 25262,7461 25269,7455 25276,7449 25284,7443 25292,7438 25300,7433 25308,7429 25317,7425 25326,7421 25335,7418 25344,7415 25353,7413 25363,7411 25372,7410 25381,7409 25391,7409 28023,7409 28023,7409 28033,7409 28042,7410 28052,7411 28062,7413 28071,7415 28081,7418 28090,7421 28099,7425 28108,7429 28116,7434 28125,7439 28133,7445 28140,7451 28148,7457 28155,7464 28162,7471 28168,7478 28174,7486 28179,7494 28185,7502 28189,7511 28194,7520 28197,7529 28201,7538 28203,7548 28206,7557 28208,7567 28209,7576 28210,7586 28210,7596 28211,9101 28211,9101 28211,9111 28210,9121 28209,9130 28207,9140 28205,9149 28202,9159 28199,9168 28195,9177 28191,9186 28186,9195 28181,9203 28175,9211 28169,9219 28163,9226 28156,9234 28149,9240 28142,9247 28134,9253 28126,9258 28118,9263 28109,9268 28100,9272 28091,9276 28082,9280 28072,9282 28063,9285 28053,9287 28044,9288 28034,9289 28024,9289 25392,9289 25392,9289 25382,9289 25372,9288 25363,9287 25353,9285 25344,9283 25334,9280 25325,9277 25316,9273 25307,9269 25298,9264 25290,9259 25282,9253 25274,9247 25267,9241 25259,9234 25253,9227 25246,9220 25240,9212 25235,9204 25230,9196 25225,9187 25221,9178 25217,9169 25213,9160 25211,9150 25208,9141 25206,9131 25205,9122 25204,9112 25204,9102 25204,7597 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="25465" y="8257"><tspan fill="rgb(0,0,0)" stroke="none">机构影响力图</tspan></tspan><tspan class="TextPosition" x="26523" y="8713"><tspan fill="rgb(0,0,0)" stroke="none">谱</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id53">
         <rect class="BoundingBox" stroke="none" fill="none" x="24809" y="4591" width="395" height="6128"/>
         <path fill="none" stroke="rgb(54,91,156)" stroke-width="35" stroke-linejoin="miter" d="M 24827,4591 L 24827,10700 25203,10700"/>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id54">
         <rect class="BoundingBox" stroke="none" fill="none" x="25186" y="9741" width="3044" height="1917"/>
         <path fill="rgb(255,255,255)" fill-opacity="0.898" stroke="rgb(255,255,255)" stroke-opacity="0.898" d="M 25204,9947 L 25204,9947 25204,9938 25205,9928 25206,9919 25208,9909 25210,9900 25212,9891 25215,9882 25219,9873 25223,9865 25227,9856 25232,9848 25237,9840 25243,9832 25249,9825 25255,9818 25262,9811 25269,9805 25276,9799 25284,9793 25292,9788 25300,9783 25308,9779 25317,9775 25326,9771 25335,9768 25344,9765 25353,9763 25363,9761 25372,9760 25381,9759 25391,9759 28023,9759 28023,9759 28033,9759 28042,9760 28052,9761 28062,9763 28071,9765 28081,9768 28090,9771 28099,9775 28108,9779 28116,9784 28125,9789 28133,9795 28140,9801 28148,9807 28155,9814 28162,9821 28168,9828 28174,9836 28179,9844 28185,9852 28189,9861 28194,9870 28197,9879 28201,9888 28203,9898 28206,9907 28208,9917 28209,9926 28210,9936 28210,9946 28211,11451 28211,11451 28211,11461 28210,11471 28209,11480 28207,11490 28205,11499 28202,11509 28199,11518 28195,11527 28191,11536 28186,11545 28181,11553 28175,11561 28169,11569 28163,11576 28156,11584 28149,11590 28142,11597 28134,11603 28126,11608 28118,11613 28109,11618 28100,11622 28091,11626 28082,11630 28072,11632 28063,11635 28053,11637 28044,11638 28034,11639 28024,11639 25392,11639 25392,11639 25382,11639 25372,11638 25363,11637 25353,11635 25344,11633 25334,11630 25325,11627 25316,11623 25307,11619 25298,11614 25290,11609 25282,11603 25274,11597 25267,11591 25259,11584 25253,11577 25246,11570 25240,11562 25235,11554 25230,11546 25225,11537 25221,11528 25217,11519 25213,11510 25211,11500 25208,11491 25206,11481 25205,11472 25204,11462 25204,11452 25204,9947 Z"/>
         <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25204,9947 L 25204,9947 25204,9938 25205,9928 25206,9919 25208,9909 25210,9900 25212,9891 25215,9882 25219,9873 25223,9865 25227,9856 25232,9848 25237,9840 25243,9832 25249,9825 25255,9818 25262,9811 25269,9805 25276,9799 25284,9793 25292,9788 25300,9783 25308,9779 25317,9775 25326,9771 25335,9768 25344,9765 25353,9763 25363,9761 25372,9760 25381,9759 25391,9759 28023,9759 28023,9759 28033,9759 28042,9760 28052,9761 28062,9763 28071,9765 28081,9768 28090,9771 28099,9775 28108,9779 28116,9784 28125,9789 28133,9795 28140,9801 28148,9807 28155,9814 28162,9821 28168,9828 28174,9836 28179,9844 28185,9852 28189,9861 28194,9870 28197,9879 28201,9888 28203,9898 28206,9907 28208,9917 28209,9926 28210,9936 28210,9946 28211,11451 28211,11451 28211,11461 28210,11471 28209,11480 28207,11490 28205,11499 28202,11509 28199,11518 28195,11527 28191,11536 28186,11545 28181,11553 28175,11561 28169,11569 28163,11576 28156,11584 28149,11590 28142,11597 28134,11603 28126,11608 28118,11613 28109,11618 28100,11622 28091,11626 28082,11630 28072,11632 28063,11635 28053,11637 28044,11638 28034,11639 28024,11639 25392,11639 25392,11639 25382,11639 25372,11638 25363,11637 25353,11635 25344,11633 25334,11630 25325,11627 25316,11623 25307,11619 25298,11614 25290,11609 25282,11603 25274,11597 25267,11591 25259,11584 25253,11577 25246,11570 25240,11562 25235,11554 25230,11546 25225,11537 25221,11528 25217,11519 25213,11510 25211,11500 25208,11491 25206,11481 25205,11472 25204,11462 25204,11452 25204,9947 Z"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="423px" font-weight="400"><tspan class="TextPosition" x="25465" y="10607"><tspan fill="rgb(0,0,0)" stroke="none">图谱节点可点</tspan></tspan><tspan class="TextPosition" x="25676" y="11063"><tspan fill="rgb(0,0,0)" stroke="none">击查看详情</tspan></tspan></tspan></text>
        </g>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id55">
        <rect class="BoundingBox" stroke="none" fill="none" x="4738" y="505" width="24389" height="17273"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,1375 L 4756,1307 4757,1266 4760,1225 4763,1202"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4769,1168 L 4773,1144 4783,1104 4794,1066"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4806,1033 L 4808,1026 4824,988 4841,951 4849,937"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4866,907 L 4882,880 4906,846 4926,821"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4948,793 L 4957,782 4986,753 5015,724 5021,719"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5049,697 L 5079,673 5113,649 5134,636"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5165,619 L 5184,608 5221,591 5259,575 5260,575"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5293,563 L 5298,561 5337,550 5377,540 5394,537"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5429,531 L 5458,527 5499,524 5533,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5568,523 L 5673,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5708,523 L 5813,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5848,523 L 5953,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5988,523 L 6093,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6128,523 L 6233,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6268,523 L 6373,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6408,523 L 6513,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6548,523 L 6653,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6688,523 L 6793,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6828,523 L 6933,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6968,523 L 7073,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7108,523 L 7213,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7248,523 L 7353,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7388,523 L 7493,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7528,523 L 7633,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7668,523 L 7773,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7808,523 L 7913,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7948,523 L 8053,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8088,523 L 8193,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8228,523 L 8333,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8368,523 L 8473,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8508,523 L 8613,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8648,523 L 8753,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8788,523 L 8893,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8928,523 L 9033,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9068,523 L 9173,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9208,523 L 9313,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9348,523 L 9453,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9488,523 L 9593,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9628,523 L 9733,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9768,523 L 9873,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9908,523 L 10013,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10048,523 L 10153,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10188,523 L 10293,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10328,523 L 10433,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10468,523 L 10573,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10608,523 L 10713,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10748,523 L 10853,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10888,523 L 10993,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11028,523 L 11133,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11168,523 L 11273,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11308,523 L 11413,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11448,523 L 11553,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11588,523 L 11693,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11728,523 L 11833,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11868,523 L 11973,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12008,523 L 12113,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12148,523 L 12253,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12288,523 L 12393,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12428,523 L 12533,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12568,523 L 12673,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12708,523 L 12813,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12848,523 L 12953,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12988,523 L 13093,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13128,523 L 13233,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13268,523 L 13373,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13408,523 L 13513,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13548,523 L 13653,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13688,523 L 13793,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13828,523 L 13933,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13968,523 L 14073,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14108,523 L 14213,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14248,523 L 14353,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14388,523 L 14493,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14528,523 L 14633,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14668,523 L 14773,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14808,523 L 14913,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14948,523 L 15053,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15088,523 L 15193,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15228,523 L 15333,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15368,523 L 15473,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15508,523 L 15613,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15648,523 L 15753,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15788,523 L 15893,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15928,523 L 16033,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16068,523 L 16173,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16208,523 L 16313,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16348,523 L 16453,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16488,523 L 16593,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16628,523 L 16733,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16768,523 L 16873,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16908,523 L 17013,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17048,523 L 17153,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17188,523 L 17293,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17328,523 L 17433,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17468,523 L 17573,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17608,523 L 17713,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17748,523 L 17853,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17888,523 L 17993,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18028,523 L 18133,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18168,523 L 18273,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18308,523 L 18413,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18448,523 L 18553,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18588,523 L 18693,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18728,523 L 18833,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18868,523 L 18973,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19008,523 L 19113,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19148,523 L 19253,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19288,523 L 19393,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19428,523 L 19533,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19568,523 L 19673,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19708,523 L 19813,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19848,523 L 19953,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19988,523 L 20093,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20128,523 L 20233,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20268,523 L 20373,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20408,523 L 20513,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20548,523 L 20653,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20688,523 L 20793,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20828,523 L 20933,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20968,523 L 21073,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21108,523 L 21213,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21248,523 L 21353,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21388,523 L 21493,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21528,523 L 21633,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21668,523 L 21773,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21808,523 L 21913,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21948,523 L 22053,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22088,523 L 22193,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22228,523 L 22333,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22368,523 L 22473,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22508,523 L 22613,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22648,523 L 22753,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22788,523 L 22893,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22928,523 L 23033,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23068,523 L 23173,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23208,523 L 23313,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23348,523 L 23453,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23488,523 L 23593,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23628,523 L 23733,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23768,523 L 23873,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23908,523 L 24013,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24048,523 L 24153,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24188,523 L 24293,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24328,523 L 24433,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24468,523 L 24573,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24608,523 L 24713,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24748,523 L 24853,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24888,523 L 24993,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25028,523 L 25133,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25168,523 L 25273,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25308,523 L 25413,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25448,523 L 25553,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25588,523 L 25693,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25728,523 L 25833,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25868,523 L 25973,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26008,523 L 26113,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26148,523 L 26253,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26288,523 L 26393,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26428,523 L 26533,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26568,523 L 26673,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26708,523 L 26813,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26848,523 L 26953,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26988,523 L 27093,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27128,523 L 27233,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27268,523 L 27373,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27408,523 L 27513,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27548,523 L 27653,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27688,523 L 27793,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27828,523 L 27933,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27968,523 L 28073,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28108,523 L 28213,523"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28248,523 L 28323,523 28353,524"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28388,526 L 28405,527 28446,533 28486,540 28492,542"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28526,550 L 28565,561 28604,575 28625,584"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28657,598 L 28679,608 28715,628 28749,649"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28778,669 L 28784,673 28816,698 28848,724 28859,735"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28884,760 L 28906,782 28932,814 28952,840"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28972,868 L 28981,880 29002,915 29022,951 29025,958"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29040,990 L 29055,1026 29069,1065 29076,1089"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29085,1123 L 29090,1144 29097,1184 29103,1225 29103,1226"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29106,1261 L 29106,1266 29107,1307 29107,1366"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,1401 L 29107,1506"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,1541 L 29107,1646"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,1681 L 29107,1786"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,1821 L 29107,1926"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,1961 L 29107,2066"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,2101 L 29107,2206"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,2241 L 29107,2346"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,2381 L 29107,2486"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,2521 L 29107,2626"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,2661 L 29107,2766"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,2801 L 29107,2906"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,2941 L 29107,3046"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,3081 L 29107,3186"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,3221 L 29107,3326"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,3361 L 29107,3466"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,3501 L 29107,3606"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,3641 L 29107,3746"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,3781 L 29107,3886"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,3921 L 29107,4026"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,4061 L 29107,4166"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,4201 L 29107,4306"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,4341 L 29107,4446"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,4481 L 29107,4586"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,4621 L 29107,4726"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,4761 L 29107,4866"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,4901 L 29107,5006"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,5041 L 29107,5146"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,5181 L 29107,5286"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,5321 L 29107,5426"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,5461 L 29107,5566"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,5601 L 29107,5706"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,5741 L 29107,5846"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,5881 L 29107,5986"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,6021 L 29107,6126"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,6161 L 29107,6266"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,6301 L 29107,6406"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,6441 L 29107,6546"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,6581 L 29107,6686"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,6721 L 29107,6826"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,6861 L 29107,6966"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7001 L 29107,7106"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7141 L 29107,7246"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7281 L 29107,7386"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7421 L 29107,7526"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7561 L 29107,7666"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7701 L 29107,7806"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7841 L 29107,7946"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,7981 L 29107,8086"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,8121 L 29107,8226"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,8261 L 29107,8366"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,8401 L 29107,8506"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,8541 L 29107,8646"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,8681 L 29107,8786"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,8821 L 29107,8926"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,8961 L 29107,9066"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29107,9101 L 29108,9206"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,9241 L 29108,9346"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,9381 L 29108,9486"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,9521 L 29108,9626"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,9661 L 29108,9766"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,9801 L 29108,9906"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,9941 L 29108,10046"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,10081 L 29108,10186"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,10221 L 29108,10326"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,10361 L 29108,10466"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,10501 L 29108,10606"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,10641 L 29108,10746"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,10781 L 29108,10886"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,10921 L 29108,11026"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,11061 L 29108,11166"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,11201 L 29108,11306"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,11341 L 29108,11446"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,11481 L 29108,11586"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,11621 L 29108,11726"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,11761 L 29108,11866"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,11901 L 29108,12006"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,12041 L 29108,12146"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,12181 L 29108,12286"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,12321 L 29108,12426"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,12461 L 29108,12566"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,12601 L 29108,12706"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,12741 L 29108,12846"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,12881 L 29108,12986"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,13021 L 29108,13126"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,13161 L 29108,13266"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,13301 L 29108,13406"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,13441 L 29108,13546"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,13581 L 29108,13686"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,13721 L 29108,13826"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,13861 L 29108,13966"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14001 L 29108,14106"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14141 L 29108,14246"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14281 L 29108,14386"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14421 L 29108,14526"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14561 L 29108,14666"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14701 L 29108,14806"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14841 L 29108,14946"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,14981 L 29108,15086"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,15121 L 29108,15226"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,15261 L 29108,15366"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,15401 L 29108,15506"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,15541 L 29108,15646"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,15681 L 29108,15786"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,15821 L 29108,15926"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,15961 L 29108,16066"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,16101 L 29108,16206"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,16241 L 29108,16346"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,16381 L 29108,16486"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,16521 L 29108,16626"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,16661 L 29108,16766"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,16801 L 29108,16906"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29108,16941 L 29108,16974 29107,17015 29105,17046"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29100,17081 L 29098,17097 29091,17137 29081,17177 29079,17183"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29070,17217 L 29056,17255 29040,17293 29030,17314"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 29014,17345 L 29003,17366 28982,17401 28959,17434"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28937,17462 L 28933,17467 28907,17499 28878,17528 28867,17539"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28841,17563 L 28817,17583 28785,17608 28758,17627"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28728,17646 L 28716,17653 28680,17673 28643,17690 28635,17693"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28602,17707 L 28566,17720 28527,17731 28502,17737"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28468,17744 L 28447,17748 28406,17754 28365,17757 28364,17757"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28329,17758 L 28324,17758 28224,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28189,17758 L 28084,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 28049,17758 L 27944,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27909,17758 L 27804,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27769,17758 L 27664,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27629,17758 L 27524,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27489,17758 L 27384,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27349,17758 L 27244,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27209,17758 L 27104,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 27069,17758 L 26964,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26929,17758 L 26824,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26789,17758 L 26684,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26649,17758 L 26544,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26509,17758 L 26404,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26369,17758 L 26264,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26229,17758 L 26124,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 26089,17758 L 25984,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25949,17758 L 25844,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25809,17758 L 25704,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25669,17758 L 25564,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25529,17758 L 25424,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25389,17758 L 25284,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25249,17758 L 25144,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 25109,17758 L 25004,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24969,17758 L 24864,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24829,17758 L 24724,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24689,17758 L 24584,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24549,17758 L 24444,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24409,17758 L 24304,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24269,17758 L 24164,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 24129,17758 L 24024,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23989,17758 L 23884,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23849,17758 L 23744,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23709,17758 L 23604,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23569,17758 L 23464,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23429,17758 L 23324,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23289,17758 L 23184,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23149,17758 L 23044,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 23009,17758 L 22904,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22869,17758 L 22764,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22729,17758 L 22624,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22589,17758 L 22484,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22449,17758 L 22344,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22309,17758 L 22204,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22169,17758 L 22064,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 22029,17758 L 21924,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21889,17758 L 21784,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21749,17758 L 21644,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21609,17758 L 21504,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21469,17758 L 21364,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21329,17758 L 21224,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21189,17758 L 21084,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 21049,17758 L 20944,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20909,17758 L 20804,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20769,17758 L 20664,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20629,17758 L 20524,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20489,17758 L 20384,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20349,17758 L 20244,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20209,17758 L 20104,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 20069,17758 L 19964,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19929,17758 L 19824,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19789,17758 L 19684,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19649,17758 L 19544,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19509,17758 L 19404,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19369,17758 L 19264,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19229,17758 L 19124,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 19089,17758 L 18984,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18949,17758 L 18844,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18809,17758 L 18704,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18669,17758 L 18564,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18529,17758 L 18424,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18389,17758 L 18284,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18249,17758 L 18144,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 18109,17758 L 18004,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17969,17758 L 17864,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17829,17758 L 17724,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17689,17758 L 17584,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17549,17758 L 17444,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17409,17758 L 17304,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17269,17758 L 17164,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 17129,17758 L 17024,17758"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16989,17758 L 16884,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16849,17759 L 16744,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16709,17759 L 16604,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16569,17759 L 16464,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16429,17759 L 16324,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16289,17759 L 16184,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16149,17759 L 16044,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 16009,17759 L 15904,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15869,17759 L 15764,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15729,17759 L 15624,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15589,17759 L 15484,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15449,17759 L 15344,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15309,17759 L 15204,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15169,17759 L 15064,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 15029,17759 L 14924,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14889,17759 L 14784,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14749,17759 L 14644,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14609,17759 L 14504,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14469,17759 L 14364,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14329,17759 L 14224,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14189,17759 L 14084,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 14049,17759 L 13944,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13909,17759 L 13804,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13769,17759 L 13664,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13629,17759 L 13524,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13489,17759 L 13384,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13349,17759 L 13244,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13209,17759 L 13104,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 13069,17759 L 12964,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12929,17759 L 12824,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12789,17759 L 12684,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12649,17759 L 12544,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12509,17759 L 12404,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12369,17759 L 12264,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12229,17759 L 12124,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 12089,17759 L 11984,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11949,17759 L 11844,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11809,17759 L 11704,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11669,17759 L 11564,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11529,17759 L 11424,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11389,17759 L 11284,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11249,17759 L 11144,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 11109,17759 L 11004,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10969,17759 L 10864,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10829,17759 L 10724,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10689,17759 L 10584,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10549,17759 L 10444,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10409,17759 L 10304,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10269,17759 L 10164,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 10129,17759 L 10024,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9989,17759 L 9884,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9849,17759 L 9744,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9709,17759 L 9604,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9569,17759 L 9464,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9429,17759 L 9324,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9289,17759 L 9184,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9149,17759 L 9044,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 9009,17759 L 8904,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8869,17759 L 8764,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8729,17759 L 8624,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8589,17759 L 8484,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8449,17759 L 8344,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8309,17759 L 8204,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8169,17759 L 8064,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 8029,17759 L 7924,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7889,17759 L 7784,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7749,17759 L 7644,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7609,17759 L 7504,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7469,17759 L 7364,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7329,17759 L 7224,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7189,17759 L 7084,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 7049,17759 L 6944,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6909,17759 L 6804,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6769,17759 L 6664,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6629,17759 L 6524,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6489,17759 L 6384,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6349,17759 L 6244,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6209,17759 L 6104,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 6069,17759 L 5964,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5929,17759 L 5824,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5789,17759 L 5684,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5649,17759 L 5544,17759"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5509,17758 L 5499,17758 5458,17755 5417,17749 5404,17747"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5370,17740 L 5337,17732 5298,17721 5269,17711"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5237,17698 L 5221,17691 5184,17674 5148,17654 5143,17651"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5113,17633 L 5079,17609 5047,17584 5029,17570"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 5003,17546 L 4986,17529 4957,17500 4932,17469"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4910,17442 L 4906,17436 4882,17402 4861,17367 4854,17354"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4837,17323 L 4824,17294 4808,17256 4797,17226"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4787,17192 L 4783,17178 4773,17138 4766,17098 4765,17090"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4760,17055 L 4757,17016 4756,16975 4756,16950"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,16915 L 4756,16810"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,16775 L 4756,16670"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,16635 L 4756,16530"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,16495 L 4756,16390"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,16355 L 4756,16250"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,16215 L 4756,16110"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,16075 L 4756,15970"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,15935 L 4756,15830"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,15795 L 4756,15690"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,15655 L 4756,15550"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,15515 L 4756,15410"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,15375 L 4756,15270"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,15235 L 4756,15130"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,15095 L 4756,14990"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,14955 L 4756,14850"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,14815 L 4756,14710"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,14675 L 4756,14570"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,14535 L 4756,14430"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,14395 L 4756,14290"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,14255 L 4756,14150"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,14115 L 4756,14010"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,13975 L 4756,13870"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,13835 L 4756,13730"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,13695 L 4756,13590"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,13555 L 4756,13450"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,13415 L 4756,13310"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,13275 L 4756,13170"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,13135 L 4756,13030"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12995 L 4756,12890"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12855 L 4756,12750"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12715 L 4756,12610"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12575 L 4756,12470"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12435 L 4756,12330"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12295 L 4756,12190"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12155 L 4756,12050"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,12015 L 4756,11910"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,11875 L 4756,11770"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,11735 L 4756,11630"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,11595 L 4756,11490"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,11455 L 4756,11350"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,11315 L 4756,11210"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,11175 L 4756,11070"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,11035 L 4756,10930"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,10895 L 4756,10790"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,10755 L 4756,10650"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,10615 L 4756,10510"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,10475 L 4756,10370"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,10335 L 4756,10230"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,10195 L 4756,10090"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,10055 L 4756,9950"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,9915 L 4756,9810"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,9775 L 4756,9670"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,9635 L 4756,9530"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,9495 L 4756,9390"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,9355 L 4756,9250"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,9215 L 4756,9110"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,9075 L 4756,8970"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,8935 L 4756,8830"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,8795 L 4756,8690"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,8655 L 4756,8550"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,8515 L 4756,8410"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,8375 L 4756,8270"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,8235 L 4756,8130"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,8095 L 4756,7990"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,7955 L 4756,7850"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,7815 L 4756,7710"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,7675 L 4756,7570"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,7535 L 4756,7430"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,7395 L 4756,7290"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,7255 L 4756,7150"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,7115 L 4756,7010"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,6975 L 4756,6870"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,6835 L 4756,6730"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,6695 L 4756,6590"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,6555 L 4756,6450"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,6415 L 4756,6310"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,6275 L 4756,6170"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,6135 L 4756,6030"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5995 L 4756,5890"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5855 L 4756,5750"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5715 L 4756,5610"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5575 L 4756,5470"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5435 L 4756,5330"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5295 L 4756,5190"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5155 L 4756,5050"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,5015 L 4756,4910"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,4875 L 4756,4770"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,4735 L 4756,4630"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,4595 L 4756,4490"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,4455 L 4756,4350"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,4315 L 4756,4210"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,4175 L 4756,4070"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,4035 L 4756,3930"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,3895 L 4756,3790"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,3755 L 4756,3650"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,3615 L 4756,3510"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,3475 L 4756,3370"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,3335 L 4756,3230"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,3195 L 4756,3090"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,3055 L 4756,2950"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,2915 L 4756,2810"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,2775 L 4756,2670"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,2635 L 4756,2530"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,2495 L 4756,2390"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,2355 L 4756,2250"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,2215 L 4756,2110"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,2075 L 4756,1970"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,1935 L 4756,1830"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,1795 L 4756,1690"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,1655 L 4756,1550"/>
        <path fill="none" stroke="rgb(68,114,196)" stroke-width="35" stroke-linejoin="miter" d="M 4756,1515 L 4756,1410"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.CustomShape">
       <g id="id56">
        <rect class="BoundingBox" stroke="none" fill="none" x="13823" y="776" width="6219" height="1014"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="DejaVu Sans, sans-serif" font-size="635px" font-weight="400"><tspan class="TextPosition" x="14073" y="1536"><tspan fill="rgb(0,0,0)" stroke="none">科研学习与社交平台</tspan></tspan></tspan></text>
       </g>
      </g>
     </g>
    </g>
   </g>
  </g>
 </g>
 <script type="text/ecmascript"><![CDATA[


(function(window, document, exportName, undefined) {
'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

function setTimeoutContext(fn, timeout, context) {
return setTimeout(bindFn(fn, context), timeout);
}

function invokeArrayArg(arg, fn, context) {
if (Array.isArray(arg)) {
each(arg, context[fn], context);
return true;
}
return false;
}

function each(obj, iterator, context) {
var i;

if (!obj) {
return;
}

if (obj.forEach) {
obj.forEach(iterator, context);
} else if (obj.length !== undefined) {
i = 0;
while (i < obj.length) {
iterator.call(context, obj[i], i, obj);
i++;
}
} else {
for (i in obj) {
obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
}
}
}

function deprecate(method, name, message) {
var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
return function() {
var e = new Error('get-stack-trace');
var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
.replace(/^\s+at\s+/gm, '')
.replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

var log = window.console && (window.console.warn || window.console.log);
if (log) {
log.call(window.console, deprecationMessage, stack);
}
return method.apply(this, arguments);
};
}

var assign;
if (typeof Object.assign !== 'function') {
assign = function assign(target) {
if (target === undefined || target === null) {
throw new TypeError('Cannot convert undefined or null to object');
}

var output = Object(target);
for (var index = 1; index < arguments.length; index++) {
var source = arguments[index];
if (source !== undefined && source !== null) {
for (var nextKey in source) {
if (source.hasOwnProperty(nextKey)) {
output[nextKey] = source[nextKey];
}
}
}
}
return output;
};
} else {
assign = Object.assign;
}

var extend = deprecate(function extend(dest, src, merge) {
var keys = Object.keys(src);
var i = 0;
while (i < keys.length) {
if (!merge || (merge && dest[keys[i]] === undefined)) {
dest[keys[i]] = src[keys[i]];
}
i++;
}
return dest;
}, 'extend', 'Use `assign`.');

var merge = deprecate(function merge(dest, src) {
return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

function inherit(child, base, properties) {
var baseP = base.prototype,
childP;

childP = child.prototype = Object.create(baseP);
childP.constructor = child;
childP._super = baseP;

if (properties) {
assign(childP, properties);
}
}

function bindFn(fn, context) {
return function boundFn() {
return fn.apply(context, arguments);
};
}

function boolOrFn(val, args) {
if (typeof val == TYPE_FUNCTION) {
return val.apply(args ? args[0] || undefined : undefined, args);
}
return val;
}

function ifUndefined(val1, val2) {
return (val1 === undefined) ? val2 : val1;
}

function addEventListeners(target, types, handler) {
each(splitStr(types), function(type) {
target.addEventListener(type, handler, false);
});
}

function removeEventListeners(target, types, handler) {
each(splitStr(types), function(type) {
target.removeEventListener(type, handler, false);
});
}

function hasParent(node, parent) {
while (node) {
if (node == parent) {
return true;
}
node = node.parentNode;
}
return false;
}

function inStr(str, find) {
return str.indexOf(find) > -1;
}

function splitStr(str) {
return str.trim().split(/\s+/g);
}

function inArray(src, find, findByKey) {
if (src.indexOf && !findByKey) {
return src.indexOf(find);
} else {
var i = 0;
while (i < src.length) {
if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
return i;
}
i++;
}
return -1;
}
}

function toArray(obj) {
return Array.prototype.slice.call(obj, 0);
}

function uniqueArray(src, key, sort) {
var results = [];
var values = [];
var i = 0;

while (i < src.length) {
var val = key ? src[i][key] : src[i];
if (inArray(values, val) < 0) {
results.push(src[i]);
}
values[i] = val;
i++;
}

if (sort) {
if (!key) {
results = results.sort();
} else {
results = results.sort(function sortUniqueArray(a, b) {
return a[key] > b[key];
});
}
}

return results;
}

function prefixed(obj, property) {
if (obj === undefined) {
return undefined;
}

var prefix, prop;
var camelProp = property[0].toUpperCase() + property.slice(1);

var i = 0;
while (i < VENDOR_PREFIXES.length) {
prefix = VENDOR_PREFIXES[i];
prop = (prefix) ? prefix + camelProp : property;

if (prop in obj) {
return prop;
}
i++;
}
return undefined;
}

var _uniqueId = 1;
function uniqueId() {
return _uniqueId++;
}

function getWindowForElement(element) {
var doc = element.ownerDocument || element;
return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

function Input(manager, callback) {
var self = this;
this.manager = manager;
this.callback = callback;
this.element = manager.element;
this.target = manager.options.inputTarget;

this.domHandler = function(ev) {
if (boolOrFn(manager.options.enable, [manager])) {
self.handler(ev);
}
};

this.init();

}

Input.prototype = {
handler: function() { },

init: function() {
this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
},

destroy: function() {
this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
}
};

function createInputInstance(manager) {
var Type;
var inputClass = manager.options.inputClass;

if (inputClass) {
Type = inputClass;
} else if (SUPPORT_POINTER_EVENTS) {
Type = PointerEventInput;
} else if (SUPPORT_ONLY_TOUCH) {
Type = TouchInput;
} else if (!SUPPORT_TOUCH) {
Type = MouseInput;
} else {
Type = TouchMouseInput;
}
return new (Type)(manager, inputHandler);
}

function inputHandler(manager, eventType, input) {
var pointersLen = input.pointers.length;
var changedPointersLen = input.changedPointers.length;
var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

input.isFirst = !!isFirst;
input.isFinal = !!isFinal;

if (isFirst) {
manager.session = {};
}

input.eventType = eventType;

computeInputData(manager, input);

manager.emit('hammer.input', input);

manager.recognize(input);
manager.session.prevInput = input;
}

function computeInputData(manager, input) {
var session = manager.session;
var pointers = input.pointers;
var pointersLength = pointers.length;

if (!session.firstInput) {
session.firstInput = simpleCloneInputData(input);
}

if (pointersLength > 1 && !session.firstMultiple) {
session.firstMultiple = simpleCloneInputData(input);
} else if (pointersLength === 1) {
session.firstMultiple = false;
}

var firstInput = session.firstInput;
var firstMultiple = session.firstMultiple;
var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

var center = input.center = getCenter(pointers);
input.timeStamp = now();
input.deltaTime = input.timeStamp - firstInput.timeStamp;

input.angle = getAngle(offsetCenter, center);
input.distance = getDistance(offsetCenter, center);

computeDeltaXY(session, input);
input.offsetDirection = getDirection(input.deltaX, input.deltaY);

var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
input.overallVelocityX = overallVelocity.x;
input.overallVelocityY = overallVelocity.y;
input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

computeIntervalInputData(session, input);

var target = manager.element;
if (hasParent(input.srcEvent.target, target)) {
target = input.srcEvent.target;
}
input.target = target;
}

function computeDeltaXY(session, input) {
var center = input.center;
var offset = session.offsetDelta || {};
var prevDelta = session.prevDelta || {};
var prevInput = session.prevInput || {};

if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
prevDelta = session.prevDelta = {
x: prevInput.deltaX || 0,
y: prevInput.deltaY || 0
};

offset = session.offsetDelta = {
x: center.x,
y: center.y
};
}

input.deltaX = prevDelta.x + (center.x - offset.x);
input.deltaY = prevDelta.y + (center.y - offset.y);
}

function computeIntervalInputData(session, input) {
var last = session.lastInterval || input,
deltaTime = input.timeStamp - last.timeStamp,
velocity, velocityX, velocityY, direction;

if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
var deltaX = input.deltaX - last.deltaX;
var deltaY = input.deltaY - last.deltaY;

var v = getVelocity(deltaTime, deltaX, deltaY);
velocityX = v.x;
velocityY = v.y;
velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
direction = getDirection(deltaX, deltaY);

session.lastInterval = input;
} else {
velocity = last.velocity;
velocityX = last.velocityX;
velocityY = last.velocityY;
direction = last.direction;
}

input.velocity = velocity;
input.velocityX = velocityX;
input.velocityY = velocityY;
input.direction = direction;
}

function simpleCloneInputData(input) {
var pointers = [];
var i = 0;
while (i < input.pointers.length) {
pointers[i] = {
clientX: round(input.pointers[i].clientX),
clientY: round(input.pointers[i].clientY)
};
i++;
}

return {
timeStamp: now(),
pointers: pointers,
center: getCenter(pointers),
deltaX: input.deltaX,
deltaY: input.deltaY
};
}

function getCenter(pointers) {
var pointersLength = pointers.length;

if (pointersLength === 1) {
return {
x: round(pointers[0].clientX),
y: round(pointers[0].clientY)
};
}

var x = 0, y = 0, i = 0;
while (i < pointersLength) {
x += pointers[i].clientX;
y += pointers[i].clientY;
i++;
}

return {
x: round(x / pointersLength),
y: round(y / pointersLength)
};
}

function getVelocity(deltaTime, x, y) {
return {
x: x / deltaTime || 0,
y: y / deltaTime || 0
};
}

function getDirection(x, y) {
if (x === y) {
return DIRECTION_NONE;
}

if (abs(x) >= abs(y)) {
return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
}
return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

function getDistance(p1, p2, props) {
if (!props) {
props = PROPS_XY;
}
var x = p2[props[0]] - p1[props[0]],
y = p2[props[1]] - p1[props[1]];

return Math.sqrt((x * x) + (y * y));
}

function getAngle(p1, p2, props) {
if (!props) {
props = PROPS_XY;
}
var x = p2[props[0]] - p1[props[0]],
y = p2[props[1]] - p1[props[1]];
return Math.atan2(y, x) * 180 / Math.PI;
}

function getRotation(start, end) {
return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

function getScale(start, end) {
return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
mousedown: INPUT_START,
mousemove: INPUT_MOVE,
mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

function MouseInput() {
this.evEl = MOUSE_ELEMENT_EVENTS;
this.evWin = MOUSE_WINDOW_EVENTS;

this.pressed = false; // mousedown state

Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
handler: function MEhandler(ev) {
var eventType = MOUSE_INPUT_MAP[ev.type];

if (eventType & INPUT_START && ev.button === 0) {
this.pressed = true;
}

if (eventType & INPUT_MOVE && ev.which !== 1) {
eventType = INPUT_END;
}

if (!this.pressed) {
return;
}

if (eventType & INPUT_END) {
this.pressed = false;
}

this.callback(this.manager, eventType, {
pointers: [ev],
changedPointers: [ev],
pointerType: INPUT_TYPE_MOUSE,
srcEvent: ev
});
}
});

var POINTER_INPUT_MAP = {
pointerdown: INPUT_START,
pointermove: INPUT_MOVE,
pointerup: INPUT_END,
pointercancel: INPUT_CANCEL,
pointerout: INPUT_CANCEL
};

var IE10_POINTER_TYPE_ENUM = {
2: INPUT_TYPE_TOUCH,
3: INPUT_TYPE_PEN,
4: INPUT_TYPE_MOUSE,
5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

if (window.MSPointerEvent && !window.PointerEvent) {
POINTER_ELEMENT_EVENTS = 'MSPointerDown';
POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

function PointerEventInput() {
this.evEl = POINTER_ELEMENT_EVENTS;
this.evWin = POINTER_WINDOW_EVENTS;

Input.apply(this, arguments);

this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
handler: function PEhandler(ev) {
var store = this.store;
var removePointer = false;

var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

var isTouch = (pointerType == INPUT_TYPE_TOUCH);

var storeIndex = inArray(store, ev.pointerId, 'pointerId');

if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
if (storeIndex < 0) {
store.push(ev);
storeIndex = store.length - 1;
}
} else if (eventType & (INPUT_END | INPUT_CANCEL)) {
removePointer = true;
}

if (storeIndex < 0) {
return;
}

store[storeIndex] = ev;

this.callback(this.manager, eventType, {
pointers: store,
changedPointers: [ev],
pointerType: pointerType,
srcEvent: ev
});

if (removePointer) {
store.splice(storeIndex, 1);
}
}
});

var SINGLE_TOUCH_INPUT_MAP = {
touchstart: INPUT_START,
touchmove: INPUT_MOVE,
touchend: INPUT_END,
touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

function SingleTouchInput() {
this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
this.started = false;

Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
handler: function TEhandler(ev) {
var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

if (type === INPUT_START) {
this.started = true;
}

if (!this.started) {
return;
}

var touches = normalizeSingleTouches.call(this, ev, type);

if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
this.started = false;
}

this.callback(this.manager, type, {
pointers: touches[0],
changedPointers: touches[1],
pointerType: INPUT_TYPE_TOUCH,
srcEvent: ev
});
}
});

function normalizeSingleTouches(ev, type) {
var all = toArray(ev.touches);
var changed = toArray(ev.changedTouches);

if (type & (INPUT_END | INPUT_CANCEL)) {
all = uniqueArray(all.concat(changed), 'identifier', true);
}

return [all, changed];
}

var TOUCH_INPUT_MAP = {
touchstart: INPUT_START,
touchmove: INPUT_MOVE,
touchend: INPUT_END,
touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

function TouchInput() {
this.evTarget = TOUCH_TARGET_EVENTS;
this.targetIds = {};

Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
handler: function MTEhandler(ev) {
var type = TOUCH_INPUT_MAP[ev.type];
var touches = getTouches.call(this, ev, type);
if (!touches) {
return;
}

this.callback(this.manager, type, {
pointers: touches[0],
changedPointers: touches[1],
pointerType: INPUT_TYPE_TOUCH,
srcEvent: ev
});
}
});

function getTouches(ev, type) {
var allTouches = toArray(ev.touches);
var targetIds = this.targetIds;

if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
targetIds[allTouches[0].identifier] = true;
return [allTouches, allTouches];
}

var i,
targetTouches,
changedTouches = toArray(ev.changedTouches),
changedTargetTouches = [],
target = this.target;

targetTouches = allTouches.filter(function(touch) {
return hasParent(touch.target, target);
});

if (type === INPUT_START) {
i = 0;
while (i < targetTouches.length) {
targetIds[targetTouches[i].identifier] = true;
i++;
}
}

i = 0;
while (i < changedTouches.length) {
if (targetIds[changedTouches[i].identifier]) {
changedTargetTouches.push(changedTouches[i]);
}

if (type & (INPUT_END | INPUT_CANCEL)) {
delete targetIds[changedTouches[i].identifier];
}
i++;
}

if (!changedTargetTouches.length) {
return;
}

return [
uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
changedTargetTouches
];
}


var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
Input.apply(this, arguments);

var handler = bindFn(this.handler, this);
this.touch = new TouchInput(this.manager, handler);
this.mouse = new MouseInput(this.manager, handler);

this.primaryTouch = null;
this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
handler: function TMEhandler(manager, inputEvent, inputData) {
var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
return;
}

if (isTouch) {
recordTouches.call(this, inputEvent, inputData);
} else if (isMouse && isSyntheticEvent.call(this, inputData)) {
return;
}

this.callback(manager, inputEvent, inputData);
},

destroy: function destroy() {
this.touch.destroy();
this.mouse.destroy();
}
});

function recordTouches(eventType, eventData) {
if (eventType & INPUT_START) {
this.primaryTouch = eventData.changedPointers[0].identifier;
setLastTouch.call(this, eventData);
} else if (eventType & (INPUT_END | INPUT_CANCEL)) {
setLastTouch.call(this, eventData);
}
}

function setLastTouch(eventData) {
var touch = eventData.changedPointers[0];

if (touch.identifier === this.primaryTouch) {
var lastTouch = {x: touch.clientX, y: touch.clientY};
this.lastTouches.push(lastTouch);
var lts = this.lastTouches;
var removeLastTouch = function() {
var i = lts.indexOf(lastTouch);
if (i > -1) {
lts.splice(i, 1);
}
};
setTimeout(removeLastTouch, DEDUP_TIMEOUT);
}
}

function isSyntheticEvent(eventData) {
var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
for (var i = 0; i < this.lastTouches.length; i++) {
var t = this.lastTouches[i];
var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
return true;
}
}
return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

function TouchAction(manager, value) {
this.manager = manager;
this.set(value);
}

TouchAction.prototype = {
set: function(value) {
if (value == TOUCH_ACTION_COMPUTE) {
value = this.compute();
}

if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
}
this.actions = value.toLowerCase().trim();
},

update: function() {
this.set(this.manager.options.touchAction);
},

compute: function() {
var actions = [];
each(this.manager.recognizers, function(recognizer) {
if (boolOrFn(recognizer.options.enable, [recognizer])) {
actions = actions.concat(recognizer.getTouchAction());
}
});
return cleanTouchActions(actions.join(' '));
},

preventDefaults: function(input) {
var srcEvent = input.srcEvent;
var direction = input.offsetDirection;

if (this.manager.session.prevented) {
srcEvent.preventDefault();
return;
}

var actions = this.actions;
var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

if (hasNone) {

var isTapPointer = input.pointers.length === 1;
var isTapMovement = input.distance < 2;
var isTapTouchTime = input.deltaTime < 250;

if (isTapPointer && isTapMovement && isTapTouchTime) {
return;
}
}

if (hasPanX && hasPanY) {
return;
}

if (hasNone ||
(hasPanY && direction & DIRECTION_HORIZONTAL) ||
(hasPanX && direction & DIRECTION_VERTICAL)) {
return this.preventSrc(srcEvent);
}
},

preventSrc: function(srcEvent) {
this.manager.session.prevented = true;
srcEvent.preventDefault();
}
};

function cleanTouchActions(actions) {
if (inStr(actions, TOUCH_ACTION_NONE)) {
return TOUCH_ACTION_NONE;
}

var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

if (hasPanX && hasPanY) {
return TOUCH_ACTION_NONE;
}

if (hasPanX || hasPanY) {
return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
}

if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
return TOUCH_ACTION_MANIPULATION;
}

return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
if (!NATIVE_TOUCH_ACTION) {
return false;
}
var touchMap = {};
var cssSupports = window.CSS && window.CSS.supports;
['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
});
return touchMap;
}

var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

function Recognizer(options) {
this.options = assign({}, this.defaults, options || {});

this.id = uniqueId();

this.manager = null;

this.options.enable = ifUndefined(this.options.enable, true);

this.state = STATE_POSSIBLE;

this.simultaneous = {};
this.requireFail = [];
}

Recognizer.prototype = {
defaults: {},

set: function(options) {
assign(this.options, options);

this.manager && this.manager.touchAction.update();
return this;
},

recognizeWith: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
return this;
}

var simultaneous = this.simultaneous;
otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
if (!simultaneous[otherRecognizer.id]) {
simultaneous[otherRecognizer.id] = otherRecognizer;
otherRecognizer.recognizeWith(this);
}
return this;
},

dropRecognizeWith: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
return this;
}

otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
delete this.simultaneous[otherRecognizer.id];
return this;
},

requireFailure: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
return this;
}

var requireFail = this.requireFail;
otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
if (inArray(requireFail, otherRecognizer) === -1) {
requireFail.push(otherRecognizer);
otherRecognizer.requireFailure(this);
}
return this;
},

dropRequireFailure: function(otherRecognizer) {
if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
return this;
}

otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
var index = inArray(this.requireFail, otherRecognizer);
if (index > -1) {
this.requireFail.splice(index, 1);
}
return this;
},

hasRequireFailures: function() {
return this.requireFail.length > 0;
},

canRecognizeWith: function(otherRecognizer) {
return !!this.simultaneous[otherRecognizer.id];
},

emit: function(input) {
var self = this;
var state = this.state;

function emit(event) {
self.manager.emit(event, input);
}

if (state < STATE_ENDED) {
emit(self.options.event + stateStr(state));
}

emit(self.options.event); // simple 'eventName' events

if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
emit(input.additionalEvent);
}

if (state >= STATE_ENDED) {
emit(self.options.event + stateStr(state));
}
},

tryEmit: function(input) {
if (this.canEmit()) {
return this.emit(input);
}
this.state = STATE_FAILED;
},

canEmit: function() {
var i = 0;
while (i < this.requireFail.length) {
if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
return false;
}
i++;
}
return true;
},

recognize: function(inputData) {
var inputDataClone = assign({}, inputData);

if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
this.reset();
this.state = STATE_FAILED;
return;
}

if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
this.state = STATE_POSSIBLE;
}

this.state = this.process(inputDataClone);

if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
this.tryEmit(inputDataClone);
}
},

process: function(inputData) { }, // jshint ignore:line

getTouchAction: function() { },

reset: function() { }
};

function stateStr(state) {
if (state & STATE_CANCELLED) {
return 'cancel';
} else if (state & STATE_ENDED) {
return 'end';
} else if (state & STATE_CHANGED) {
return 'move';
} else if (state & STATE_BEGAN) {
return 'start';
}
return '';
}

function directionStr(direction) {
if (direction == DIRECTION_DOWN) {
return 'down';
} else if (direction == DIRECTION_UP) {
return 'up';
} else if (direction == DIRECTION_LEFT) {
return 'left';
} else if (direction == DIRECTION_RIGHT) {
return 'right';
}
return '';
}

function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
var manager = recognizer.manager;
if (manager) {
return manager.get(otherRecognizer);
}
return otherRecognizer;
}

function AttrRecognizer() {
Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
defaults: {
pointers: 1
},

attrTest: function(input) {
var optionPointers = this.options.pointers;
return optionPointers === 0 || input.pointers.length === optionPointers;
},

process: function(input) {
var state = this.state;
var eventType = input.eventType;

var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
var isValid = this.attrTest(input);

if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
return state | STATE_CANCELLED;
} else if (isRecognized || isValid) {
if (eventType & INPUT_END) {
return state | STATE_ENDED;
} else if (!(state & STATE_BEGAN)) {
return STATE_BEGAN;
}
return state | STATE_CHANGED;
}
return STATE_FAILED;
}
});

function PanRecognizer() {
AttrRecognizer.apply(this, arguments);

this.pX = null;
this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
defaults: {
event: 'pan',
threshold: 10,
pointers: 1,
direction: DIRECTION_ALL
},

getTouchAction: function() {
var direction = this.options.direction;
var actions = [];
if (direction & DIRECTION_HORIZONTAL) {
actions.push(TOUCH_ACTION_PAN_Y);
}
if (direction & DIRECTION_VERTICAL) {
actions.push(TOUCH_ACTION_PAN_X);
}
return actions;
},

directionTest: function(input) {
var options = this.options;
var hasMoved = true;
var distance = input.distance;
var direction = input.direction;
var x = input.deltaX;
var y = input.deltaY;

if (!(direction & options.direction)) {
if (options.direction & DIRECTION_HORIZONTAL) {
direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
hasMoved = x != this.pX;
distance = Math.abs(input.deltaX);
} else {
direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
hasMoved = y != this.pY;
distance = Math.abs(input.deltaY);
}
}
input.direction = direction;
return hasMoved && distance > options.threshold && direction & options.direction;
},

attrTest: function(input) {
return AttrRecognizer.prototype.attrTest.call(this, input) &&
(this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
},

emit: function(input) {

this.pX = input.deltaX;
this.pY = input.deltaY;

var direction = directionStr(input.direction);

if (direction) {
input.additionalEvent = this.options.event + direction;
}
this._super.emit.call(this, input);
}
});

function PinchRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
defaults: {
event: 'pinch',
threshold: 0,
pointers: 2
},

getTouchAction: function() {
return [TOUCH_ACTION_NONE];
},

attrTest: function(input) {
return this._super.attrTest.call(this, input) &&
(Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
},

emit: function(input) {
if (input.scale !== 1) {
var inOut = input.scale < 1 ? 'in' : 'out';
input.additionalEvent = this.options.event + inOut;
}
this._super.emit.call(this, input);
}
});

function PressRecognizer() {
Recognizer.apply(this, arguments);

this._timer = null;
this._input = null;
}

inherit(PressRecognizer, Recognizer, {
defaults: {
event: 'press',
pointers: 1,
time: 251, // minimal time of the pointer to be pressed
threshold: 9 // a minimal movement is ok, but keep it low
},

getTouchAction: function() {
return [TOUCH_ACTION_AUTO];
},

process: function(input) {
var options = this.options;
var validPointers = input.pointers.length === options.pointers;
var validMovement = input.distance < options.threshold;
var validTime = input.deltaTime > options.time;

this._input = input;

if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
this.reset();
} else if (input.eventType & INPUT_START) {
this.reset();
this._timer = setTimeoutContext(function() {
this.state = STATE_RECOGNIZED;
this.tryEmit();
}, options.time, this);
} else if (input.eventType & INPUT_END) {
return STATE_RECOGNIZED;
}
return STATE_FAILED;
},

reset: function() {
clearTimeout(this._timer);
},

emit: function(input) {
if (this.state !== STATE_RECOGNIZED) {
return;
}

if (input && (input.eventType & INPUT_END)) {
this.manager.emit(this.options.event + 'up', input);
} else {
this._input.timeStamp = now();
this.manager.emit(this.options.event, this._input);
}
}
});

function RotateRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
defaults: {
event: 'rotate',
threshold: 0,
pointers: 2
},

getTouchAction: function() {
return [TOUCH_ACTION_NONE];
},

attrTest: function(input) {
return this._super.attrTest.call(this, input) &&
(Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
}
});

function SwipeRecognizer() {
AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
defaults: {
event: 'swipe',
threshold: 10,
velocity: 0.3,
direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
pointers: 1
},

getTouchAction: function() {
return PanRecognizer.prototype.getTouchAction.call(this);
},

attrTest: function(input) {
var direction = this.options.direction;
var velocity;

if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
velocity = input.overallVelocity;
} else if (direction & DIRECTION_HORIZONTAL) {
velocity = input.overallVelocityX;
} else if (direction & DIRECTION_VERTICAL) {
velocity = input.overallVelocityY;
}

return this._super.attrTest.call(this, input) &&
direction & input.offsetDirection &&
input.distance > this.options.threshold &&
input.maxPointers == this.options.pointers &&
abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
},

emit: function(input) {
var direction = directionStr(input.offsetDirection);
if (direction) {
this.manager.emit(this.options.event + direction, input);
}

this.manager.emit(this.options.event, input);
}
});

function TapRecognizer() {
Recognizer.apply(this, arguments);

this.pTime = false;
this.pCenter = false;

this._timer = null;
this._input = null;
this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
defaults: {
event: 'tap',
pointers: 1,
taps: 1,
interval: 300, // max time between the multi-tap taps
time: 250, // max time of the pointer to be down (like finger on the screen)
threshold: 9, // a minimal movement is ok, but keep it low
posThreshold: 10 // a multi-tap can be a bit off the initial position
},

getTouchAction: function() {
return [TOUCH_ACTION_MANIPULATION];
},

process: function(input) {
var options = this.options;

var validPointers = input.pointers.length === options.pointers;
var validMovement = input.distance < options.threshold;
var validTouchTime = input.deltaTime < options.time;

this.reset();

if ((input.eventType & INPUT_START) && (this.count === 0)) {
return this.failTimeout();
}

if (validMovement && validTouchTime && validPointers) {
if (input.eventType != INPUT_END) {
return this.failTimeout();
}

var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

this.pTime = input.timeStamp;
this.pCenter = input.center;

if (!validMultiTap || !validInterval) {
this.count = 1;
} else {
this.count += 1;
}

this._input = input;

var tapCount = this.count % options.taps;
if (tapCount === 0) {
if (!this.hasRequireFailures()) {
return STATE_RECOGNIZED;
} else {
this._timer = setTimeoutContext(function() {
this.state = STATE_RECOGNIZED;
this.tryEmit();
}, options.interval, this);
return STATE_BEGAN;
}
}
}
return STATE_FAILED;
},

failTimeout: function() {
this._timer = setTimeoutContext(function() {
this.state = STATE_FAILED;
}, this.options.interval, this);
return STATE_FAILED;
},

reset: function() {
clearTimeout(this._timer);
},

emit: function() {
if (this.state == STATE_RECOGNIZED) {
this._input.tapCount = this.count;
this.manager.emit(this.options.event, this._input);
}
}
});

function Hammer(element, options) {
options = options || {};
options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
return new Manager(element, options);
}

Hammer.VERSION = '2.0.7';

Hammer.defaults = {
domEvents: false,

touchAction: TOUCH_ACTION_COMPUTE,

enable: true,

inputTarget: null,

inputClass: null,

preset: [
[RotateRecognizer, {enable: false}],
[PinchRecognizer, {enable: false}, ['rotate']],
[SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
[PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
[TapRecognizer],
[TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
[PressRecognizer]
],

cssProps: {
userSelect: 'none',

touchSelect: 'none',

touchCallout: 'none',

contentZooming: 'none',

userDrag: 'none',

tapHighlightColor: 'rgba(0,0,0,0)'
}
};

var STOP = 1;
var FORCED_STOP = 2;

function Manager(element, options) {
this.options = assign({}, Hammer.defaults, options || {});

this.options.inputTarget = this.options.inputTarget || element;

this.handlers = {};
this.session = {};
this.recognizers = [];
this.oldCssProps = {};

this.element = element;
this.input = createInputInstance(this);
this.touchAction = new TouchAction(this, this.options.touchAction);

toggleCssProps(this, true);

each(this.options.recognizers, function(item) {
var recognizer = this.add(new (item[0])(item[1]));
item[2] && recognizer.recognizeWith(item[2]);
item[3] && recognizer.requireFailure(item[3]);
}, this);
}

Manager.prototype = {
set: function(options) {
assign(this.options, options);

if (options.touchAction) {
this.touchAction.update();
}
if (options.inputTarget) {
this.input.destroy();
this.input.target = options.inputTarget;
this.input.init();
}
return this;
},

stop: function(force) {
this.session.stopped = force ? FORCED_STOP : STOP;
},

recognize: function(inputData) {
var session = this.session;
if (session.stopped) {
return;
}

this.touchAction.preventDefaults(inputData);

var recognizer;
var recognizers = this.recognizers;

var curRecognizer = session.curRecognizer;

if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
curRecognizer = session.curRecognizer = null;
}

var i = 0;
while (i < recognizers.length) {
recognizer = recognizers[i];

if (session.stopped !== FORCED_STOP && ( // 1
!curRecognizer || recognizer == curRecognizer || // 2
recognizer.canRecognizeWith(curRecognizer))) { // 3
recognizer.recognize(inputData);
} else {
recognizer.reset();
}

if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
curRecognizer = session.curRecognizer = recognizer;
}
i++;
}
},

get: function(recognizer) {
if (recognizer instanceof Recognizer) {
return recognizer;
}

var recognizers = this.recognizers;
for (var i = 0; i < recognizers.length; i++) {
if (recognizers[i].options.event == recognizer) {
return recognizers[i];
}
}
return null;
},

add: function(recognizer) {
if (invokeArrayArg(recognizer, 'add', this)) {
return this;
}

var existing = this.get(recognizer.options.event);
if (existing) {
this.remove(existing);
}

this.recognizers.push(recognizer);
recognizer.manager = this;

this.touchAction.update();
return recognizer;
},

remove: function(recognizer) {
if (invokeArrayArg(recognizer, 'remove', this)) {
return this;
}

recognizer = this.get(recognizer);

if (recognizer) {
var recognizers = this.recognizers;
var index = inArray(recognizers, recognizer);

if (index !== -1) {
recognizers.splice(index, 1);
this.touchAction.update();
}
}

return this;
},

on: function(events, handler) {
if (events === undefined) {
return;
}
if (handler === undefined) {
return;
}

var handlers = this.handlers;
each(splitStr(events), function(event) {
handlers[event] = handlers[event] || [];
handlers[event].push(handler);
});
return this;
},

off: function(events, handler) {
if (events === undefined) {
return;
}

var handlers = this.handlers;
each(splitStr(events), function(event) {
if (!handler) {
delete handlers[event];
} else {
handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
}
});
return this;
},

emit: function(event, data) {
if (this.options.domEvents) {
triggerDomEvent(event, data);
}

var handlers = this.handlers[event] && this.handlers[event].slice();
if (!handlers || !handlers.length) {
return;
}

data.type = event;
data.preventDefault = function() {
data.srcEvent.preventDefault();
};

var i = 0;
while (i < handlers.length) {
handlers[i](data);
i++;
}
},

destroy: function() {
this.element && toggleCssProps(this, false);

this.handlers = {};
this.session = {};
this.input.destroy();
this.element = null;
}
};

function toggleCssProps(manager, add) {
var element = manager.element;
if (!element.style) {
return;
}
var prop;
each(manager.options.cssProps, function(value, name) {
prop = prefixed(element.style, name);
if (add) {
manager.oldCssProps[prop] = element.style[prop];
element.style[prop] = value;
} else {
element.style[prop] = manager.oldCssProps[prop] || '';
}
});
if (!add) {
manager.oldCssProps = {};
}
}

function triggerDomEvent(event, data) {
var gestureEvent = document.createEvent('Event');
gestureEvent.initEvent(event, true, true);
gestureEvent.gesture = data;
data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
INPUT_START: INPUT_START,
INPUT_MOVE: INPUT_MOVE,
INPUT_END: INPUT_END,
INPUT_CANCEL: INPUT_CANCEL,

STATE_POSSIBLE: STATE_POSSIBLE,
STATE_BEGAN: STATE_BEGAN,
STATE_CHANGED: STATE_CHANGED,
STATE_ENDED: STATE_ENDED,
STATE_RECOGNIZED: STATE_RECOGNIZED,
STATE_CANCELLED: STATE_CANCELLED,
STATE_FAILED: STATE_FAILED,

DIRECTION_NONE: DIRECTION_NONE,
DIRECTION_LEFT: DIRECTION_LEFT,
DIRECTION_RIGHT: DIRECTION_RIGHT,
DIRECTION_UP: DIRECTION_UP,
DIRECTION_DOWN: DIRECTION_DOWN,
DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
DIRECTION_VERTICAL: DIRECTION_VERTICAL,
DIRECTION_ALL: DIRECTION_ALL,

Manager: Manager,
Input: Input,
TouchAction: TouchAction,

TouchInput: TouchInput,
MouseInput: MouseInput,
PointerEventInput: PointerEventInput,
TouchMouseInput: TouchMouseInput,
SingleTouchInput: SingleTouchInput,

Recognizer: Recognizer,
AttrRecognizer: AttrRecognizer,
Tap: TapRecognizer,
Pan: PanRecognizer,
Swipe: SwipeRecognizer,
Pinch: PinchRecognizer,
Rotate: RotateRecognizer,
Press: PressRecognizer,

on: addEventListeners,
off: removeEventListeners,
each: each,
merge: merge,
extend: extend,
assign: assign,
inherit: inherit,
bindFn: bindFn,
prefixed: prefixed
});

var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (typeof define === 'function' && define.amd) {
define(function() {
return Hammer;
});
} else if (typeof module != 'undefined' && module.exports) {
module.exports = Hammer;
} else {
window[exportName] = Hammer;
}

})(window, document, 'Hammer');

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/

/*****  ******************************************************************
*
* Copyright 2008-2013 Hannes Hochreiner
*
* The JavaScript code included between the start note '@jessyinkstart'
* and the end note '@jessyinkend' is subject to the terms of the Mozilla
* Public License, v. 2.0. If a copy of the MPL was not distributed with
* this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Alternatively, you can redistribute and/or that part of this file
* under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see http://www.gnu.org/licenses/.
*/

/*****
*  You can find the complete source code of the JessyInk project at:
*  @source http://code.google.com/p/jessyink/
*/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/


/*****
* @jessyinkstart
*
*  The following code is a derivative work of some parts of the JessyInk
*  project.
*  @source http://code.google.com/p/jessyink/
*/

function getElementsByProperty( node, name )
{
var elements = [];

if( node.getAttribute( name ) )
elements.push( node );

for( var counter = 0; counter < node.childNodes.length; ++counter )
{
if( node.childNodes[counter].nodeType == 1 )
{
var subElements = getElementsByProperty( node.childNodes[counter], name );
elements = elements.concat( subElements );
}
}
return elements;
}

function onKeyDown( aEvt )
{
if ( !aEvt )
aEvt = window.event;

var code = aEvt.keyCode || aEvt.charCode;


if (code == 0 && aEvt.key != undefined) {
switch (aEvt.key) {
case 'UIKeyInputLeftArrow':
code = LEFT_KEY;
break;
case 'UIKeyInputUpArrow':
code = UP_KEY;
break;
case 'UIKeyInputRightArrow':
code = RIGHT_KEY;
break;
case 'UIKeyInputDownArrow':
code = DOWN_KEY;
break;
}

}

if( !processingEffect && keyCodeDictionary[currentMode] && keyCodeDictionary[currentMode][code] )
{
return keyCodeDictionary[currentMode][code]();
}
else
{
document.onkeypress = onKeyPress;
return null;
}
}
document.onkeydown = onKeyDown;

function onKeyPress( aEvt )
{
document.onkeypress = null;

if ( !aEvt )
aEvt = window.event;

var str = String.fromCharCode( aEvt.keyCode || aEvt.charCode );

if ( !processingEffect && charCodeDictionary[currentMode] && charCodeDictionary[currentMode][str] )
return charCodeDictionary[currentMode][str]();

return null;
}

function getDefaultKeyCodeDictionary()
{
var keyCodeDict = {};

keyCodeDict[SLIDE_MODE] = {};
keyCodeDict[INDEX_MODE] = {};

keyCodeDict[SLIDE_MODE][LEFT_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][RIGHT_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][UP_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][DOWN_KEY]
= function() { return skipEffects(1); };
keyCodeDict[SLIDE_MODE][PAGE_UP_KEY]
= function() { return aSlideShow.rewindAllEffects(); };
keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY]
= function() { return skipAllEffects(); };
keyCodeDict[SLIDE_MODE][HOME_KEY]
= function() { return aSlideShow.displaySlide( 0, true ); };
keyCodeDict[SLIDE_MODE][END_KEY]
= function() { return aSlideShow.displaySlide( theMetaDoc.nNumberOfSlides - 1, true ); };
keyCodeDict[SLIDE_MODE][SPACE_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][ESCAPE_KEY]
= function() { return aSlideShow.exitSlideShowInApp(); };
keyCodeDict[SLIDE_MODE][Q_KEY]
= function() { return aSlideShow.exitSlideShowInApp(); };

keyCodeDict[INDEX_MODE][LEFT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - 1 ); };
keyCodeDict[INDEX_MODE][RIGHT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + 1 ); };
keyCodeDict[INDEX_MODE][UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][PAGE_UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][HOME_KEY]
= function() { return indexSetPageSlide( 0 ); };
keyCodeDict[INDEX_MODE][END_KEY]
= function() { return indexSetPageSlide( theMetaDoc.nNumberOfSlides - 1 ); };
keyCodeDict[INDEX_MODE][ENTER_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][SPACE_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][ESCAPE_KEY]
= function() { return abandonIndexMode(); };

return keyCodeDict;
}

function getDefaultCharCodeDictionary()
{
var charCodeDict = {};

charCodeDict[SLIDE_MODE] = {};
charCodeDict[INDEX_MODE] = {};

charCodeDict[SLIDE_MODE]['i']
= function () { return toggleSlideIndex(); };

charCodeDict[INDEX_MODE]['i']
= function () { return toggleSlideIndex(); };
charCodeDict[INDEX_MODE]['-']
= function () { return theSlideIndexPage.decreaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['=']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['+']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['0']
= function () { return theSlideIndexPage.resetNumberOfColumns(); };

return charCodeDict;
}


function slideOnMouseUp( aEvt )
{
if (!aEvt)
aEvt = window.event;

var nOffset = 0;

if( aEvt.button == 0 )
nOffset = 1;
else if( aEvt.button == 2 )
nOffset = -1;

if( 0 != nOffset )
dispatchEffects( nOffset );
return true; // the click has been handled
}

document.handleClick = slideOnMouseUp;


function slideOnMouseWheel(aEvt)
{
var delta = 0;

if (!aEvt)
aEvt = window.event;

if (aEvt.wheelDelta)
{ // IE Opera
delta = aEvt.wheelDelta/120;
}
else if (aEvt.detail)
{ // MOZ
delta = -aEvt.detail/3;
}

if (delta > 0)
skipEffects(-1);
else if (delta < 0)
skipEffects(1);

if (aEvt.preventDefault)
aEvt.preventDefault();

aEvt.returnValue = false;
}

if( window.addEventListener )
{
window.addEventListener( 'DOMMouseScroll', function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); }, false );
}

window.onmousewheel
= function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); };

function mouseHandlerDispatch( aEvt, anAction )
{
if( !aEvt )
aEvt = window.event;

var retVal = true;

if ( mouseHandlerDictionary[currentMode] && mouseHandlerDictionary[currentMode][anAction] )
{
var subRetVal = mouseHandlerDictionary[currentMode][anAction]( aEvt );

if( subRetVal != null && subRetVal != undefined )
retVal = subRetVal;
}

if( aEvt.preventDefault && !retVal )
aEvt.preventDefault();

aEvt.returnValue = retVal;

return retVal;
}

document.onmouseup = function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_UP ); };


function mouseClickHelper( aEvt )
{
if( !Detect.isMozilla )
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
var aTextSelection = aWindowObject.getSelection();
var sSelectedText =  aTextSelection.toString();
if( sSelectedText )
{
DBGLOG( 'text selection: ' + sSelectedText );
if( sLastSelectedText !== sSelectedText )
{
bTextHasBeenSelected = true;
sLastSelectedText = sSelectedText;
}
else
{
bTextHasBeenSelected = false;
}
return null;
}
else if( bTextHasBeenSelected )
{
bTextHasBeenSelected = false;
sLastSelectedText = '';
return null;
}
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

var aSlideAnimationsHandler = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler;
if( aSlideAnimationsHandler )
{
var aCurrentEventMultiplexer = aSlideAnimationsHandler.aEventMultiplexer;
if( aCurrentEventMultiplexer )
{
if( aCurrentEventMultiplexer.hasRegisteredMouseClickHandlers() )
{
return aCurrentEventMultiplexer.notifyMouseClick( aEvt );
}
}
}
return slideOnMouseUp( aEvt );
}


function getDefaultMouseHandlerDictionary()
{
var mouseHandlerDict = {};

mouseHandlerDict[SLIDE_MODE] = {};
mouseHandlerDict[INDEX_MODE] = {};

mouseHandlerDict[SLIDE_MODE][MOUSE_UP]
= mouseClickHelper;

mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL]
= function( aEvt ) { return slideOnMouseWheel( aEvt ); };

mouseHandlerDict[INDEX_MODE][MOUSE_UP]
= function( ) { return toggleSlideIndex(); };

return mouseHandlerDict;
}

function indexSetPageSlide( nIndex )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
nIndex = getSafeIndex( nIndex, 0, aMetaSlideSet.length - 1 );

var nSelectedThumbnailIndex = nIndex % theSlideIndexPage.getTotalThumbnails();
var offset = nIndex - nSelectedThumbnailIndex;

if( offset < 0 )
offset = 0;

if( offset != INDEX_OFFSET )
{
INDEX_OFFSET = offset;
displayIndex( INDEX_OFFSET );
}

theSlideIndexPage.setSelection( nSelectedThumbnailIndex );
}


/*****
* @jessyinkend
*
*  The above code is a derivative work of some parts of the JessyInk project.
*  @source http://code.google.com/p/jessyink/
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/

/*****  **********************************************************************
*
*  The 'New' BSD License:
*  **********************
*  Copyright (c) 2005-2012, The Dojo Foundation
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*
*    * Redistributions of source code must retain the above copyright notice,
*      this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution.
*    * Neither the name of the Dojo Foundation nor the names of its contributors
*      may be used to endorse or promote products derived from this software
*      without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/


/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/


/*****
* @dojostart
*
*  The following code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

function has( name )
{
return has.cache[name];
}

has.cache = {};

has.add = function( name, test )
{
has.cache[name] = test;
};

function configureDetectionTools()
{
if( !navigator )
{
log( 'error: configureDetectionTools: configuration failed' );
return null;
}

var n = navigator,
dua = n.userAgent,
dav = n.appVersion,
tv = parseFloat(dav);

has.add('air', dua.indexOf('AdobeAIR') >= 0);
has.add('khtml', dav.indexOf('Konqueror') >= 0 ? tv : undefined);
has.add('webkit', parseFloat(dua.split('WebKit/')[1]) || undefined);
has.add('chrome', parseFloat(dua.split('Chrome/')[1]) || undefined);
has.add('safari', dav.indexOf('Safari')>=0 && !has('chrome') ? parseFloat(dav.split('Version/')[1]) : undefined);
has.add('mac', dav.indexOf('Macintosh') >= 0);
has.add('quirks', document.compatMode == 'BackCompat');
has.add('ios', /iPhone|iPod|iPad/.test(dua));
has.add('android', parseFloat(dua.split('Android ')[1]) || undefined);

if(!has('webkit')){
if(dua.indexOf('Opera') >= 0){
has.add('opera', tv >= 9.8 ? parseFloat(dua.split('Version/')[1]) || tv : tv);
}

if(dua.indexOf('Gecko') >= 0 && !has('khtml') && !has('webkit')){
has.add('mozilla', tv);
}
if(has('mozilla')){
has.add('ff', parseFloat(dua.split('Firefox/')[1] || dua.split('Minefield/')[1]) || undefined);
}

if(document.all && !has('opera')){
var isIE = parseFloat(dav.split('MSIE ')[1]) || undefined;

var mode = document.documentMode;
if(mode && mode != 5 && Math.floor(isIE) != mode){
isIE = mode;
}

has.add('ie', isIE);
}

has.add('wii', typeof opera != 'undefined' && opera.wiiremote);
}

var detect =
{
isFF: has('ff'),

isIE: has('ie'),

isKhtml: has('khtml'),

isWebKit: has('webkit'),

isMozilla: has('mozilla'),
isMoz: has('mozilla'),

isOpera: has('opera'),

isSafari: has('safari'),

isChrome: has('chrome'),

isMac: has('mac'),

isIos: has('ios'),

isAndroid: has('android'),

isWii: has('wii'),

isQuirks: has('quirks'),

isAir: has('air')
};
return detect;
}

/*****
* @dojoend
*
*  The above code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/

/*****  **********************************************************************
*
*   Copyright 2015 The Chromium Authors. All rights reserved.
*
*   The Chromium Authors can be found at
*   http://src.chromium.org/svn/trunk/src/AUTHORS
*
*   Redistribution and use in source and binary forms, with or without
*   modification, are permitted provided that the following conditions are
*   met:
*
*   * Redistributions of source code must retain the above copyright
*   notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*   copyright notice, this list of conditions and the following disclaimer
*   in the documentation and/or other materials provided with the
*   distribution.
*   * Neither the name of Google Inc. nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
*
*   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*   'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
*   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
*   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/


/*****
* @svgpathstart
*
*  The following code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/

(function() { 'use strict';
if (!('SVGPathSeg' in window)) {
window.SVGPathSeg = function(type, typeAsLetter, owningPathSegList) {
this.pathSegType = type;
this.pathSegTypeAsLetter = typeAsLetter;
this._owningPathSegList = owningPathSegList;
}

window.SVGPathSeg.prototype.classname = 'SVGPathSeg';

window.SVGPathSeg.PATHSEG_UNKNOWN = 0;
window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;
window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;
window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;
window.SVGPathSeg.PATHSEG_LINETO_REL = 5;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
window.SVGPathSeg.PATHSEG_ARC_ABS = 10;
window.SVGPathSeg.PATHSEG_ARC_REL = 11;
window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

window.SVGPathSeg.prototype._segmentChanged = function() {
if (this._owningPathSegList)
this._owningPathSegList.segmentChanged(this);
}

window.SVGPathSegClosePath = function(owningPathSegList) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, 'z', owningPathSegList);
}
window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegClosePath.prototype.toString = function() { return '[object SVGPathSegClosePath]'; }
window.SVGPathSegClosePath.prototype._asPathString = function() { return this.pathSegTypeAsLetter; }
window.SVGPathSegClosePath.prototype.clone = function() { return new window.SVGPathSegClosePath(undefined); }

window.SVGPathSegMovetoAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, 'M', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegMovetoAbs.prototype.toString = function() { return '[object SVGPathSegMovetoAbs]'; }
window.SVGPathSegMovetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegMovetoAbs.prototype.clone = function() { return new window.SVGPathSegMovetoAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegMovetoRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, 'm', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegMovetoRel.prototype.toString = function() { return '[object SVGPathSegMovetoRel]'; }
window.SVGPathSegMovetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegMovetoRel.prototype.clone = function() { return new window.SVGPathSegMovetoRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, 'L', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoAbs.prototype.toString = function() { return '[object SVGPathSegLinetoAbs]'; }
window.SVGPathSegLinetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegLinetoAbs.prototype.clone = function() { return new window.SVGPathSegLinetoAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, 'l', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoRel.prototype.toString = function() { return '[object SVGPathSegLinetoRel]'; }
window.SVGPathSegLinetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegLinetoRel.prototype.clone = function() { return new window.SVGPathSegLinetoRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x, y, x1, y1, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, 'C', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicAbs]'; }
window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x, y, x1, y1, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, 'c', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicRel]'; }
window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicRel.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x, y, x1, y1) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, 'Q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
}
window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticAbs]'; }
window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x, y, x1, y1) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, 'q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
}
window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticRel]'; }
window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcAbs = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, 'A', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
}
window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegArcAbs.prototype.toString = function() { return '[object SVGPathSegArcAbs]'; }
window.SVGPathSegArcAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegArcAbs.prototype.clone = function() { return new window.SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcRel = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, 'a', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
}
window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegArcRel.prototype.toString = function() { return '[object SVGPathSegArcRel]'; }
window.SVGPathSegArcRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegArcRel.prototype.clone = function() { return new window.SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegArcRel.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, 'H', owningPathSegList);
this._x = x;
}
window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalAbs]'; }
window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; }
window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function() { return new window.SVGPathSegLinetoHorizontalAbs(undefined, this._x); }
Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, 'h', owningPathSegList);
this._x = x;
}
window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoHorizontalRel.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalRel]'; }
window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; }
window.SVGPathSegLinetoHorizontalRel.prototype.clone = function() { return new window.SVGPathSegLinetoHorizontalRel(undefined, this._x); }
Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, 'V', owningPathSegList);
this._y = y;
}
window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoVerticalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalAbs]'; }
window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; }
window.SVGPathSegLinetoVerticalAbs.prototype.clone = function() { return new window.SVGPathSegLinetoVerticalAbs(undefined, this._y); }
Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, 'v', owningPathSegList);
this._y = y;
}
window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegLinetoVerticalRel.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalRel]'; }
window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; }
window.SVGPathSegLinetoVerticalRel.prototype.clone = function() { return new window.SVGPathSegLinetoVerticalRel(undefined, this._y); }
Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x, y, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, 'S', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothAbs]'; }
window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x, y, x2, y2) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, 's', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
}
window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothRel]'; }
window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() { return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2); }
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, 'T', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothAbs]'; }
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x, y) {
window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, 't', owningPathSegList);
this._x = x;
this._y = y;
}
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothRel]'; }
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; }
window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() { return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y); }
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathElement.prototype.createSVGPathSegClosePath = function() { return new window.SVGPathSegClosePath(undefined); }
window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x, y) { return new window.SVGPathSegMovetoAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x, y) { return new window.SVGPathSegMovetoRel(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x, y) { return new window.SVGPathSegLinetoAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x, y) { return new window.SVGPathSegLinetoRel(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) { return new window.SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) { return new window.SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) { return new window.SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) { return new window.SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1); }
window.SVGPathElement.prototype.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new window.SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
window.SVGPathElement.prototype.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new window.SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x) { return new window.SVGPathSegLinetoHorizontalAbs(undefined, x); }
window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x) { return new window.SVGPathSegLinetoHorizontalRel(undefined, x); }
window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y) { return new window.SVGPathSegLinetoVerticalAbs(undefined, y); }
window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y) { return new window.SVGPathSegLinetoVerticalRel(undefined, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) { return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) { return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) { return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y); }
window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) { return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y); }

if (!('getPathSegAtLength' in window.SVGPathElement.prototype)) {
window.SVGPathElement.prototype.getPathSegAtLength = function(distance) {
if (distance === undefined || !isFinite(distance))
throw 'Invalid arguments.';

var measurementElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');
measurementElement.setAttribute('d', this.getAttribute('d'));
var lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;

if (lastPathSegment <= 0)
return 0;

do {
measurementElement.pathSegList.removeItem(lastPathSegment);
if (distance > measurementElement.getTotalLength())
break;
lastPathSegment--;
} while (lastPathSegment > 0);
return lastPathSegment;
}
}
}

if (!('SVGPathSegList' in window) || !('appendItem' in window.SVGPathSegList.prototype)) {
window.SVGPathSegList = function(pathElement) {
this._pathElement = pathElement;
this._list = this._parsePath(this._pathElement.getAttribute('d'));

this._mutationObserverConfig = { 'attributes': true, 'attributeFilter': ['d'] };
this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
}

window.SVGPathSegList.prototype.classname = 'SVGPathSegList';

Object.defineProperty(window.SVGPathSegList.prototype, 'numberOfItems', {
get: function() {
this._checkPathSynchronizedToList();
return this._list.length;
},
enumerable: true
});

Object.defineProperty(window.SVGPathSegList.prototype, 'length', {
get: function() {
this._checkPathSynchronizedToList();
return this._list.length;
},
enumerable: true
});

Object.defineProperty(window.SVGPathElement.prototype, 'pathSegList', {
get: function() {
if (!this._pathSegList)
this._pathSegList = new window.SVGPathSegList(this);
return this._pathSegList;
},
enumerable: true
});
Object.defineProperty(window.SVGPathElement.prototype, 'normalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(window.SVGPathElement.prototype, 'animatedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(window.SVGPathElement.prototype, 'animatedNormalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });

window.SVGPathSegList.prototype._checkPathSynchronizedToList = function() {
this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
}

window.SVGPathSegList.prototype._updateListFromPathMutations = function(mutationRecords) {
if (!this._pathElement)
return;
var hasPathMutations = false;
mutationRecords.forEach(function(record) {
if (record.attributeName == 'd')
hasPathMutations = true;
});
if (hasPathMutations)
this._list = this._parsePath(this._pathElement.getAttribute('d'));
}

window.SVGPathSegList.prototype._writeListToPath = function() {
this._pathElementMutationObserver.disconnect();
this._pathElement.setAttribute('d', window.SVGPathSegList._pathSegArrayAsString(this._list));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
}

window.SVGPathSegList.prototype.segmentChanged = function(pathSeg) {
this._writeListToPath();
}

window.SVGPathSegList.prototype.clear = function() {
this._checkPathSynchronizedToList();

this._list.forEach(function(pathSeg) {
pathSeg._owningPathSegList = null;
});
this._list = [];
this._writeListToPath();
}

window.SVGPathSegList.prototype.initialize = function(newItem) {
this._checkPathSynchronizedToList();

this._list = [newItem];
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype._checkValidIndex = function(index) {
if (isNaN(index) || index < 0 || index >= this.numberOfItems)
throw 'INDEX_SIZE_ERR';
}

window.SVGPathSegList.prototype.getItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
return this._list[index];
}

window.SVGPathSegList.prototype.insertItemBefore = function(newItem, index) {
this._checkPathSynchronizedToList();

if (index > this.numberOfItems)
index = this.numberOfItems;
if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.splice(index, 0, newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype.replaceItem = function(newItem, index) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._checkValidIndex(index);
this._list[index] = newItem;
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
}

window.SVGPathSegList.prototype.removeItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
var item = this._list[index];
this._list.splice(index, 1);
this._writeListToPath();
return item;
}

window.SVGPathSegList.prototype.appendItem = function(newItem) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.push(newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
};

window.SVGPathSegList.prototype.matrixTransform = function(aSVGMatrix) {
this._checkPathSynchronizedToList();

var nLength = this._list.length;
for( var i = 0; i < nLength; ++i )
{
var nX;
var aPathSeg = this._list[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
nX = aPathSeg._x2;
aPathSeg._x2 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y2 + aSVGMatrix.e;
aPathSeg._y2 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y2 + aSVGMatrix.f;
case 'Q':
nX = aPathSeg._x1;
aPathSeg._x1 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y1 + aSVGMatrix.e;
aPathSeg._y1 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y1 + aSVGMatrix.f;
case 'M':
case 'L':
nX = aPathSeg._x;
aPathSeg._x = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y + aSVGMatrix.e;
aPathSeg._y = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y + aSVGMatrix.f;
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}
}

this._writeListToPath();
};

window.SVGPathSegList.prototype.changeOrientation = function() {
this._checkPathSynchronizedToList();

var aPathSegList = this._list;
var nLength = aPathSegList.length;
if( nLength == 0 ) return;

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList[0];
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.shift();
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
var nX = aPathSeg._x1;
aPathSeg._x1 = aPathSeg._x2;
aPathSeg._x2 = nX;
var nY = aPathSeg._y1;
aPathSeg._y1 = aPathSeg._y2;
aPathSeg._y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: aPathSeg._x, y: aPathSeg._y };
aPathSeg._x = nCurrentX;
aPathSeg._y = nCurrentY;
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
break;
default:
log( 'SVGPathSegList.changeOrientation: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}

}

aPathSegList.reverse();

var aMovePathSeg = new window.SVGPathSegMovetoAbs( this, nCurrentX, nCurrentY );
aPathSegList.unshift( aMovePathSeg );

this._writeListToPath();
};

window.SVGPathSegList._pathSegArrayAsString = function(pathSegArray) {
var string = '';
var first = true;
pathSegArray.forEach(function(pathSeg) {
if (first) {
first = false;
string += pathSeg._asPathString();
} else {
string += ' ' + pathSeg._asPathString();
}
});
return string;
}

window.SVGPathSegList.prototype._parsePath = function(string) {
if (!string || string.length == 0)
return [];

var owningPathSegList = this;

var Builder = function() {
this.pathSegList = [];
}

Builder.prototype.appendSegment = function(pathSeg) {
this.pathSegList.push(pathSeg);
}

var Source = function(string) {
this._string = string;
this._currentIndex = 0;
this._endIndex = this._string.length;
this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;

this._skipOptionalSpaces();
}

Source.prototype._isCurrentSpace = function() {
var character = this._string[this._currentIndex];
return character <= ' ' && (character == ' ' || character == '\n' || character == '\t' || character == '\r' || character == '\f');
}

Source.prototype._skipOptionalSpaces = function() {
while (this._currentIndex < this._endIndex && this._isCurrentSpace())
this._currentIndex++;
return this._currentIndex < this._endIndex;
}

Source.prototype._skipOptionalSpacesOrDelimiter = function() {
if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ',')
return false;
if (this._skipOptionalSpaces()) {
if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ',') {
this._currentIndex++;
this._skipOptionalSpaces();
}
}
return this._currentIndex < this._endIndex;
}

Source.prototype.hasMoreData = function() {
return this._currentIndex < this._endIndex;
}

Source.prototype.peekSegmentType = function() {
var lookahead = this._string[this._currentIndex];
return this._pathSegTypeFromChar(lookahead);
}

Source.prototype._pathSegTypeFromChar = function(lookahead) {
switch (lookahead) {
case 'Z':
case 'z':
return window.SVGPathSeg.PATHSEG_CLOSEPATH;
case 'M':
return window.SVGPathSeg.PATHSEG_MOVETO_ABS;
case 'm':
return window.SVGPathSeg.PATHSEG_MOVETO_REL;
case 'L':
return window.SVGPathSeg.PATHSEG_LINETO_ABS;
case 'l':
return window.SVGPathSeg.PATHSEG_LINETO_REL;
case 'C':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
case 'c':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
case 'Q':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
case 'q':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
case 'A':
return window.SVGPathSeg.PATHSEG_ARC_ABS;
case 'a':
return window.SVGPathSeg.PATHSEG_ARC_REL;
case 'H':
return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
case 'h':
return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
case 'V':
return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
case 'v':
return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
case 'S':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
case 's':
return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
case 'T':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
case 't':
return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
default:
return window.SVGPathSeg.PATHSEG_UNKNOWN;
}
}

Source.prototype._nextCommandHelper = function(lookahead, previousCommand) {
if ((lookahead == '+' || lookahead == '-' || lookahead == '.' || (lookahead >= '0' && lookahead <= '9')) && previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {
if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS)
return window.SVGPathSeg.PATHSEG_LINETO_ABS;
if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL)
return window.SVGPathSeg.PATHSEG_LINETO_REL;
return previousCommand;
}
return window.SVGPathSeg.PATHSEG_UNKNOWN;
}

Source.prototype.initialCommandIsMoveTo = function() {
if (!this.hasMoreData())
return true;
var command = this.peekSegmentType();
return command == window.SVGPathSeg.PATHSEG_MOVETO_ABS || command == window.SVGPathSeg.PATHSEG_MOVETO_REL;
}

Source.prototype._parseNumber = function() {
var exponent = 0;
var integer = 0;
var frac = 1;
var decimal = 0;
var sign = 1;
var expsign = 1;

var startIndex = this._currentIndex;

this._skipOptionalSpaces();

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '+')
this._currentIndex++;
else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
sign = -1;
}

if (this._currentIndex == this._endIndex || ((this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9') && this._string.charAt(this._currentIndex) != '.'))
return undefined;

var startIntPartIndex = this._currentIndex;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9')
this._currentIndex++; // Advance to first non-digit.

if (this._currentIndex != startIntPartIndex) {
var scanIntPartIndex = this._currentIndex - 1;
var multiplier = 1;
while (scanIntPartIndex >= startIntPartIndex) {
integer += multiplier * (this._string.charAt(scanIntPartIndex--) - '0');
multiplier *= 10;
}
}

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '.') {
this._currentIndex++;

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
frac *= 10;
decimal += (this._string.charAt(this._currentIndex) - '0') / frac;
this._currentIndex += 1;
}
}

if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == 'e' || this._string.charAt(this._currentIndex) == 'E') && (this._string.charAt(this._currentIndex + 1) != 'x' && this._string.charAt(this._currentIndex + 1) != 'm')) {
this._currentIndex++;

if (this._string.charAt(this._currentIndex) == '+') {
this._currentIndex++;
} else if (this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
expsign = -1;
}

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;

while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
exponent *= 10;
exponent += (this._string.charAt(this._currentIndex) - '0');
this._currentIndex++;
}
}

var number = integer + decimal;
number *= sign;

if (exponent)
number *= Math.pow(10, expsign * exponent);

if (startIndex == this._currentIndex)
return undefined;

this._skipOptionalSpacesOrDelimiter();

return number;
}

Source.prototype._parseArcFlag = function() {
if (this._currentIndex >= this._endIndex)
return undefined;
var flag = false;
var flagChar = this._string.charAt(this._currentIndex++);
if (flagChar == '0')
flag = false;
else if (flagChar == '1')
flag = true;
else
return undefined;

this._skipOptionalSpacesOrDelimiter();
return flag;
}

Source.prototype.parseSegment = function() {
var lookahead = this._string[this._currentIndex];
var command = this._pathSegTypeFromChar(lookahead);
if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {
if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN)
return null;
command = this._nextCommandHelper(lookahead, this._previousCommand);
if (command == window.SVGPathSeg.PATHSEG_UNKNOWN)
return null;
} else {
this._currentIndex++;
}

this._previousCommand = command;

switch (command) {
case window.SVGPathSeg.PATHSEG_MOVETO_REL:
return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_MOVETO_ABS:
return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_REL:
return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_ABS:
return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
case window.SVGPathSeg.PATHSEG_CLOSEPATH:
this._skipOptionalSpaces();
return new window.SVGPathSegClosePath(owningPathSegList);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case window.SVGPathSeg.PATHSEG_ARC_REL:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
case window.SVGPathSeg.PATHSEG_ARC_ABS:
var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
default:
throw 'Unknown path seg type.'
}
}

var builder = new Builder();
var source = new Source(string);

if (!source.initialCommandIsMoveTo())
return [];
while (source.hasMoreData()) {
var pathSeg = source.parseSegment();
if (!pathSeg)
return [];
builder.appendSegment(pathSeg);
}

return builder.pathSegList;
}
}
}());

/*****
* @svgpathend
*
*  The above code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/

/*****  ******************************************************************
*
* This file is part of the LibreOffice project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* This file incorporates work covered by the following license notice:
*
*   Licensed to the Apache Software Foundation (ASF) under one or more
*   contributor license agreements. See the NOTICE file distributed
*   with this work for additional information regarding copyright
*   ownership. The ASF licenses this file to you under the Apache
*   License, Version 2.0 (the 'License'); you may not use this file
*   except in compliance with the License. You may obtain a copy of
*   the License at http://www.apache.org/licenses/LICENSE-2.0 .
*
************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/


/*****
* @libreofficestart
*
* Several parts of the following code are the result of the porting,
* started on August 2011, of the C++ code included in the source
* files placed under the folder '/slideshow/source' and
* sub-folders. This got later rebased onto the AL2-licensed versions
* of those files in early 2013.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/


window.onload = init;


var aOOOElemMetaSlides = 'ooo:meta_slides';
var aOOOElemMetaSlide = 'ooo:meta_slide';
var aOOOElemTextField = 'ooo:text_field';
var aPresentationClipPathId = 'presentation_clip_path';
var aPresentationClipPathShrinkId = 'presentation_clip_path_shrink';

var aOOOAttrNumberOfSlides = 'number-of-slides';
var aOOOAttrStartSlideNumber= 'start-slide-number';
var aOOOAttrNumberingType = 'page-numbering-type';
var aOOOAttrListItemNumberingType= 'numbering-type';
var aOOOAttrUsePositionedChars = 'use-positioned-chars';

var aOOOAttrSlide = 'slide';
var aOOOAttrMaster = 'master';
var aOOOAttrHasTransition = 'has-transition';
var aOOOAttrBackgroundVisibility = 'background-visibility';
var aOOOAttrMasterObjectsVisibility = 'master-objects-visibility';
var aOOOAttrPageNumberVisibility = 'page-number-visibility';
var aOOOAttrDateTimeVisibility = 'date-time-visibility';
var aOOOAttrFooterVisibility = 'footer-visibility';
var aOOOAttrHeaderVisibility = 'header-visibility';
var aOOOAttrDateTimeField = 'date-time-field';
var aOOOAttrFooterField = 'footer-field';
var aOOOAttrHeaderField = 'header-field';

var aOOOAttrDateTimeFormat = 'date-time-format';

var aOOOAttrTextAdjust = 'text-adjust';

var aClipPathGroupClassName = 'ClipPathGroup';
var aPageClassName = 'Page';
var aSlideNumberClassName = 'Slide_Number';
var aDateTimeClassName = 'Date/Time';
var aFooterClassName = 'Footer';
var aHeaderClassName = 'Header';

var NSS = {};
NSS['svg']='http://www.w3.org/2000/svg';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['ooo'] = 'http://xml.openoffice.org/svg/export';
NSS['presentation'] = 'http://sun.com/xmlns/staroffice/presentation';
NSS['smil'] = 'http://www.w3.org/2001/SMIL20/';
NSS['anim'] = 'urn:oasis:names:tc:opendocument:xmlns:animation:1.0';

var SLIDE_MODE = 1;
var INDEX_MODE = 2;

var MOUSE_UP = 1;
var MOUSE_DOWN = 2; // eslint-disable-line no-unused-vars
var MOUSE_MOVE = 3; // eslint-disable-line no-unused-vars
var MOUSE_WHEEL = 4;

var LEFT_KEY = 37;          // cursor left keycode
var UP_KEY = 38;            // cursor up keycode
var RIGHT_KEY = 39;         // cursor right keycode
var DOWN_KEY = 40;          // cursor down keycode
var PAGE_UP_KEY = 33;       // page up keycode
var PAGE_DOWN_KEY = 34;     // page down keycode
var HOME_KEY = 36;          // home keycode
var END_KEY = 35;           // end keycode
var ENTER_KEY = 13;
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;
var Q_KEY = 81;

var HIDDEN = 0;
var VISIBLE = 1;
var INHERIT = 2;
var aVisibilityAttributeValue = [ 'hidden', 'visible', 'inherit' ];  // eslint-disable-line no-unused-vars
var aVisibilityValue = { 'hidden' : HIDDEN, 'visible' : VISIBLE, 'inherit' : INHERIT };

var ROOT_NODE = document.getElementsByTagNameNS( NSS['svg'], 'svg' )[0];
var WIDTH = 0;
var HEIGHT = 0;
var INDEX_COLUMNS_DEFAULT = 3;
var INDEX_OFFSET = 0;

var Detect = configureDetectionTools();
var theMetaDoc;
var theSlideIndexPage;
var currentMode = SLIDE_MODE;
var processingEffect = false;
var nCurSlide = undefined;
var bTextHasBeenSelected = false;
var sLastSelectedText = '';


var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();


function object( aObject )
{
var F = function() {};
F.prototype = aObject;
return new F();
}


function extend( aSubType, aSuperType )
{
if (!aSuperType || !aSubType)
{
alert('extend failed, verify dependencies');
}
var OP = Object.prototype;
var sp = aSuperType.prototype;
var rp = object( sp );
aSubType.prototype = rp;

rp.constructor = aSubType;
aSubType.superclass = sp;

if (aSuperType != Object && sp.constructor == OP.constructor)
{
sp.constructor = aSuperType;
}

return aSubType;
}


function instantiate( TemplateClass, BaseType )
{
if( !TemplateClass.instanceSet )
TemplateClass.instanceSet = [];

var nSize = TemplateClass.instanceSet.length;

for( var i = 0; i < nSize; ++i )
{
if( TemplateClass.instanceSet[i].base === BaseType )
return TemplateClass.instanceSet[i].instance;
}

TemplateClass.instanceSet[ nSize ] = {};
TemplateClass.instanceSet[ nSize ].base = BaseType;
TemplateClass.instanceSet[ nSize ].instance = TemplateClass( BaseType );

return TemplateClass.instanceSet[ nSize ].instance;
}


function Rectangle( aSVGRectElem )
{
var x = parseInt( aSVGRectElem.getAttribute( 'x' ) );
var y = parseInt( aSVGRectElem.getAttribute( 'y' ) );
var width = parseInt( aSVGRectElem.getAttribute( 'width' ) );
var height = parseInt( aSVGRectElem.getAttribute( 'height' ) );

this.left = x;
this.right = x + width;
this.top = y;
this.bottom = y + height;
}

function getKeyByValue(aObj, value) {
for(var key in aObj) {
if(aObj[key] == value)
return key;
}
return null;
}

function log( message )
{
if( typeof console == 'object' )
{
console.log( message );
}
else if( typeof opera == 'object' )
{
opera.postError( message );
}
else if( typeof java == 'object' && typeof java.lang == 'object' )
{
java.lang.System.out.println( message );
}
}

function getNSAttribute( sNSPrefix, aElem, sAttrName )
{
if( !aElem ) return null;
if( 'getAttributeNS' in aElem )
{
return aElem.getAttributeNS( NSS[sNSPrefix], sAttrName );
}
else
{
return aElem.getAttribute( sNSPrefix + ':' + sAttrName );
}
}

function getOOOAttribute( aElem, sAttrName )
{
return getNSAttribute( 'ooo', aElem, sAttrName );
}

function setNSAttribute( sNSPrefix, aElem, sAttrName, aValue )
{
if( !aElem ) return false;
if( 'setAttributeNS' in aElem )
{
aElem.setAttributeNS( NSS[sNSPrefix], sAttrName, aValue );
return true;
}
else
{
aElem.setAttribute(sNSPrefix + ':' + sAttrName, aValue );
return true;
}
}

function getElementsByClassName( aElem, sClassName )
{

var aElementSet = [];
if( 'getElementsByClassName' in aElem )
{
aElementSet = aElem.getElementsByClassName( sClassName );
}
else
{
var aElementSetByClassProperty = getElementsByProperty( aElem, 'class' );
for( var i = 0; i < aElementSetByClassProperty.length; ++i )
{
var sAttrClassName = aElementSetByClassProperty[i].getAttribute( 'class' );
if( sAttrClassName == sClassName )
{
aElementSet.push( aElementSetByClassProperty[i] );
}
}
}
return aElementSet;
}

function getElementByClassName( aElem, sClassName /*, sTagName */)
{
var aElementSet = getElementsByClassName( aElem, sClassName );
if ( aElementSet.length == 1 )
return aElementSet[0];
else
return null;
}

function getClassAttribute(  aElem )
{
if( aElem )
return aElem.getAttribute( 'class' );
return '';
}

function createElementGroup( aParentElement, aElementList, nFrom, nCount, sGroupClass, sGroupId )
{
var nTo = nFrom + nCount;
if( nCount < 1 || aElementList.length < nTo )
{
log( 'createElementGroup: not enough elements available.' );
return;
}
var firstElement = aElementList[nFrom];
if( !firstElement )
{
log( 'createElementGroup: element not found.' );
return;
}
var aGroupElement = document.createElementNS( NSS['svg'], 'g' );
if( sGroupId )
aGroupElement.setAttribute( 'id', sGroupId );
if( sGroupClass )
aGroupElement.setAttribute( 'class', sGroupClass );
aParentElement.insertBefore( aGroupElement, firstElement );
var i = nFrom;
for( ; i < nTo; ++i )
{
aParentElement.removeChild( aElementList[i] );
aGroupElement.appendChild( aElementList[i] );
}
}

function initVisibilityProperty( aElement )
{
var nVisibility = VISIBLE;
var sVisibility = aElement.getAttribute( 'visibility' );
if( sVisibility ) nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
}

function getSafeIndex( nIndex, nMin, nMax )
{
if( nIndex < nMin )
return nMin;
else if( nIndex > nMax )
return nMax;
else
return nIndex;
}

function getRandomInt( nMax )
{
return Math.floor( Math.random() * nMax );
}

function isTextFieldElement( aElement ) // eslint-disable-line no-unused-vars
{
var sClassName = aElement.getAttribute( 'class' );
return ( sClassName === aSlideNumberClassName ) ||
( sClassName === aFooterClassName ) ||
( sClassName === aHeaderClassName ) ||
( sClassName === aDateTimeClassName );
}


function DebugPrinter()
{
this.bEnabled = false;
}


DebugPrinter.prototype.on = function()
{
this.bEnabled = true;
};

DebugPrinter.prototype.off = function()
{
this.bEnabled = false;
};

DebugPrinter.prototype.isEnabled = function()
{
return this.bEnabled;
};

DebugPrinter.prototype.print = function( sMessage, nTime )
{
if( this.isEnabled() )
{
var sInfo = 'DBG: ' + sMessage;
if( nTime )
sInfo += ' (at: ' + String( nTime / 1000 ) + 's)';
log( sInfo );
}
};


var aGenericDebugPrinter = new DebugPrinter();
aGenericDebugPrinter.off();
var DBGLOG = bind2( DebugPrinter.prototype.print, aGenericDebugPrinter );

var NAVDBG = new DebugPrinter();
NAVDBG.off();

var ANIMDBG = new DebugPrinter();
ANIMDBG.off();

var aRegisterEventDebugPrinter = new DebugPrinter();
aRegisterEventDebugPrinter.off();

var aTimerEventQueueDebugPrinter = new DebugPrinter();
aTimerEventQueueDebugPrinter.off();

var aEventMultiplexerDebugPrinter = new DebugPrinter();
aEventMultiplexerDebugPrinter.off();

var aNextEffectEventArrayDebugPrinter = new DebugPrinter();
aNextEffectEventArrayDebugPrinter.off();

var aActivityQueueDebugPrinter = new DebugPrinter();
aActivityQueueDebugPrinter.off();

var aAnimatedElementDebugPrinter = new DebugPrinter();
aAnimatedElementDebugPrinter.off();


function MetaDocument()
{
var aMetaDocElem = document.getElementById( aOOOElemMetaSlides );
assert( aMetaDocElem, 'MetaDocument: the svg element with id:' + aOOOElemMetaSlides + 'is not valid.');

this.nNumberOfSlides = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberOfSlides ) );
assert( typeof this.nNumberOfSlides == 'number' && this.nNumberOfSlides > 0,
'MetaDocument: number of slides is zero or undefined.' );
this.nStartSlideNumber = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrStartSlideNumber ) ) || 0;
this.sPageNumberingType = aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberingType ) || 'arabic';
this.bIsUsePositionedChars = ( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrUsePositionedChars ) === 'true' );

this.aClipPathGroup = getElementByClassName( ROOT_NODE, aClipPathGroupClassName );
assert( this.aClipPathGroup, 'MetaDocument: the clip path group element is not valid.');

this.aPresentationClipPath = document.getElementById( aPresentationClipPathId );
assert( this.aPresentationClipPath,
'MetaDocument: the presentation clip path element element is not valid.');

this.aMetaSlideSet = [];
this.aMasterPageSet = {};
this.aTextFieldHandlerSet = {};
this.aTextFieldContentProviderSet = [];
this.aSlideNumberProvider = new SlideNumberProvider( this.nStartSlideNumber + 1, this.sPageNumberingType );

this.bIsAnimated = false;
this.aSlideAnimationsMap = {};
this.initSlideAnimationsMap();

this.theMetaDummySlide = new MetaSlide( 'ooo:meta_dummy_slide', this );

for( var i = 0; i < this.nNumberOfSlides; ++i )
{
var sMetaSlideId = aOOOElemMetaSlide + '_' + i;
this.aMetaSlideSet.push( new MetaSlide( sMetaSlideId, this ) );
}
assert( this.aMetaSlideSet.length == this.nNumberOfSlides,
'MetaDocument: aMetaSlideSet.length != nNumberOfSlides.' );
}

MetaDocument.prototype =
{

getCurrentSlide : function()
{
return this.aMetaSlideSet[nCurSlide];
},

setCurrentSlide : function( nSlideIndex )
{
if( nSlideIndex >= 0 &&  nSlideIndex < this.nNumberOfSlides )
{
if( nCurSlide !== undefined )
this.aMetaSlideSet[nCurSlide].hide();
this.aMetaSlideSet[nSlideIndex].show();
nCurSlide = nSlideIndex;
}
else
{
log('MetaDocument.setCurrentSlide: slide index out of range: ' + nSlideIndex );
}
},


initSlideAnimationsMap : function()
{
var aAnimationsSection = document.getElementById( 'presentation-animations' );
if( aAnimationsSection )
{
var aAnimationsDefSet = aAnimationsSection.getElementsByTagName( 'defs' );

this.bIsAnimated = ( typeof aAnimationsDefSet.length =='number' &&
aAnimationsDefSet.length > 0 );

for( var i = 0; i < aAnimationsDefSet.length; ++i )
{
var sSlideId = aAnimationsDefSet[i].getAttributeNS( NSS['ooo'], aOOOAttrSlide );
var aChildSet = getElementChildren( aAnimationsDefSet[i] );
if( sSlideId && ( aChildSet.length === 1 ) )
{
this.aSlideAnimationsMap[ sSlideId ] = aChildSet[0];
}
}
}
}

}; // end MetaDocument prototype

function MetaSlide( sMetaSlideId, aMetaDoc )
{
this.theDocument = document;
this.id = sMetaSlideId;
this.theMetaDoc = aMetaDoc;

this.element = this.theDocument.getElementById( this.id );
assert( this.element,
'MetaSlide: meta_slide element <' + this.id + '> not found.' );

this.slideId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrSlide );
this.slideElement = this.theDocument.getElementById( this.slideId );
assert( this.slideElement,
'MetaSlide: slide element <' + this.slideId + '> not found.' );

if( this.slideId !== 'dummy_slide' )
this.nSlideNumber = parseInt( this.slideId.substr(2) );
else
this.nSlideNumber= -1;

this.aContainerElement = this.slideElement.parentNode;
this.slideContainerId = this.aContainerElement.getAttribute( 'id' );
this.aVisibilityStatusElement = this.aContainerElement.parentNode;

this.pageElement = getElementByClassName( this.slideElement, aPageClassName );
assert( this.pageElement,
'MetaSlide: page element <' + this.slideId + '> not found.' );

this.masterPage = this.initMasterPage();

this.nAreMasterObjectsVisible     = this.initVisibilityProperty( aOOOAttrMasterObjectsVisibility,  VISIBLE );
this.nIsBackgroundVisible         = this.initVisibilityProperty( aOOOAttrBackgroundVisibility,     VISIBLE );
this.nIsPageNumberVisible         = this.initVisibilityProperty( aOOOAttrPageNumberVisibility,     HIDDEN );
this.nIsDateTimeVisible           = this.initVisibilityProperty( aOOOAttrDateTimeVisibility,       VISIBLE );
this.nIsFooterVisible             = this.initVisibilityProperty( aOOOAttrFooterVisibility,         VISIBLE );
this.nIsHeaderVisible             = this.initVisibilityProperty( aOOOAttrHeaderVisibility,         VISIBLE );

this.bIsDateTimeVariable = undefined;

this.aTextFieldContentProviderSet = {};
this.aTextFieldContentProviderSet[aSlideNumberClassName]   = this.initSlideNumberFieldContentProvider();
this.aTextFieldContentProviderSet[aDateTimeClassName]      = this.initDateTimeFieldContentProvider( aOOOAttrDateTimeField );
this.aTextFieldContentProviderSet[aFooterClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrFooterField );
this.aTextFieldContentProviderSet[aHeaderClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrHeaderField );

this.aTransitionHandler = null;
this.bHasTransition = this.initHasTransition() || true;
if( this.bHasTransition )
{
this.aTransitionHandler = new SlideTransition( this.getSlideAnimationsRoot(), this.slideId );
}

this.aSlideAnimationsHandler = new SlideAnimations( aSlideShow.getContext() );
this.aSlideAnimationsHandler.importAnimations( this.getSlideAnimationsRoot() );
this.aSlideAnimationsHandler.parseElements();

if( false && this.aSlideAnimationsHandler.aRootNode )
log( this.aSlideAnimationsHandler.aRootNode.info( true ) );

this.aTextShapeSet = this.collectTextShapes();

this.aHyperlinkSet = this.initHyperlinks();

}

MetaSlide.prototype =
{

show : function()
{
this.updateMasterPageView();
this.aVisibilityStatusElement.setAttribute( 'visibility', 'inherit' );
},

hide : function()
{
this.aVisibilityStatusElement.setAttribute( 'visibility', 'hidden' );
},

updateMasterPageView : function()
{
if( !this.aMasterPageView )
{
this.aMasterPageView = new MasterPageView( this );
this.aMasterPageView.attachToSlide();
}
this.aMasterPageView.update();
},

initMasterPage : function()
{
var sMasterPageId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrMaster );

if( !this.theMetaDoc.aMasterPageSet.hasOwnProperty( sMasterPageId ) )
{
this.theMetaDoc.aMasterPageSet[ sMasterPageId ] = new MasterPage( sMasterPageId, this );

this.theMetaDoc.aTextFieldHandlerSet[ sMasterPageId ] = {};
}
return this.theMetaDoc.aMasterPageSet[ sMasterPageId ];
},

initHasTransition : function()
{
var sHasTransition = this.element.getAttributeNS( NSS['ooo'], aOOOAttrHasTransition );
return ( sHasTransition === 'true' );
},

initVisibilityProperty : function( aVisibilityAttribute, nDefaultValue )
{
var nVisibility = nDefaultValue;
var sVisibility = getOOOAttribute( this.element, aVisibilityAttribute );
if( sVisibility )
nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
},

initSlideNumberFieldContentProvider : function()
{
return this.theMetaDoc.aSlideNumberProvider;
},

initDateTimeFieldContentProvider : function( aOOOAttrDateTimeField )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttrDateTimeField );
if( !sTextFieldId )  return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt(sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextField;
var aTextFieldElem = document.getElementById( sTextFieldId );
var sClassName = getClassAttribute( aTextFieldElem );
if( sClassName == 'FixedDateTimeField' )
{
aTextField = new FixedTextProvider( aTextFieldElem );
this.bIsDateTimeVariable = false;
}
else if( sClassName == 'VariableDateTimeField' )
{
aTextField = new CurrentDateTimeProvider( aTextFieldElem );
this.bIsDateTimeVariable = true;
}
else
{
aTextField = null;
}
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] = aTextField;
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

initFixedTextFieldContentProvider : function( aOOOAttribute )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttribute );
if( !sTextFieldId ) return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt( sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextFieldElem = document.getElementById( sTextFieldId );
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ]
= new FixedTextProvider( aTextFieldElem );
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

collectTextShapes : function()
{
var aTextShapeSet = [];
var aTextShapeIndexElem = getElementByClassName( document, 'TextShapeIndex' );
if( aTextShapeIndexElem )
{
var aIndexEntryList = getElementChildren( aTextShapeIndexElem );
var i;
for( i = 0; i < aIndexEntryList.length; ++i )
{
var sSlideId = getOOOAttribute( aIndexEntryList[i], 'slide' );
if( sSlideId === this.slideId )
{
var sTextShapeIds = getOOOAttribute( aIndexEntryList[i], 'id-list' );
if( sTextShapeIds )
{
var aTextShapeIdSet =  sTextShapeIds.split( ' ' );
var j;
for( j = 0; j < aTextShapeIdSet.length; ++j )
{
var aTextShapeElem = document.getElementById( aTextShapeIdSet[j] );
if( aTextShapeElem )
{
aTextShapeSet.push( aTextShapeElem );
}
else
{
log( 'warning: MetaSlide.collectTextShapes: text shape with id <' + aTextShapeIdSet[j] + '> is not valid.'  );
}
}
}
break;
}
}
}
return aTextShapeSet;
},

initHyperlinks : function()
{
var aHyperlinkSet = {};
var i;
for( i = 0; i < this.aTextShapeSet.length; ++i )
{
if( this.aTextShapeSet[i] )
{
var aHyperlinkIdList = getElementByClassName( this.aTextShapeSet[i], 'HyperlinkIdList' );
if( aHyperlinkIdList )
{
var sHyperlinkIds = aHyperlinkIdList.textContent;
if( sHyperlinkIds )
{
var aHyperlinkIdSet = sHyperlinkIds.trim().split( ' ' );
var j;
for( j = 0; j < aHyperlinkIdSet.length; ++j )
{
var sId = aHyperlinkIdSet[j];
aHyperlinkSet[ sId ] = new HyperlinkElement( sId, this.aSlideAnimationsHandler.aEventMultiplexer );
}
}
}
}
}
return aHyperlinkSet;
},

getSlideAnimationsRoot : function()
{
return this.theMetaDoc.aSlideAnimationsMap[ this.slideId ];
}

}; // end MetaSlide prototype

function MasterPage( sMasterPageId, aMetaSlide )
{
this.id = sMasterPageId;
this.metaSlide = aMetaSlide;

this.element = document.getElementById( this.id );
assert( this.element,
'MasterPage: master page element <' + this.id + '> not found.' );

this.background = getElementByClassName( this.element, 'Background' );
if( this.background )
{
this.backgroundId = this.background.getAttribute( 'id' );
this.backgroundVisibility = initVisibilityProperty( this.background );
}
else
{
this.backgroundId = '';
log( 'MasterPage: the background element is not valid.' );
}

this.backgroundObjects = getElementByClassName( this.element, 'BackgroundObjects' );
if( this.backgroundObjects )
{
this.backgroundObjectsId = this.backgroundObjects.getAttribute( 'id' );
this.backgroundObjectsVisibility = initVisibilityProperty( this.backgroundObjects );

if( this.backgroundObjectsVisibility != HIDDEN )
{
var aBackgroundObjectList = getElementChildren( this.backgroundObjects );
var nFrom = 0;
var nCount = 0;
var nSubGroupId = 1;
var sClass;
var sId = '';
this.aBackgroundObjectSubGroupIdList = [];
var i = 0;
for( ; i < aBackgroundObjectList.length; ++i )
{
sClass = aBackgroundObjectList[i].getAttribute( 'class' );
if( !sClass || ( ( sClass !== aDateTimeClassName ) && ( sClass !== aFooterClassName )
&& ( sClass !== aHeaderClassName ) && ( sClass !== aSlideNumberClassName ) ) )
{
if( nCount === 0 )
{
nFrom = i;
sId = this.backgroundObjectsId + '.' + nSubGroupId;
++nSubGroupId;
this.aBackgroundObjectSubGroupIdList.push( sId );
}
++nCount;
}
else
{
this.aBackgroundObjectSubGroupIdList.push( sClass );
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
nCount = 0;
}
}
}
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
}
}
}
else
{
this.backgroundObjectsId = '';
log( 'MasterPage: the background objects element is not valid.' );
}

this.aPlaceholderShapeSet = {};
this.initPlaceholderShapes();
}

MasterPage.prototype =
{

initPlaceholderShapes : function()
{
this.aPlaceholderShapeSet[ aSlideNumberClassName ] = new PlaceholderShape( this, aSlideNumberClassName );
this.aPlaceholderShapeSet[ aDateTimeClassName ] = new PlaceholderShape( this, aDateTimeClassName );
this.aPlaceholderShapeSet[ aFooterClassName ] = new PlaceholderShape( this, aFooterClassName );
this.aPlaceholderShapeSet[ aHeaderClassName ] = new PlaceholderShape( this, aHeaderClassName );
}

}; // end MasterPage prototype

function PlaceholderShape( aMasterPage, sClassName )
{
this.masterPage = aMasterPage;
this.className = sClassName;

this.element = null;
this.textElement = null;
this.init();
}

PlaceholderShape.prototype.isValid = function()
{
return ( this.element && this.textElement );
};


PlaceholderShape.prototype.init = function()
{

var aTextFieldElement = getElementByClassName( this.masterPage.backgroundObjects, this.className );
if( aTextFieldElement )
{
var aPlaceholderElement = getElementByClassName( aTextFieldElement, 'PlaceholderText' );
if( aPlaceholderElement )
{
var aSVGRectElem = getElementByClassName( aTextFieldElement, 'BoundingBox' );
if( aSVGRectElem )
{
var aRect = new Rectangle( aSVGRectElem );
var sTextAdjust = getOOOAttribute( aTextFieldElement, aOOOAttrTextAdjust ) || 'left';
var sTextAnchor, sX;
if( sTextAdjust == 'left' )
{
sTextAnchor = 'start';
sX = String( aRect.left );
}
else if( sTextAdjust == 'right' )
{
sTextAnchor = 'end';
sX = String( aRect.right );
}
else if( sTextAdjust == 'center' )
{
sTextAnchor = 'middle';
var nMiddle = ( aRect.left + aRect.right ) / 2;
sX = String( parseInt( String( nMiddle ) ) );
}
if( sTextAnchor )
aPlaceholderElement.setAttribute( 'text-anchor', sTextAnchor );
if( sX )
aPlaceholderElement.setAttribute( 'x', sX );
}

if( this.masterPage.metaSlide.theMetaDoc.bIsUsePositionedChars )
{
var aTextLineGroupElem = aPlaceholderElement.parentNode.parentNode;
if( aTextLineGroupElem )
{
var sFontFamilyAttr = aTextLineGroupElem.getAttribute( 'font-family' );
if( sFontFamilyAttr )
{
var aChildSet = getElementChildren( aTextLineGroupElem );
if( aChildSet.length > 1  )
var i = 1;
for( ; i < aChildSet.length; ++i )
{
aTextLineGroupElem.removeChild( aChildSet[i] );
}
}
}
}
this.element = aTextFieldElement;
this.textElement = aPlaceholderElement;
}
}
};

function MasterPageView( aMetaSlide )
{
this.aMetaSlide = aMetaSlide;
this.aSlideElement = aMetaSlide.slideElement;
this.aPageElement = aMetaSlide.pageElement;
this.aMasterPage = aMetaSlide.masterPage;
this.aMPVElement = this.createElement();
this.bIsAttached = false;
}


MasterPageView.prototype.attachToSlide = function()
{
if( !this.bIsAttached )
{
var aInsertedElement = this.aSlideElement.insertBefore( this.aMPVElement, this.aPageElement );
assert( aInsertedElement === this.aMPVElement,
'MasterPageView.attachToSlide: aInsertedElement != this.aMPVElement' );

this.bIsAttached = true;
}
};

MasterPageView.prototype.detachFromSlide = function()
{
if( this.bIsAttached )
{
this.aSlideElement.removeChild( this.aMPVElement );
this.bIsAttached = false;
}
};

MasterPageView.prototype.update = function()
{
if( this.aDateTimeFieldHandler && this.aMetaSlide.bIsDateTimeVariable )
this.aDateTimeFieldHandler.update();
};


MasterPageView.prototype.createElement = function()
{
var theDocument = document;
var aMasterPageViewElement = theDocument.createElementNS( NSS['svg'], 'g' );
assert( aMasterPageViewElement,
'MasterPageView.createElement: failed to create a master page view element.' );
aMasterPageViewElement.setAttribute( 'class', 'MasterPageView' );

var aWhiteRect = theDocument.createElementNS( NSS['svg'], 'rect' );
var nWidthExt = WIDTH / 1000;
var nHeightExt = HEIGHT / 1000;
aWhiteRect.setAttribute( 'x', String( -nWidthExt / 2 ) );
aWhiteRect.setAttribute( 'y', String( -nHeightExt / 2 ) );
aWhiteRect.setAttribute( 'width', String( WIDTH + nWidthExt ) );
aWhiteRect.setAttribute( 'height', String( HEIGHT + nHeightExt ) );
aWhiteRect.setAttribute( 'fill', '#FFFFFF' );
aMasterPageViewElement.appendChild( aWhiteRect );

if( this.aMetaSlide.nIsBackgroundVisible )
{
this.aBackgroundElement = theDocument.createElementNS( NSS['svg'], 'use' );
this.aBackgroundElement.setAttribute( 'class', 'Background' );
setNSAttribute( 'xlink', this.aBackgroundElement,
'href', '#' + this.aMasterPage.backgroundId );

aMasterPageViewElement.appendChild( this.aBackgroundElement );
}

if( this.aMetaSlide.nAreMasterObjectsVisible )
{
this.aBackgroundObjectsElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aBackgroundObjectsElement.setAttribute( 'class', 'BackgroundObjects' );

var aBackgroundObjectSubGroupIdList = this.aMasterPage.aBackgroundObjectSubGroupIdList;
this.aBackgroundSubGroupElementSet = [];
var aPlaceholderShapeSet = this.aMasterPage.aPlaceholderShapeSet;
var aTextFieldContentProviderSet = this.aMetaSlide.aTextFieldContentProviderSet;
var aDefsElement = this.aMetaSlide.element.parentNode;
var aTextFieldHandlerSet = this.aMetaSlide.theMetaDoc.aTextFieldHandlerSet;
var sMasterSlideId = this.aMasterPage.id;

var i = 0;
var sId;
for( ; i < aBackgroundObjectSubGroupIdList.length; ++i )
{
sId = aBackgroundObjectSubGroupIdList[i];
if( sId === aSlideNumberClassName )
{
if( aPlaceholderShapeSet[aSlideNumberClassName] &&
aPlaceholderShapeSet[aSlideNumberClassName].isValid() &&
this.aMetaSlide.nIsPageNumberVisible &&
aTextFieldContentProviderSet[aSlideNumberClassName] )
{
this.aSlideNumberFieldHandler =
new SlideNumberFieldHandler( aPlaceholderShapeSet[aSlideNumberClassName],
aTextFieldContentProviderSet[aSlideNumberClassName] );
this.aSlideNumberFieldHandler.update( this.aMetaSlide.nSlideNumber );
this.aSlideNumberFieldHandler.appendTo( this.aBackgroundObjectsElement );
}
}
else if( sId === aDateTimeClassName )
{
if( this.aMetaSlide.nIsDateTimeVisible )
{
this.aDateTimeFieldHandler =
this.initTextFieldHandler( aDateTimeClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aFooterClassName )
{
if( this.aMetaSlide.nIsFooterVisible )
{
this.aFooterFieldHandler =
this.initTextFieldHandler( aFooterClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aHeaderClassName )
{
if( this.aMetaSlide.nIsHeaderVisible )
{
this.aHeaderFieldHandler =
this.initTextFieldHandler( aHeaderClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else
{
var aBackgroundSubGroupElement = theDocument.createElementNS( NSS['svg'], 'use' );
aBackgroundSubGroupElement.setAttribute( 'class', 'BackgroundObjectSubGroup' );
setNSAttribute( 'xlink', aBackgroundSubGroupElement,
'href', '#' + sId );
this.aBackgroundSubGroupElementSet.push( aBackgroundSubGroupElement );
this.aBackgroundObjectsElement.appendChild( aBackgroundSubGroupElement );
}

}
aMasterPageViewElement.appendChild( this.aBackgroundObjectsElement );
}

return aMasterPageViewElement;
};

MasterPageView.prototype.initTextFieldHandler =
function( sClassName, aPlaceholderShapeSet, aTextFieldContentProviderSet,
aDefsElement, aTextFieldHandlerSet, sMasterSlideId )
{
var aTextFieldHandler = null;
if( aPlaceholderShapeSet[sClassName] &&
aPlaceholderShapeSet[sClassName].isValid()
&& aTextFieldContentProviderSet[sClassName] )
{
var sTextFieldContentProviderId = aTextFieldContentProviderSet[sClassName].sId;
if ( !aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] )
{
aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] =
new TextFieldHandler( aPlaceholderShapeSet[sClassName],
aTextFieldContentProviderSet[sClassName] );
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
aTextFieldHandler.update();
aTextFieldHandler.appendTo( aDefsElement );
}
else
{
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
}

var aTextFieldElement = document.createElementNS( NSS['svg'], 'use' );
aTextFieldElement.setAttribute( 'class', sClassName );
setNSAttribute( 'xlink', aTextFieldElement,
'href', '#' + aTextFieldHandler.sId );
this.aBackgroundObjectsElement.appendChild( aTextFieldElement );
}
return aTextFieldHandler;
};

function TextFieldHandler( aPlaceholderShape, aTextContentProvider )
{
this.aPlaceHolderShape = aPlaceholderShape;
this.aTextContentProvider = aTextContentProvider;
assert( this.aTextContentProvider,
'TextFieldHandler: text content provider not defined.' );
this.sId = 'tf' + String( TextFieldHandler.getUniqueId() );
this.aTextFieldElement = null;
this.aTextPlaceholderElement = null;
this.cloneElement();
}


TextFieldHandler.CURR_UNIQUE_ID = 0;

TextFieldHandler.getUniqueId = function()
{
++TextFieldHandler.CURR_UNIQUE_ID;
return TextFieldHandler.CURR_UNIQUE_ID;
};

TextFieldHandler.prototype.cloneElement = function()
{
assert( this.aPlaceHolderShape && this.aPlaceHolderShape.isValid(),
'TextFieldHandler.cloneElement: placeholder shape is not valid.' );
this.aTextFieldElement = this.aPlaceHolderShape.element.cloneNode( true /* deep clone */ );
assert( this.aTextFieldElement,
'TextFieldHandler.cloneElement: aTextFieldElement is not defined' );
this.aTextFieldElement.setAttribute( 'id', this.sId );
this.aTextFieldElement.removeAttribute( 'visibility' );
this.aTextPlaceholderElement = getElementByClassName( this.aTextFieldElement, 'PlaceholderText' );
assert( this.aTextPlaceholderElement,
'TextFieldHandler.cloneElement: aTextPlaceholderElement is not defined' );
};


TextFieldHandler.prototype.appendTo = function( aParentNode )
{
if( !this.aTextFieldElement )
{
log( 'TextFieldHandler.appendTo: aTextFieldElement is not defined' );
return;
}
if( !aParentNode )
{
log( 'TextFieldHandler.appendTo: parent node is not defined' );
return;
}

aParentNode.appendChild( this.aTextFieldElement );
};

TextFieldHandler.prototype.setTextContent = function( sText )
{
if( !this.aTextPlaceholderElement )
{
log( 'PlaceholderShape.setTextContent: text element is not valid in placeholder of type '
+ this.className + ' that belongs to master slide ' + this.masterPage.id );
return;
}
this.aTextPlaceholderElement.textContent = sText;
};

TextFieldHandler.prototype.update = function()
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this );
};

function SlideNumberFieldHandler( aPlaceholderShape, aTextContentProvider )
{
SlideNumberFieldHandler.superclass.constructor.call( this, aPlaceholderShape, aTextContentProvider );
}
extend( SlideNumberFieldHandler, TextFieldHandler );


SlideNumberFieldHandler.prototype.update = function( nPageNumber )
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this, nPageNumber );
};


function TextFieldContentProvider( aTextFieldContentElement )
{
if( aTextFieldContentElement )
this.sId = aTextFieldContentElement.getAttribute( 'id' );
}

function FixedTextProvider( aTextFieldContentElement )
{
FixedTextProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.text = aTextFieldContentElement.textContent;
}
extend( FixedTextProvider, TextFieldContentProvider );


FixedTextProvider.prototype.update = function( aFixedTextField )
{
aFixedTextField.setTextContent( this.text );
};

function CurrentDateTimeProvider( aTextFieldContentElement )
{
CurrentDateTimeProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.dateTimeFormat = getOOOAttribute( aTextFieldContentElement, aOOOAttrDateTimeFormat );
}
extend( CurrentDateTimeProvider, TextFieldContentProvider );


CurrentDateTimeProvider.prototype.update = function( aDateTimeField )
{
var sText = this.createDateTimeText( this.dateTimeFormat );
aDateTimeField.setTextContent( sText );
};


CurrentDateTimeProvider.prototype.createDateTimeText = function( /*sDateTimeFormat*/ )
{
var aDate = new Date();
var sDate = aDate.toLocaleString();
return sDate;
};

function SlideNumberProvider( nInitialSlideNumber, sPageNumberingType )
{
SlideNumberProvider.superclass.constructor.call( this, null );
this.nInitialSlideNumber = nInitialSlideNumber;
this.pageNumberingType = sPageNumberingType;

}
extend( SlideNumberProvider, TextFieldContentProvider );


SlideNumberProvider.prototype.getNumberingType = function()
{
return this.pageNumberingType;
};


SlideNumberProvider.prototype.update = function( aSlideNumberField, nSlideNumber )
{
if( nSlideNumber === undefined )
{
if( nCurSlide === undefined )
nSlideNumber = this.nInitialSlideNumber;
else
nSlideNumber = nCurSlide + 1;
}
var sText = this.createSlideNumberText( nSlideNumber, this.getNumberingType() );
aSlideNumberField.setTextContent( sText );
};


SlideNumberProvider.prototype.createSlideNumberText = function( nSlideNumber /*, sNumberingType*/ )
{
return String( nSlideNumber );
};


function SlideIndexPage()
{
this.pageElementId = 'slide_index';
this.pageBgColor = 'rgb(252,252,252)';
this.pageElement = this.createPageElement();
assert( this.pageElement, 'SlideIndexPage: pageElement is not valid' );
this.indexColumns = INDEX_COLUMNS_DEFAULT;
this.totalThumbnails = this.indexColumns * this.indexColumns;
this.selectedSlideIndex = undefined;

this.xSpacingFactor = 600/28000;
this.ySpacingFactor = 450/21000;
this.xSpacing = WIDTH * this.xSpacingFactor;
this.ySpacing = HEIGHT * this.ySpacingFactor;
this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

this.thumbnailMouseAreaTemplateId = 'thumbnail_mouse_area';
this.thumbnailMouseAreaTemplateElement = null;
this.thumbnailBorderTemplateId = 'thumbnail_border';
this.thumbnailBorderTemplateElement = null;
this.createTemplateElements();

this.aThumbnailSet = new Array( this.totalThumbnails );
for( var i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = 0;
}


SlideIndexPage.prototype.getTotalThumbnails = function()
{
return this.totalThumbnails;
};

SlideIndexPage.prototype.show = function()
{
this.pageElement.setAttribute( 'display', 'inherit' );
};

SlideIndexPage.prototype.hide = function()
{
this.pageElement.setAttribute( 'display', 'none' );
};

SlideIndexPage.prototype.setSelection = function( nIndex )
{
nIndex = getSafeIndex( nIndex, 0, this.getTotalThumbnails() - 1 );
if( this.curThumbnailIndex != nIndex )
{
this.aThumbnailSet[ this.curThumbnailIndex ].unselect();
this.aThumbnailSet[ nIndex ].select();
this.curThumbnailIndex = nIndex;
}
this.selectedSlideIndex = this.aThumbnailSet[ nIndex ].slideIndex;
};

SlideIndexPage.prototype.createPageElement = function()
{
var aPageElement = document.createElementNS( NSS['svg'], 'g' );
aPageElement.setAttribute( 'id', this.pageElementId );
aPageElement.setAttribute( 'display', 'none' );
aPageElement.setAttribute( 'visibility', 'visible' );

var sPageBgColor = this.pageBgColor + ';';
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'style', 'stroke:none;fill:' + sPageBgColor );

aPageElement.appendChild( aRectElement );
ROOT_NODE.appendChild( aPageElement );
return( document.getElementById( this.pageElementId ) );
};

SlideIndexPage.prototype.createTemplateElements = function()
{
var aDefsElement = document.createElementNS( NSS['svg'], 'defs' );
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailBorderTemplateId );
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );
aRectElement.setAttribute( 'fill', 'none' );
aDefsElement.appendChild( aRectElement );

aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailMouseAreaTemplateId );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'fill', this.pageBgColor );
aDefsElement.appendChild( aRectElement );

this.pageElement.appendChild( aDefsElement );

this.thumbnailMouseAreaTemplateElement = document.getElementById( this.thumbnailMouseAreaTemplateId );
this.thumbnailBorderTemplateElement = document.getElementById( this.thumbnailBorderTemplateId );
};

SlideIndexPage.prototype.decreaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns - 1 );
};

SlideIndexPage.prototype.increaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns + 1 );
};

SlideIndexPage.prototype.resetNumberOfColumns  = function()
{
this.setNumberOfColumns( INDEX_COLUMNS_DEFAULT );
};

SlideIndexPage.prototype.setNumberOfColumns  = function( nNumberOfColumns )
{
if( this.indexColumns == nNumberOfColumns )  return;
if( nNumberOfColumns < 2 || nNumberOfColumns > 6 ) return;

var suspendHandle = ROOT_NODE.suspendRedraw(500);

var nOldTotalThumbnails = this.totalThumbnails;
this.indexColumns = nNumberOfColumns;
this.totalThumbnails = nNumberOfColumns * nNumberOfColumns;

this.aThumbnailSet[this.curThumbnailIndex].unselect();

var i;
for( i = this.totalThumbnails; i < nOldTotalThumbnails; ++i )
{
this.aThumbnailSet[i].removeElement();
}

for( i = nOldTotalThumbnails; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
}

this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

var aRectElement = this.thumbnailBorderTemplateElement;
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );

for( i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = this.selectedSlideIndex % this.totalThumbnails;
this.aThumbnailSet[this.curThumbnailIndex].select();

INDEX_OFFSET = -1;
indexSetPageSlide( this.selectedSlideIndex );

ROOT_NODE.unsuspendRedraw( suspendHandle );
ROOT_NODE.forceRedraw();
};


function Thumbnail( aSlideIndexPage, nIndex )
{
this.container = aSlideIndexPage;
this.index = nIndex;//= getSafeIndex( nIndex, 0, this.container.getTotalThumbnails() );
this.pageElement = this.container.pageElement;
this.thumbnailId = 'thumbnail' + this.index;
this.thumbnailElement = this.createThumbnailElement();
this.slideElement = getElementByClassName( this.thumbnailElement, 'Slide' );
this.borderElement = getElementByClassName( this.thumbnailElement, 'Border' );
this.mouseAreaElement = getElementByClassName( this.thumbnailElement, 'MouseArea' );
this.aTransformSet = new Array( 3 );
this.visibility = VISIBLE;
this.isSelected = false;
}

Thumbnail.prototype.sNormalBorderColor = 'rgb(216,216,216)';
Thumbnail.prototype.sSelectionBorderColor = 'rgb(92,92,255)';

Thumbnail.prototype.removeElement = function()
{
if( this.thumbnailElement )
this.container.pageElement.removeChild( this.thumbnailElement );
};

Thumbnail.prototype.show = function()
{
if( this.visibility == HIDDEN )
{
this.thumbnailElement.setAttribute( 'display', 'inherit' );
this.visibility = VISIBLE;
}
};

Thumbnail.prototype.hide = function()
{
if( this.visibility == VISIBLE )
{
this.thumbnailElement.setAttribute( 'display', 'none' );
this.visibility = HIDDEN;
}
};

Thumbnail.prototype.select = function()
{
if( !this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sSelectionBorderColor );
this.isSelected = true;
}
};

Thumbnail.prototype.unselect = function()
{
if( this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sNormalBorderColor );
this.isSelected = false;
}
};

Thumbnail.prototype.updateView = function()
{
this.column = this.index % this.container.indexColumns;
this.row = ( this.index - this.column ) / this.container.indexColumns;
this.halfBorderWidth = this.container.halfBorderWidth;
this.borderWidth = this.container.borderWidth;
this.width = ( WIDTH + this.borderWidth ) * this.container.scaleFactor;
this.height = ( HEIGHT + this.borderWidth ) * this.container.scaleFactor;
this.aTransformSet[2] = 'translate(' + this.halfBorderWidth + ' ' + this.halfBorderWidth + ')';
this.aTransformSet[1] = 'scale(' + this.container.scaleFactor + ')';
var sTransformAttrValue = this.computeTransform();
this.thumbnailElement.setAttribute( 'transform', sTransformAttrValue );
this.mouseAreaElement.setAttribute( 'onmouseover', 'theSlideIndexPage.aThumbnailSet[' + this.index  + '].onMouseOver()' );
};

Thumbnail.prototype.update = function( nIndex )
{
if( this.slideIndex == nIndex )  return;

var aMetaSlide = theMetaDoc.aMetaSlideSet[nIndex];
aMetaSlide.updateMasterPageView();
setNSAttribute( 'xlink', this.slideElement, 'href', '#' + aMetaSlide.slideId );
this.slideIndex = nIndex;
};

Thumbnail.prototype.clear = function( )
{
setNSAttribute( 'xlink', this.slideElement, 'href', '' );
};

Thumbnail.prototype.createThumbnailElement = function()
{
var aThumbnailElement = document.createElementNS( NSS['svg'], 'g' );
aThumbnailElement.setAttribute( 'id', this.thumbnailId );
aThumbnailElement.setAttribute( 'display', 'inherit' );

var aSlideElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aSlideElement, 'href', '' );
aSlideElement.setAttribute( 'class', 'Slide' );
aThumbnailElement.appendChild( aSlideElement );

var aMouseAreaElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aMouseAreaElement, 'href', '#' + this.container.thumbnailMouseAreaTemplateId );
aMouseAreaElement.setAttribute( 'class', 'MouseArea' );
aMouseAreaElement.setAttribute( 'opacity', 0.0 );
aThumbnailElement.appendChild( aMouseAreaElement );

var aBorderElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aBorderElement, 'href', '#' + this.container.thumbnailBorderTemplateId );
aBorderElement.setAttribute( 'stroke', this.sNormalBorderColor );
aBorderElement.setAttribute( 'class', 'Border' );
aThumbnailElement.appendChild( aBorderElement );

this.container.pageElement.appendChild( aThumbnailElement );
return( document.getElementById( this.thumbnailId ) );
};

Thumbnail.prototype.computeTransform = function()
{
var nXSpacing = this.container.xSpacing;
var nYSpacing = this.container.ySpacing;

var nXOffset = nXSpacing + ( this.width + nXSpacing ) * this.column;
var nYOffset = nYSpacing + ( this.height + nYSpacing ) * this.row;

this.aTransformSet[0] = 'translate(' + nXOffset + ' ' + nYOffset + ')';

var sTransform = this.aTransformSet.join( ' ' );

return sTransform;
};

Thumbnail.prototype.onMouseOver = function()
{
if( ( currentMode == INDEX_MODE ) && ( this.container.curThumbnailIndex !=  this.index ) )
{
this.container.setSelection( this.index );
}
};


function init()
{
var VIEWBOX = ROOT_NODE.getAttribute('viewBox');

if( VIEWBOX )
{
WIDTH = ROOT_NODE.viewBox.animVal.width;
HEIGHT = ROOT_NODE.viewBox.animVal.height;
}

aSlideShow = new SlideShow();
theMetaDoc =  new MetaDocument();
aSlideShow.bIsEnabled = theMetaDoc.bIsAnimated;
theSlideIndexPage = new SlideIndexPage();
aSlideShow.displaySlide( theMetaDoc.nStartSlideNumber, false );

var ua = navigator.userAgent;
if (ua.indexOf(' AppleWebKit/') !== -1 &&
ua.indexOf(' Mobile/') !== -1) {
var hammer = new Hammer(ROOT_NODE);
hammer.on('swipeleft', function() {
switchSlide(1, false);
});
hammer.on('swiperight', function() {
switchSlide(-1, false);
});
hammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
hammer.on('swipeup', function() {
aSlideShow.exitSlideShowInApp();
});
hammer.on('swipedown', function() {
aSlideShow.exitSlideShowInApp();
});
}
}

function presentationEngineStop(message)
{
alert( message + '\nThe presentation engine will be stopped' );
document.onkeydown = null;
document.onkeypress = null;
document.onclick = null;
window.onmousewheel = null;
}

function assert( condition, message )
{
if (!condition)
{
presentationEngineStop( message );
if (typeof console == 'object')
console.trace();
throw new Error( message );
}
}

function dispatchEffects(dir)
{

if( dir == 1 )
{
var bRet = aSlideShow.nextEffect();

if( !bRet )
{
switchSlide( 1, false );
}
}
else
{
switchSlide( dir, false );
}
}

function skipAllEffects()
{
var bRet = aSlideShow.skipAllEffects();
if( !bRet )
{
switchSlide( 1, true );
}
}

function skipEffects(dir)
{
if( dir == 1 )
{
var bRet = aSlideShow.skipPlayingOrNextEffect();

if( !bRet )
{
switchSlide( 1, true );
}
}
else
{
switchSlide( dir, true );
}
}

function switchSlide( nOffset, bSkipTransition )
{
var nNextSlide = nCurSlide + nOffset;
aSlideShow.displaySlide( nNextSlide, bSkipTransition );
}

function displayIndex( offsetNumber )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
offsetNumber = getSafeIndex( offsetNumber, 0, aMetaSlideSet.length - 1 );

var nTotalThumbnails = theSlideIndexPage.getTotalThumbnails();
var nEnd = Math.min( offsetNumber + nTotalThumbnails, aMetaSlideSet.length);

var aThumbnailSet = theSlideIndexPage.aThumbnailSet;
var j = 0;
for( var i = offsetNumber; i < nEnd; ++i, ++j )
{
aThumbnailSet[j].update( i );
aThumbnailSet[j].show();
}
for( ; j < nTotalThumbnails; ++j )
{
aThumbnailSet[j].hide();
}

if (INDEX_OFFSET != offsetNumber)
INDEX_OFFSET = offsetNumber;
}

function toggleSlideIndex()
{
if( currentMode == SLIDE_MODE )
{

theMetaDoc.getCurrentSlide().hide();
INDEX_OFFSET = -1;
indexSetPageSlide( nCurSlide );
theSlideIndexPage.show();
currentMode = INDEX_MODE;
}
else if( currentMode == INDEX_MODE )
{
theSlideIndexPage.hide();
var nNewSlide = theSlideIndexPage.selectedSlideIndex;

aSlideShow.displaySlide( nNewSlide, true );
currentMode = SLIDE_MODE;
}
}

function abandonIndexMode()
{
theSlideIndexPage.selectedSlideIndex = nCurSlide;
toggleSlideIndex();
}


var CURR_UNIQUE_ID = 0;

function getUniqueId()
{
++CURR_UNIQUE_ID;
return CURR_UNIQUE_ID;
}

function mem_fn( sMethodName )
{
return  function( aObject )
{
var aMethod = aObject[ sMethodName ];
if( aMethod )
aMethod.call( aObject );
else
log( 'method sMethodName not found' );
};
}

function bind( aObject, aMethod )
{
return  function()
{
return aMethod.call( aObject, arguments[0] );
};
}

function bind2( aFunction )
{
if( !aFunction  )
log( 'bind2: passed function is not valid.' );

var aBoundArgList = arguments;

var aResultFunction = null;

switch( aBoundArgList.length )
{
case 1: aResultFunction = function()
{
return aFunction.call( arguments[0], arguments[1],
arguments[2], arguments[3],
arguments[4] );
};
break;
case 2: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], arguments[0],
arguments[1], arguments[2],
arguments[3] );
};
break;
case 3: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
arguments[0], arguments[1],
arguments[2] );
};
break;
case 4: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], arguments[0],
arguments[1] );
};
break;
case 5: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], aBoundArgList[4],
arguments[0] );
};
break;
default:
log( 'bind2: arity not handled.' );
}

return aResultFunction;
}

function getCurrentSystemTime()
{
return ( new Date() ).getTime();
}

function getSlideAnimationsRoot( sSlideId )
{
return theMetaDoc.aSlideAnimationsMap[ sSlideId ];
}

function getElementChildren( aElement )
{
var aChildrenArray = [];

var nSize = aElement.childNodes.length;

for( var i = 0; i < nSize; ++i )
{
if( aElement.childNodes[i].nodeType == 1 )
aChildrenArray.push( aElement.childNodes[i] );
}

return aChildrenArray;
}

function removeWhiteSpaces( str )
{
if( !str )
return '';

var re = / */;
var aSplitString = str.split( re );
return aSplitString.join('');
}

function clamp( nValue, nMinimum, nMaximum )
{
if( nValue < nMinimum )
{
return nMinimum;
}
else if( nValue > nMaximum )
{
return nMaximum;
}
else
{
return nValue;
}
}

function makeMatrixString( a, b, c, d, e, f )
{
var s = 'matrix(';
s += a + ', ';
s += b + ', ';
s += c + ', ';
s += d + ', ';
s += e + ', ';
s += f + ')';

return s;
}

function matrixToString( aSVGMatrix )
{
return makeMatrixString( aSVGMatrix.a, aSVGMatrix.b, aSVGMatrix.c,
aSVGMatrix.d, aSVGMatrix.e, aSVGMatrix.f );
}


function numberParser( sValue )
{
if( sValue === '.' )
return undefined;
var reFloatNumber = /^[+-]?[0-9]*[.]?[0-9]*$/;

if( reFloatNumber.test( sValue ) )
return parseFloat( sValue );
else
return undefined;
}

function booleanParser( sValue )
{
sValue = sValue.toLowerCase();
if( sValue === 'true' )
return true;
else if( sValue === 'false' )
return false;
else
return undefined;
}

function colorParser( sValue )
{

function hsl( nHue, nSaturation, nLuminance )
{
return new HSLColor( nHue, nSaturation / 100, nLuminance / 100 );
}

function rgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 255, nGreen / 255, nBlue / 255 );
}

function prgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 100, nGreen / 100, nBlue / 100 );
}

var sCommaPattern = ' *[,] *';
var sIntegerPattern = '[+-]?[0-9]+';
var sHexDigitPattern = '[0-9A-Fa-f]';

var sHexColorPattern = '#(' + sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})';

var sRGBIntegerPattern = 'rgb[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + sCommaPattern
+ sIntegerPattern + ' *[)]';

var sRGBPercentPattern = 'rgb[(] *' + sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var sHSLPercentPattern = 'hsl[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var reHexColor = new RegExp( sHexColorPattern );
var reRGBInteger = new RegExp( sRGBIntegerPattern );
var reRGBPercent = new RegExp( sRGBPercentPattern );
var reHSLPercent = new RegExp( sHSLPercentPattern );

if( reHexColor.test( sValue ) )
{
var aRGBTriple = reHexColor.exec( sValue );

var nRed    = parseInt( aRGBTriple[1], 16 ) / 255;
var nGreen  = parseInt( aRGBTriple[2], 16 ) / 255;
var nBlue   = parseInt( aRGBTriple[3], 16 ) / 255;

return new RGBColor( nRed, nGreen, nBlue );
}
else if( reHSLPercent.test( sValue ) )
{
sValue = sValue.replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else if( reRGBInteger.test( sValue ) )
{
return eval( sValue );
}
else if( reRGBPercent.test( sValue ) )
{
sValue = 'p' + sValue.replace( '%', '' ).replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else
{
return null;
}
}


function RGBColor( nRed, nGreen, nBlue )
{
this.eColorSpace = COLOR_SPACE_RGB;
this.nRed = nRed;
this.nGreen = nGreen;
this.nBlue = nBlue;
}


RGBColor.prototype.clone = function()
{
return new RGBColor( this.nRed, this.nGreen, this.nBlue );
};

RGBColor.prototype.equal = function( aRGBColor )
{
return ( this.nRed == aRGBColor.nRed ) &&
( this.nGreen == aRGBColor.nGreen ) &&
( this.nBlue == aRGBColor.nBlue );
};

RGBColor.prototype.add = function( aRGBColor )
{
this.nRed += aRGBColor.nRed;
this.nGreen += aRGBColor.nGreen;
this.nBlue += aRGBColor.nBlue;
return this;
};

RGBColor.prototype.scale = function( aT )
{
this.nRed *= aT;
this.nGreen *= aT;
this.nBlue *= aT;
return this;
};

RGBColor.clamp = function( aRGBColor )
{
var aClampedRGBColor = new RGBColor( 0, 0, 0 );

aClampedRGBColor.nRed   = clamp( aRGBColor.nRed, 0.0, 1.0 );
aClampedRGBColor.nGreen = clamp( aRGBColor.nGreen, 0.0, 1.0 );
aClampedRGBColor.nBlue  = clamp( aRGBColor.nBlue, 0.0, 1.0 );

return aClampedRGBColor;
};

RGBColor.prototype.convertToHSL = function()
{
var nRed   = clamp( this.nRed, 0.0, 1.0 );
var nGreen = clamp( this.nGreen, 0.0, 1.0 );
var nBlue  = clamp( this.nBlue, 0.0, 1.0 );

var nMax = Math.max( nRed, nGreen, nBlue );
var nMin = Math.min( nRed, nGreen, nBlue );
var nDelta = nMax - nMin;

var nLuminance  = ( nMax + nMin ) / 2.0;
var nSaturation = 0.0;
var nHue = 0.0;
if( nDelta !== 0 )
{
nSaturation = ( nLuminance > 0.5 ) ?
( nDelta / ( 2.0 - nMax - nMin) ) :
( nDelta / ( nMax + nMin ) );

if( nRed == nMax )
nHue = ( nGreen - nBlue ) / nDelta;
else if( nGreen == nMax )
nHue = 2.0 + ( nBlue - nRed ) / nDelta;
else if( nBlue == nMax )
nHue = 4.0 + ( nRed - nGreen ) / nDelta;

nHue *= 60.0;

if( nHue < 0.0 )
nHue += 360.0;
}

return new HSLColor( nHue, nSaturation, nLuminance );

};

RGBColor.prototype.toString = function( bClamped )
{
var aRGBColor;
if( bClamped )
{
aRGBColor = RGBColor.clamp( this );
}
else
{
aRGBColor = this;
}

var nRed = Math.round( aRGBColor.nRed * 255 );
var nGreen = Math.round( aRGBColor.nGreen * 255 );
var nBlue = Math.round( aRGBColor.nBlue * 255 );

return ( 'rgb(' + nRed + ',' + nGreen + ',' + nBlue + ')' );
};

RGBColor.interpolate = function( aStartRGB , aEndRGB, nT )
{
var aResult = aStartRGB.clone();
var aTEndRGB = aEndRGB.clone();
aResult.scale( 1.0 - nT );
aTEndRGB.scale( nT );
aResult.add( aTEndRGB );

return aResult;
};


function HSLColor( nHue, nSaturation, nLuminance )
{
this.eColorSpace = COLOR_SPACE_HSL;
this.nHue = nHue;
this.nSaturation = nSaturation;
this.nLuminance = nLuminance;

this.normalizeHue();
}


HSLColor.prototype.clone = function()
{
return new HSLColor( this.nHue, this.nSaturation, this.nLuminance );
};

HSLColor.prototype.equal = function( aHSLColor )
{
return ( this.nHue == aHSLColor.nHue ) &&
( this.nSaturation += aHSLColor.nSaturation ) &&
( this.nLuminance += aHSLColor.nLuminance );
};

HSLColor.prototype.add = function( aHSLColor )
{
this.nHue += aHSLColor.nHue;
this.nSaturation += aHSLColor.nSaturation;
this.nLuminance += aHSLColor.nLuminance;
this.normalizeHue();
return this;
};

HSLColor.prototype.scale = function( aT )
{
this.nHue *= aT;
this.nSaturation *= aT;
this.nLuminance *= aT;
this.normalizeHue();
return this;
};

HSLColor.clamp = function( aHSLColor )
{
var aClampedHSLColor = new HSLColor( 0, 0, 0 );

aClampedHSLColor.nHue = aHSLColor.nHue % 360;
if( aClampedHSLColor.nHue < 0 )
aClampedHSLColor.nHue += 360;
aClampedHSLColor.nSaturation = clamp( aHSLColor.nSaturation, 0.0, 1.0 );
aClampedHSLColor.nLuminance = clamp( aHSLColor.nLuminance, 0.0, 1.0 );
};

HSLColor.prototype.normalizeHue = function()
{
this.nHue = this.nHue % 360;
if( this.nHue < 0 ) this.nHue += 360;
};

HSLColor.prototype.toString = function()
{
return 'hsl(' + this.nHue.toFixed( 3 ) + ','
+ this.nSaturation.toFixed( 3 ) + ','
+ this.nLuminance.toFixed( 3 ) + ')';
};

HSLColor.prototype.convertToRGB = function()
{

var nHue = this.nHue % 360;
if( nHue < 0 ) nHue += 360;
var nSaturation =  clamp( this.nSaturation, 0.0, 1.0 );
var nLuminance = clamp( this.nLuminance, 0.0, 1.0 );


if( nSaturation === 0 )
{
return new RGBColor( nLuminance, nLuminance, nLuminance );
}

var nVal1 = ( nLuminance <= 0.5 ) ?
( nLuminance * (1.0 + nSaturation) ) :
( nLuminance + nSaturation - nLuminance * nSaturation );

var nVal2 = 2.0 * nLuminance - nVal1;

var nRed    = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue + 120 );
var nGreen  = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue );
var nBlue   = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue - 120 );

return new RGBColor( nRed, nGreen, nBlue );
};

HSLColor.hsl2rgbHelper = function( nValue1, nValue2, nHue )
{
nHue = nHue % 360;
if( nHue < 0 )
nHue += 360;

if( nHue < 60.0 )
return nValue1 + ( nValue2 - nValue1 ) * nHue / 60.0;
else if( nHue < 180.0 )
return nValue2;
else if( nHue < 240.0 )
return ( nValue1 + ( nValue2 - nValue1 ) * ( 240.0 - nHue ) / 60.0 );
else
return nValue1;
};

HSLColor.interpolate = function( aFrom, aTo, nT, bCCW )
{
var nS = 1.0 - nT;

var nHue = 0.0;
if( aFrom.nHue <= aTo.nHue && !bCCW )
{
nHue = nS * (aFrom.nHue + 360.0) + nT * aTo.nHue;
}
else if( aFrom.nHue > aTo.nHue && bCCW )
{
nHue = nS * aFrom.nHue + nT * (aTo.nHue + 360.0);
}
else
{
nHue = nS * aFrom.nHue + nT * aTo.nHue;
}

var nSaturation = nS * aFrom.nSaturation + nT * aTo.nSaturation;
var nLuminance = nS * aFrom.nLuminance + nT * aTo.nLuminance;

return new HSLColor( nHue, nSaturation, nLuminance );
};


var SVGIdentityMatrix = document.documentElement.createSVGMatrix();

SVGMatrix.prototype.setToIdentity = function()
{
this.a = this.d = 1;
this.b = this.c = this.d = this.e = 0;
};

SVGMatrix.prototype.setToRotationAroundPoint = function( nX, nY, nAngle )
{
nAngle = Math.PI * nAngle / 180;
var nSin = Math.sin( nAngle );
var nCos = Math.cos( nAngle );

this.a = nCos; this.c = -nSin; this.e = nX * (1 - nCos) + nY * nSin;
this.b = nSin; this.d =  nCos; this.f = nY * (1 - nCos) - nX * nSin;
};


SVGPathElement.prototype.prependPath = function( aPath )
{
var sPathData = aPath.getAttribute( 'd' );
sPathData += ( ' ' + this.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

SVGPathElement.prototype.appendPath = function( aPath )
{
var sPathData = this.getAttribute( 'd' );
sPathData += ( ' ' + aPath.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

function flipOnYAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.a = -1;
aTransform.e = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

function flipOnXAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.d = -1;
aTransform.f = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

SVGPathElement.prototype.matrixTransform = function( aSVGMatrix )
{
if( SVGPathSegList.prototype.matrixTransform )
{
this.pathSegList.matrixTransform( aSVGMatrix );
return;
}

var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
var i;
for( i = 0; i < nLength; ++i )
{
aPathSegList.getItem( i ).matrixTransform( aSVGMatrix );
}
};

SVGPathElement.prototype.changeOrientation = function()
{
var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
if( nLength == 0 ) return;

if( SVGPathSegList.prototype.changeOrientation )
{
aPathSegList.changeOrientation();
return;
}

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList.getItem( 0 );
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.removeItem( 0 );
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList.getItem( i );
var aPoint = aPathSeg.changeOrientation( nCurrentX, nCurrentY );
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
}


for( i = nLength - 2; i >= 0; --i )
{
aPathSeg = aPathSegList.removeItem( i );
aPathSegList.appendItem( aPathSeg );
}

var aMovePathSeg = this.createSVGPathSegMovetoAbs( nCurrentX, nCurrentY );
aPathSegList.insertItemBefore( aMovePathSeg, 0 );

};


try
{   // Firefox, Google Chrome, Internet Explorer, Safari.

SVGPathSegMovetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegLinetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegCurvetoQuadraticAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
};

SVGPathSegCurvetoCubicAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
};


SVGPathSegMovetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegLinetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoQuadraticAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoCubicAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
return aPoint;
};

}
catch( e )
{   // Opera

if( e.name == 'ReferenceError' )
{
SVGPathSeg.prototype.matrixTransform = function( aSVGMatrix )
{
var nX;
switch( this.pathSegTypeAsLetter )
{
case 'C':
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
case 'Q':
nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
case 'M':
case 'L':
SVGPathMatrixTransform( this, aSVGMatrix );
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
}
};

SVGPathSeg.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
switch( this.pathSegTypeAsLetter )
{
case 'C':
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
default:
log( 'SVGPathSeg.changeOrientation: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
return null;
}
}
}
else throw e;
}

function SVGPathMatrixTransform( aPath, aSVGMatrix )
{
var nX = aPath.x;
aPath.x = aSVGMatrix.a * nX + aSVGMatrix.c * aPath.y + aSVGMatrix.e;
aPath.y = aSVGMatrix.b * nX + aSVGMatrix.d * aPath.y + aSVGMatrix.f;
}


function PriorityQueue( aCompareFunc )
{
this.aSequence = [];
this.aCompareFunc = aCompareFunc;
}

PriorityQueue.prototype.clone = function()
{
var aCopy = new PriorityQueue( this.aCompareFunc );
var src = this.aSequence;
var dest = [];
var i, l;
for( i = 0, l = src.length; i < l; ++i )
{
if( i in src )
{
dest.push( src[i] );
}
}
aCopy.aSequence = dest;
return aCopy;
};

PriorityQueue.prototype.top = function()
{
return this.aSequence[this.aSequence.length - 1];
};

PriorityQueue.prototype.isEmpty = function()
{
return ( this.aSequence.length === 0 );
};

PriorityQueue.prototype.push = function( aValue )
{
this.aSequence.unshift( aValue );
this.aSequence.sort(this.aCompareFunc);
};

PriorityQueue.prototype.clear = function()
{
this.aSequence = [];
};

PriorityQueue.prototype.pop = function()
{
return this.aSequence.pop();
};


var ANIMATION_NODE_CUSTOM               = 0;
var ANIMATION_NODE_PAR                  = 1;
var ANIMATION_NODE_SEQ                  = 2;
var ANIMATION_NODE_ITERATE              = 3;
var ANIMATION_NODE_ANIMATE              = 4;
var ANIMATION_NODE_SET                  = 5;
var ANIMATION_NODE_ANIMATEMOTION        = 6;
var ANIMATION_NODE_ANIMATECOLOR         = 7;
var ANIMATION_NODE_ANIMATETRANSFORM     = 8;
var ANIMATION_NODE_TRANSITIONFILTER     = 9;
var ANIMATION_NODE_AUDIO                = 10;
var ANIMATION_NODE_COMMAND              = 11;

var aAnimationNodeTypeInMap = {
'par'               : ANIMATION_NODE_PAR,
'seq'               : ANIMATION_NODE_SEQ,
'iterate'           : ANIMATION_NODE_ITERATE,
'animate'           : ANIMATION_NODE_ANIMATE,
'set'               : ANIMATION_NODE_SET,
'animatemotion'     : ANIMATION_NODE_ANIMATEMOTION,
'animatecolor'      : ANIMATION_NODE_ANIMATECOLOR,
'animatetransform'  : ANIMATION_NODE_ANIMATETRANSFORM,
'transitionfilter'  : ANIMATION_NODE_TRANSITIONFILTER,
'audio'             : ANIMATION_NODE_AUDIO,
'command'           : ANIMATION_NODE_COMMAND
};


function getAnimationElementType( aElement )
{
var sName = aElement.localName.toLowerCase();

if( sName && aAnimationNodeTypeInMap[ sName ] )
return aAnimationNodeTypeInMap[ sName ];
else
return ANIMATION_NODE_CUSTOM;
}


var INVALID_NODE                = 0;
var UNRESOLVED_NODE             = 1;
var RESOLVED_NODE               = 2;
var ACTIVE_NODE                 = 4;
var FROZEN_NODE                 = 8;
var ENDED_NODE                  = 16;

function getNodeStateName( eNodeState )
{
switch( eNodeState )
{
case INVALID_NODE:
return 'INVALID';
case UNRESOLVED_NODE:
return 'UNRESOLVED';
case RESOLVED_NODE:
return 'RESOLVED';
case ACTIVE_NODE:
return 'ACTIVE';
case FROZEN_NODE:
return 'FROZEN';
case ENDED_NODE:
return 'ENDED';
default:
return 'UNKNOWN';
}
}


var IMPRESS_DEFAULT_NODE                    = 0;
var IMPRESS_ON_CLICK_NODE                   = 1;
var IMPRESS_WITH_PREVIOUS_NODE              = 2;
var IMPRESS_AFTER_PREVIOUS_NODE             = 3;
var IMPRESS_MAIN_SEQUENCE_NODE              = 4;
var IMPRESS_TIMING_ROOT_NODE                = 5;
var IMPRESS_INTERACTIVE_SEQUENCE_NODE       = 6;

var aImpressNodeTypeInMap = {
'on-click'                  : IMPRESS_ON_CLICK_NODE,
'with-previous'             : IMPRESS_WITH_PREVIOUS_NODE,
'after-previous'            : IMPRESS_AFTER_PREVIOUS_NODE,
'main-sequence'             : IMPRESS_MAIN_SEQUENCE_NODE,
'timing-root'               : IMPRESS_TIMING_ROOT_NODE,
'interactive-sequence'      : IMPRESS_INTERACTIVE_SEQUENCE_NODE
};

var aImpressNodeTypeOutMap = [ 'default', 'on-click', 'with-previous', 'after-previous',
'main-sequence', 'timing-root', 'interactive-sequence' ];


var aPresetClassInMap = {};


var aPresetIdInMap = {};


var RESTART_MODE_DEFAULT            = 0;
var RESTART_MODE_INHERIT            = 0; // eslint-disable-line no-unused-vars
var RESTART_MODE_ALWAYS             = 1;
var RESTART_MODE_WHEN_NOT_ACTIVE    = 2;
var RESTART_MODE_NEVER              = 3;

var aRestartModeInMap = {
'inherit'       : RESTART_MODE_DEFAULT,
'always'        : RESTART_MODE_ALWAYS,
'whenNotActive' : RESTART_MODE_WHEN_NOT_ACTIVE,
'never'         : RESTART_MODE_NEVER
};

var aRestartModeOutMap = [ 'inherit','always', 'whenNotActive', 'never' ];


var FILL_MODE_DEFAULT           = 0;
var FILL_MODE_INHERIT           = 0; // eslint-disable-line no-unused-vars
var FILL_MODE_REMOVE            = 1;
var FILL_MODE_FREEZE            = 2;
var FILL_MODE_HOLD              = 3;
var FILL_MODE_TRANSITION        = 4;
var FILL_MODE_AUTO              = 5;

var aFillModeInMap = {
'inherit'       : FILL_MODE_DEFAULT,
'remove'        : FILL_MODE_REMOVE,
'freeze'        : FILL_MODE_FREEZE,
'hold'          : FILL_MODE_HOLD,
'transition'    : FILL_MODE_TRANSITION,
'auto'          : FILL_MODE_AUTO
};

var aFillModeOutMap = [ 'inherit', 'remove', 'freeze', 'hold', 'transition', 'auto' ];


var ADDITIVE_MODE_UNKNOWN       = 0; // eslint-disable-line no-unused-vars
var ADDITIVE_MODE_BASE          = 1;
var ADDITIVE_MODE_SUM           = 2;
var ADDITIVE_MODE_REPLACE       = 3;
var ADDITIVE_MODE_MULTIPLY      = 4;
var ADDITIVE_MODE_NONE          = 5;

var aAddittiveModeInMap = {
'base'          : ADDITIVE_MODE_BASE,
'sum'           : ADDITIVE_MODE_SUM,
'replace'       : ADDITIVE_MODE_REPLACE,
'multiply'      : ADDITIVE_MODE_MULTIPLY,
'none'          : ADDITIVE_MODE_NONE
};

var aAddittiveModeOutMap = [ 'unknown', 'base', 'sum', 'replace', 'multiply', 'none' ];


var ACCUMULATE_MODE_NONE        = 0;
var ACCUMULATE_MODE_SUM         = 1;

var aAccumulateModeOutMap = [ 'none', 'sum' ];

var CALC_MODE_DISCRETE          = 1;
var CALC_MODE_LINEAR            = 2;
var CALC_MODE_PACED             = 3;
var CALC_MODE_SPLINE            = 4;

var aCalcModeInMap = {
'discrete'      : CALC_MODE_DISCRETE,
'linear'        : CALC_MODE_LINEAR,
'paced'         : CALC_MODE_PACED,
'spline'        : CALC_MODE_SPLINE
};

var aCalcModeOutMap = [ 'unknown', 'discrete', 'linear', 'paced', 'spline' ];


var COLOR_SPACE_RGB = 0;
var COLOR_SPACE_HSL = 1;

var aColorSpaceInMap = { 'rgb': COLOR_SPACE_RGB, 'hsl': COLOR_SPACE_HSL };

var aColorSpaceOutMap = [ 'rgb', 'hsl' ];


var CLOCKWISE               = 0;
var COUNTERCLOCKWISE        = 1;

var aClockDirectionInMap = { 'clockwise': CLOCKWISE, 'counter-clockwise': COUNTERCLOCKWISE };

var aClockDirectionOutMap = [ 'clockwise', 'counter-clockwise' ];


var UNKNOWN_PROPERTY        = 0; // eslint-disable-line no-unused-vars
var NUMBER_PROPERTY         = 1;
var ENUM_PROPERTY           = 2;
var COLOR_PROPERTY          = 3;
var STRING_PROPERTY         = 4;
var BOOL_PROPERTY           = 5;

var aValueTypeOutMap = [ 'unknown', 'number', 'enum', 'color', 'string', 'boolean' ];


var aAttributeMap =
{
'height':           {   'type':         NUMBER_PROPERTY,
'get':          'getHeight',
'set':          'setHeight',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'opacity':          {   'type':         NUMBER_PROPERTY,
'get':          'getOpacity',
'set':          'setOpacity'                    },

'rotate':           {   'type':         NUMBER_PROPERTY,
'get':          'getRotationAngle',
'set':          'setRotationAngle'              },

'width':            {   'type':         NUMBER_PROPERTY,
'get':          'getWidth',
'set':          'setWidth',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'x':                {   'type':         NUMBER_PROPERTY,
'get':          'getX',
'set':          'setX',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'y':                {   'type':         NUMBER_PROPERTY,
'get':          'getY',
'set':          'setY',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'fill':             {   'type':         ENUM_PROPERTY,
'get':          'getFillStyle',
'set':          'setFillStyle'                  },

'stroke':           {   'type':         ENUM_PROPERTY,
'get':          'getStrokeStyle',
'set':          'setStrokeStyle'                },

'visibility':       {   'type':         ENUM_PROPERTY,
'get':          'getVisibility',
'set':          'setVisibility'                 },

'fill-color':       {   'type':         COLOR_PROPERTY,
'get':          'getFillColor',
'set':          'setFillColor'                  },

'stroke-color':     {   'type':         COLOR_PROPERTY,
'get':          'getStrokeColor',
'set':          'setStrokeColor'                },

'color':            {   'type':         COLOR_PROPERTY,
'get':          'getFontColor',
'set':          'setFontColor'                  }

};


var TRANSITION_INVALID              = 0;    // Invalid type
var TRANSITION_CLIP_POLYPOLYGON     = 1;    // Transition expressed by parametric clip polygon
var TRANSITION_SPECIAL              = 2;    // Transition expressed by hand-crafted function


var BARWIPE_TRANSITION              = 1;
var BOXWIPE_TRANSITION              = 2;
var FOURBOXWIPE_TRANSITION          = 3;
var ELLIPSEWIPE_TRANSITION          = 4; // 17
var CLOCKWIPE_TRANSITION            = 5; // 22
var PINWHEELWIPE_TRANSITION         = 6; // 23
var PUSHWIPE_TRANSITION             = 7; // 35
var SLIDEWIPE_TRANSITION            = 8; // 36
var FADE_TRANSITION                 = 9; // 37
var RANDOMBARWIPE_TRANSITION        = 10; // 38
var CHECKERBOARDWIPE_TRANSITION     = 11; // 39
var DISSOLVE_TRANSITION             = 12; // 40
var SNAKEWIPE_TRANSITION            = 13; // 30
var PARALLELSNAKESWIPE_TRANSITION   = 14; // 32
var IRISWIPE_TRANSITION             = 15; // 12
var BARNDOORWIPE_TRANSITION         = 16; // 4
var VEEWIPE_TRANSITION              = 17; // 8
var ZIGZAGWIPE_TRANSITION           = 18; // 10
var BARNZIGZAGWIPE_TRANSITION       = 19; // 11
var FANWIPE_TRANSITION              = 20; // 25
var SINGLESWEEPWIPE_TRANSITION      = 21; // 24
var WATERFALLWIPE_TRANSITION        = 22; // 34
var SPIRALWIPE_TRANSITION           = 23; // 31
var MISCDIAGONALWIPE_TRANSITION     = 24; // 7
var BOXSNAKESWIPE_TRANSITION        = 25; // 33

var aTransitionTypeInMap = {
'barWipe'           : BARWIPE_TRANSITION,
'boxWipe'           : BOXWIPE_TRANSITION,
'barnDoorWipe'      : BARNDOORWIPE_TRANSITION,
'fourBoxWipe'       : FOURBOXWIPE_TRANSITION,
'ellipseWipe'       : ELLIPSEWIPE_TRANSITION,
'clockWipe'         : CLOCKWIPE_TRANSITION,
'pinWheelWipe'      : PINWHEELWIPE_TRANSITION,
'miscDiagonalWipe'  : MISCDIAGONALWIPE_TRANSITION,
'pushWipe'          : PUSHWIPE_TRANSITION,
'slideWipe'         : SLIDEWIPE_TRANSITION,
'fade'              : FADE_TRANSITION,
'fanWipe'           : FANWIPE_TRANSITION,
'randomBarWipe'     : RANDOMBARWIPE_TRANSITION,
'checkerBoardWipe'  : CHECKERBOARDWIPE_TRANSITION,
'dissolve'          : DISSOLVE_TRANSITION,
'singleSweepWipe'   : SINGLESWEEPWIPE_TRANSITION,
'snakeWipe'         : SNAKEWIPE_TRANSITION,
'parallelSnakesWipe': PARALLELSNAKESWIPE_TRANSITION,
'spiralWipe'        : SPIRALWIPE_TRANSITION,
'boxSnakesWipe'     : BOXSNAKESWIPE_TRANSITION,
'irisWipe'          : IRISWIPE_TRANSITION,
'veeWipe'           : VEEWIPE_TRANSITION,
'zigZagWipe'        : ZIGZAGWIPE_TRANSITION,
'barnZigZagWipe'    : BARNZIGZAGWIPE_TRANSITION,
'waterfallWipe'     : WATERFALLWIPE_TRANSITION
};

var DEFAULT_TRANS_SUBTYPE                       = 0;
var LEFTTORIGHT_TRANS_SUBTYPE                   = 1;
var TOPTOBOTTOM_TRANS_SUBTYPE                   = 2;
var CORNERSIN_TRANS_SUBTYPE                     = 3; // 11
var CORNERSOUT_TRANS_SUBTYPE                    = 4;
var VERTICAL_TRANS_SUBTYPE                      = 5;
var HORIZONTAL_TRANS_SUBTYPE                    = 6; // 14
var DOWN_TRANS_SUBTYPE                          = 7; // 19
var CIRCLE_TRANS_SUBTYPE                        = 8; // 27
var CLOCKWISETWELVE_TRANS_SUBTYPE               = 9; // 33
var CLOCKWISETHREE_TRANS_SUBTYPE                = 10;
var CLOCKWISESIX_TRANS_SUBTYPE                  = 11;
var CLOCKWISENINE_TRANS_SUBTYPE                 = 12;
var TWOBLADEVERTICAL_TRANS_SUBTYPE              = 13;
var TWOBLADEHORIZONTAL_TRANS_SUBTYPE            = 14;
var FOURBLADE_TRANS_SUBTYPE                     = 15; // 39
var FROMLEFT_TRANS_SUBTYPE                      = 16; // 97
var FROMTOP_TRANS_SUBTYPE                       = 17;
var FROMRIGHT_TRANS_SUBTYPE                     = 18;
var FROMBOTTOM_TRANS_SUBTYPE                    = 19;
var CROSSFADE_TRANS_SUBTYPE                     = 20;
var FADETOCOLOR_TRANS_SUBTYPE                   = 21;
var FADEFROMCOLOR_TRANS_SUBTYPE                 = 22;
var FADEOVERCOLOR_TRANS_SUBTYPE                 = 23;
var THREEBLADE_TRANS_SUBTYPE                    = 24;
var EIGHTBLADE_TRANS_SUBTYPE                    = 25;
var ONEBLADE_TRANS_SUBTYPE                      = 26; // 107
var ACROSS_TRANS_SUBTYPE                        = 27;
var TOPLEFTVERTICAL_TRANS_SUBTYPE               = 28; // 109
var TOPLEFTHORIZONTAL_TRANS_SUBTYPE             = 29; // 64
var TOPLEFTDIAGONAL_TRANS_SUBTYPE               = 30; // 65
var TOPRIGHTDIAGONAL_TRANS_SUBTYPE              = 31; // 66
var BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE           = 32; // 67
var BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE            = 33; // 68
var RECTANGLE_TRANS_SUBTYPE                     = 34; // 101
var DIAMOND_TRANS_SUBTYPE                       = 35; // 102
var TOPLEFT_TRANS_SUBTYPE                       = 36; // 3
var TOPRIGHT_TRANS_SUBTYPE                      = 37; // 4
var BOTTOMRIGHT_TRANS_SUBTYPE                   = 38; // 5
var BOTTOMLEFT_TRANS_SUBTYPE                    = 39; // 6
var TOPCENTER_TRANS_SUBTYPE                     = 40; // 7
var RIGHTCENTER_TRANS_SUBTYPE                   = 41; // 8
var BOTTOMCENTER_TRANS_SUBTYPE                  = 42; // 9
var LEFTCENTER_TRANS_SUBTYPE                    = 43; // 10
var LEFT_TRANS_SUBTYPE                          = 44; // 20
var UP_TRANS_SUBTYPE                            = 45; // 21
var RIGHT_TRANS_SUBTYPE                         = 46; // 22
var DIAGONALBOTTOMLEFT_TRANS_SUBTYPE            = 47; // 15
var DIAGONALTOPLEFT_TRANS_SUBTYPE               = 48; // 16
var CENTERTOP_TRANS_SUBTYPE                     = 49; // 48
var CENTERRIGHT_TRANS_SUBTYPE                   = 50; // 49
var TOP_TRANS_SUBTYPE                           = 51; // 50
var BOTTOM_TRANS_SUBTYPE                        = 52; // 52
var CLOCKWISETOP_TRANS_SUBTYPE                  = 53; // 40
var CLOCKWISERIGHT_TRANS_SUBTYPE                = 54; // 41
var CLOCKWISEBOTTOM_TRANS_SUBTYPE               = 55; // 42
var CLOCKWISELEFT_TRANS_SUBTYPE                 = 56; // 43
var CLOCKWISETOPLEFT_TRANS_SUBTYPE              = 57; // 44
var COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE    = 58; // 45
var CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE          = 59; // 46
var COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE      = 60; // 47
var VERTICALLEFT_TRANS_SUBTYPE                  = 61; // 93
var VERTICALRIGHT_TRANS_SUBTYPE                 = 62; // 94
var HORIZONTALLEFT_TRANS_SUBTYPE                = 63; // 95
var HORIZONTALRIGHT_TRANS_SUBTYPE               = 64; // 96
var TOPLEFTCLOCKWISE_TRANS_SUBTYPE              = 65; // 69
var TOPRIGHTCLOCKWISE_TRANS_SUBTYPE             = 66; // 70
var BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE          = 67; // 71
var BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE           = 68; // 72
var TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE       = 69; // 73
var TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE      = 70; // 74
var BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE   = 71; // 75
var BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE    = 72; // 76
var DOUBLEBARNDOOR_TRANS_SUBTYPE                = 73; // 17
var DOUBLEDIAMOND_TRANS_SUBTYPE                 = 74; // 18
var VERTICALTOPSAME_TRANS_SUBTYPE               = 75; // 77
var VERTICALBOTTOMSAME_TRANS_SUBTYPE            = 76; // 78
var VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 77; // 79
var VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 78; // 80
var HORIZONTALLEFTSAME_TRANS_SUBTYPE            = 79; // 81
var HORIZONTALRIGHTSAME_TRANS_SUBTYPE           = 80; // 82
var HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE     = 81; // 83
var HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE    = 82; // 84
var DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 83; // 85
var DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 84; // 86
var TWOBOXTOP_TRANS_SUBTYPE                     = 85; // 87
var TWOBOXBOTTOM_TRANS_SUBTYPE                  = 86; // 88
var TWOBOXLEFT_TRANS_SUBTYPE                    = 87; // 89
var TWOBOXRIGHT_TRANS_SUBTYPE                   = 88; // 90
var FOURBOXVERTICAL_TRANS_SUBTYPE               = 89; // 91
var FOURBOXHORIZONTAL_TRANS_SUBTYPE             = 90; // 92

var aTransitionSubtypeInMap = {
'default'                       : DEFAULT_TRANS_SUBTYPE,
'leftToRight'                   : LEFTTORIGHT_TRANS_SUBTYPE,
'topToBottom'                   : TOPTOBOTTOM_TRANS_SUBTYPE,
'cornersIn'                     : CORNERSIN_TRANS_SUBTYPE,
'cornersOut'                    : CORNERSOUT_TRANS_SUBTYPE,
'vertical'                      : VERTICAL_TRANS_SUBTYPE,
'centerTop'                     : CENTERTOP_TRANS_SUBTYPE,
'centerRight'                   : CENTERRIGHT_TRANS_SUBTYPE,
'top'                           : TOP_TRANS_SUBTYPE,
'right'                         : RIGHT_TRANS_SUBTYPE,
'bottom'                        : BOTTOM_TRANS_SUBTYPE,
'left'                          : LEFT_TRANS_SUBTYPE,
'horizontal'                    : HORIZONTAL_TRANS_SUBTYPE,
'down'                          : DOWN_TRANS_SUBTYPE,
'circle'                        : CIRCLE_TRANS_SUBTYPE,
'clockwiseTwelve'               : CLOCKWISETWELVE_TRANS_SUBTYPE,
'clockwiseThree'                : CLOCKWISETHREE_TRANS_SUBTYPE,
'clockwiseSix'                  : CLOCKWISESIX_TRANS_SUBTYPE,
'clockwiseNine'                 : CLOCKWISENINE_TRANS_SUBTYPE,
'clockwiseRight'                : CLOCKWISERIGHT_TRANS_SUBTYPE,
'clockwiseTop'                  : CLOCKWISETOP_TRANS_SUBTYPE,
'clockwiseBottom'               : CLOCKWISEBOTTOM_TRANS_SUBTYPE,
'clockwiseLeft'                 : CLOCKWISELEFT_TRANS_SUBTYPE,
'clockwiseTopLeft'              : CLOCKWISETOPLEFT_TRANS_SUBTYPE,
'counterClockwiseBottomLeft'    : COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE,
'clockwiseBottomRight'          : CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE,
'counterClockwiseTopRight'      : COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE,
'twoBladeVertical'              : TWOBLADEVERTICAL_TRANS_SUBTYPE,
'twoBladeHorizontal'            : TWOBLADEHORIZONTAL_TRANS_SUBTYPE,
'fourBlade'                     : FOURBLADE_TRANS_SUBTYPE,
'fromLeft'                      : FROMLEFT_TRANS_SUBTYPE,
'fromTop'                       : FROMTOP_TRANS_SUBTYPE,
'fromRight'                     : FROMRIGHT_TRANS_SUBTYPE,
'fromBottom'                    : FROMBOTTOM_TRANS_SUBTYPE,
'crossfade'                     : CROSSFADE_TRANS_SUBTYPE,
'fadeToColor'                   : FADETOCOLOR_TRANS_SUBTYPE,
'fadeFromColor'                 : FADEFROMCOLOR_TRANS_SUBTYPE,
'fadeOverColor'                 : FADEOVERCOLOR_TRANS_SUBTYPE,
'threeBlade'                    : THREEBLADE_TRANS_SUBTYPE,
'eightBlade'                    : EIGHTBLADE_TRANS_SUBTYPE,
'oneBlade'                      : ONEBLADE_TRANS_SUBTYPE,
'across'                        : ACROSS_TRANS_SUBTYPE,
'topLeftVertical'               : TOPLEFTVERTICAL_TRANS_SUBTYPE,
'topLeftHorizontal'             : TOPLEFTHORIZONTAL_TRANS_SUBTYPE,
'topLeftDiagonal'               : TOPLEFTDIAGONAL_TRANS_SUBTYPE,
'topRightDiagonal'              : TOPRIGHTDIAGONAL_TRANS_SUBTYPE,
'bottomRightDiagonal'           : BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE,
'topLeftClockwise'              : TOPLEFTCLOCKWISE_TRANS_SUBTYPE,
'topRightClockwise'             : TOPRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomRightClockwise'          : BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftClockwise'           : BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE,
'topLeftCounterClockwise'       : TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'topRightCounterClockwise'      : TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomRightCounterClockwise'   : BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftCounterClockwise'    : BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftDiagonal'            : BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE,
'rectangle'                     : RECTANGLE_TRANS_SUBTYPE,
'diamond'                       : DIAMOND_TRANS_SUBTYPE,
'topLeft'                       : TOPLEFT_TRANS_SUBTYPE,
'topRight'                      : TOPRIGHT_TRANS_SUBTYPE,
'bottomRight'                   : BOTTOMRIGHT_TRANS_SUBTYPE,
'bottomLeft'                    : BOTTOMLEFT_TRANS_SUBTYPE,
'topCenter'                     : TOPCENTER_TRANS_SUBTYPE,
'rightCenter'                   : RIGHTCENTER_TRANS_SUBTYPE,
'bottomCenter'                  : BOTTOMCENTER_TRANS_SUBTYPE,
'leftCenter'                    : LEFTCENTER_TRANS_SUBTYPE,
'up'                            : UP_TRANS_SUBTYPE,
'diagonalBottomLeft'            : DIAGONALBOTTOMLEFT_TRANS_SUBTYPE,
'diagonalTopLeft'               : DIAGONALTOPLEFT_TRANS_SUBTYPE,
'verticalLeft'                  : VERTICALLEFT_TRANS_SUBTYPE,
'verticalRight'                 : VERTICALRIGHT_TRANS_SUBTYPE,
'horizontalLeft'                : HORIZONTALLEFT_TRANS_SUBTYPE,
'horizontalRight'               : HORIZONTALRIGHT_TRANS_SUBTYPE,
'doubleBarnDoor'                : DOUBLEBARNDOOR_TRANS_SUBTYPE,
'doubleDiamond'                 : DOUBLEDIAMOND_TRANS_SUBTYPE,
'verticalTopSame'               : VERTICALTOPSAME_TRANS_SUBTYPE,
'verticalBottomSame'            : VERTICALBOTTOMSAME_TRANS_SUBTYPE,
'verticalTopLeftOpposite'       : VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'verticalBottomLeftOpposite'    : VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalLeftSame'            : HORIZONTALLEFTSAME_TRANS_SUBTYPE,
'horizontalRightSame'           : HORIZONTALRIGHTSAME_TRANS_SUBTYPE,
'horizontalTopLeftOpposite'     : HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalTopRightOpposite'    : HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE,
'diagonalBottomLeftOpposite'    : DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'diagonalTopLeftOpposite'       : DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'twoBoxTop'                     : TWOBOXTOP_TRANS_SUBTYPE,
'twoBoxBottom'                  : TWOBOXBOTTOM_TRANS_SUBTYPE,
'twoBoxLeft'                    : TWOBOXLEFT_TRANS_SUBTYPE,
'twoBoxRight'                   : TWOBOXRIGHT_TRANS_SUBTYPE,
'fourBoxVertical'               : FOURBOXVERTICAL_TRANS_SUBTYPE,
'fourBoxHorizontal'             : FOURBOXHORIZONTAL_TRANS_SUBTYPE
};

var TRANSITION_MODE_IN  = 1;
var TRANSITION_MODE_OUT = 0;

var aTransitionModeOutMap = [ 'out', 'in' ];


var REVERSEMETHOD_IGNORE                    = 0;
var REVERSEMETHOD_INVERT_SWEEP              = 1;
var REVERSEMETHOD_SUBTRACT_POLYGON          = 2;
var REVERSEMETHOD_SUBTRACT_AND_INVERT       = 3;
var REVERSEMETHOD_ROTATE_180                = 4;
var REVERSEMETHOD_FLIP_X                    = 5;
var REVERSEMETHOD_FLIP_Y                    = 6;

var aReverseMethodOutMap = ['ignore', 'invert sweep', 'subtract polygon',
'subtract and invert', 'rotate 180', 'flip x', 'flip y'];


var aTransitionInfoTable = {};

aTransitionInfoTable[0] = {};
aTransitionInfoTable[0][0] =
{
'class' : TRANSITION_INVALID,
'rotationAngle' : 0.0,
'scaleX' : 0.0,
'scaleY' : 0.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[SNAKEWIPE_TRANSITION] = {};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
}

aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALLEFTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALRIGHTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SPIRALWIPE_TRANSITION] = {};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNDOORWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 90.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALTOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': -45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION] = {};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEBARNDOOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEDIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1,
'scaleY': 1,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION] = {};
aTransitionInfoTable[IRISWIPE_TRANSITION][RECTANGLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION][DIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[ZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARWIPE_TRANSITION] = {};
aTransitionInfoTable[BARWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[WATERFALLWIPE_TRANSITION] = {};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][RIGHTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][LEFTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FOURBOXWIPE_TRANSITION] = {};
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSIN_TRANS_SUBTYPE] =
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSOUT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[ELLIPSEWIPE_TRANSITION] = {};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][CIRCLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CLOCKWIPE_TRANSITION] = {};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETWELVE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETHREE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISESIX_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISENINE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[VEEWIPE_TRANSITION] = {};
aTransitionInfoTable[VEEWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][UP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FANWIPE_TRANSITION] = {};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][TOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][BOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[PINWHEELWIPE_TRANSITION] = {};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][ONEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEVERTICAL_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][THREEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][FOURBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][EIGHTBLADE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};

aTransitionInfoTable[PUSHWIPE_TRANSITION] = {};
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION] = {};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISERIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISELEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SLIDEWIPE_TRANSITION] = {};
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FADE_TRANSITION] = {};
aTransitionInfoTable[FADE_TRANSITION][CROSSFADE_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADETOCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEFROMCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEOVERCOLOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[RANDOMBARWIPE_TRANSITION] = {};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION] = {};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][ACROSS_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[DISSOLVE_TRANSITION] = {};
aTransitionInfoTable[DISSOLVE_TRANSITION][DEFAULT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};


function createStateTransitionTable()
{
var aSTT = {};

aSTT[RESTART_MODE_NEVER] = {};
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE] = {};
aSTT[RESTART_MODE_ALWAYS] = {};

var aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = ENDED_NODE;    // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = ENDED_NODE;
aTable[ENDED_NODE]          = ENDED_NODE;   // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

return aSTT;
}

var aStateTransitionTable = createStateTransitionTable();


function getTransitionTable( eRestartMode, eFillMode )
{
if( eRestartMode == RESTART_MODE_DEFAULT )
{
log( 'getTransitionTable: unexpected restart mode: ' + eRestartMode
+ '. Used NEVER instead.');
eRestartMode = RESTART_MODE_NEVER;
}

if( eFillMode == FILL_MODE_DEFAULT ||
eFillMode == FILL_MODE_AUTO )
{
eFillMode = FILL_MODE_REMOVE;
}

return aStateTransitionTable[eRestartMode][eFillMode];
}


var EVENT_TRIGGER_UNKNOWN               = 0;
var EVENT_TRIGGER_ON_SLIDE_BEGIN        = 1; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_SLIDE_END          = 2; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_BEGIN_EVENT           = 3;
var EVENT_TRIGGER_END_EVENT             = 4;
var EVENT_TRIGGER_ON_CLICK              = 5;
var EVENT_TRIGGER_ON_DBL_CLICK          = 6; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_ENTER        = 7; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_LEAVE        = 8; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_NEXT_EFFECT        = 9;
var EVENT_TRIGGER_ON_PREV_EFFECT        = 10;
var EVENT_TRIGGER_REPEAT                = 11; // eslint-disable-line no-unused-vars

var aEventTriggerOutMap = [ 'unknown', 'slideBegin', 'slideEnd', 'begin', 'end', 'click',
'doubleClick', 'mouseEnter', 'mouseLeave', 'next', 'previous', 'repeat' ];


function getEventTriggerType( sEventTrigger )
{
if( sEventTrigger == 'begin' )
return EVENT_TRIGGER_BEGIN_EVENT;
else if( sEventTrigger == 'end' )
return EVENT_TRIGGER_END_EVENT;
else if( sEventTrigger == 'next' )
return EVENT_TRIGGER_ON_NEXT_EFFECT;
else if( sEventTrigger == 'prev' )
return EVENT_TRIGGER_ON_PREV_EFFECT;
else if( sEventTrigger == 'click' )
return EVENT_TRIGGER_ON_CLICK;
else
return EVENT_TRIGGER_UNKNOWN;
}


var UNKNOWN_TIMING          = 0;
var OFFSET_TIMING           = 1;
var WALLCLOCK_TIMING        = 2; // eslint-disable-line no-unused-vars
var INDEFINITE_TIMING       = 3;
var EVENT_TIMING            = 4;
var SYNCBASE_TIMING         = 5;
var MEDIA_TIMING            = 6; // eslint-disable-line no-unused-vars

var aTimingTypeOutMap = [ 'unknown', 'offset', 'wallclock', 'indefinite', 'event', 'syncbase', 'media' ];


var CHARCODE_PLUS       = '+'.charCodeAt(0);
var CHARCODE_MINUS      = '-'.charCodeAt(0);
var CHARCODE_0          = '0'.charCodeAt(0);
var CHARCODE_9          = '9'.charCodeAt(0);


function Timing( aAnimationNode, sTimingAttribute )
{
this.aAnimationNode = aAnimationNode;     // the node, the timing attribute belongs to
this.sTimingDescription = removeWhiteSpaces( sTimingAttribute );
this.eTimingType = UNKNOWN_TIMING;
this.nOffset = 0.0;                       // in seconds
this.sEventBaseElementId = '';            // the element id for event based timing
this.eEventType = EVENT_TRIGGER_UNKNOWN;  // the event type
}

Timing.prototype.getAnimationNode = function()
{
return this.aAnimationNode;
};

Timing.prototype.getType = function()
{
return this.eTimingType;
};

Timing.prototype.getOffset = function()
{
return this.nOffset;
};

Timing.prototype.getEventBaseElementId = function()
{
return this.sEventBaseElementId;
};

Timing.prototype.getEventType = function()
{
return this.eEventType;
};

Timing.prototype.parse = function()
{
if( !this.sTimingDescription )
{
this.eTimingType = OFFSET_TIMING;
return;
}

if( this.sTimingDescription == 'indefinite' )
this.eTimingType = INDEFINITE_TIMING;
else
{
var nFirstCharCode = this.sTimingDescription.charCodeAt(0);
var bPositiveOffset = !( nFirstCharCode == CHARCODE_MINUS );
if ( ( nFirstCharCode == CHARCODE_PLUS ) ||
( nFirstCharCode == CHARCODE_MINUS ) ||
( ( nFirstCharCode >= CHARCODE_0 ) && ( nFirstCharCode <= CHARCODE_9 ) ) )
{
var sClockValue
= ( ( nFirstCharCode == CHARCODE_PLUS ) || ( nFirstCharCode == CHARCODE_MINUS ) )
? this.sTimingDescription.substr( 1 )
: this.sTimingDescription;

var TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.eTimingType = OFFSET_TIMING;
this.nOffset = bPositiveOffset ? TimeInSec : -TimeInSec;
}
}
else
{
var aTimingSplit = [];
bPositiveOffset = true;
if( this.sTimingDescription.indexOf( '+' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '+' );
}
else if( this.sTimingDescription.indexOf( '-' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '-' );
bPositiveOffset = false;
}
else
{
aTimingSplit[0] = this.sTimingDescription;
aTimingSplit[1] = '';
}

if( aTimingSplit[0].indexOf( '.' ) != -1 )
{
var aEventSplit = aTimingSplit[0].split( '.' );
this.sEventBaseElementId = aEventSplit[0];
this.eEventType = getEventTriggerType( aEventSplit[1] );
}
else
{
this.eEventType = getEventTriggerType( aTimingSplit[0] );
}

if( this.eEventType == EVENT_TRIGGER_UNKNOWN )
return;

if( ( this.eEventType == EVENT_TRIGGER_BEGIN_EVENT ) ||
( this.eEventType == EVENT_TRIGGER_END_EVENT ) )
{
this.eTimingType = SYNCBASE_TIMING;
}
else
{
this.eTimingType = EVENT_TIMING;
}

if( aTimingSplit[1] )
{
sClockValue = aTimingSplit[1];
TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.nOffset = ( bPositiveOffset ) ? TimeInSec : -TimeInSec;
}
else
{
this.eTimingType = UNKNOWN_TIMING;
}

}
}
}

};

Timing.parseClockValue = function( sClockValue )
{
if( !sClockValue )
return 0.0;

var nTimeInSec = undefined;

var reFullClockValue = /^([0-9]+):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var rePartialClockValue = /^([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var reTimeCountValue = /^([0-9]+)(.[0-9]+)?(h|min|s|ms)?$/;

if( reFullClockValue.test( sClockValue ) )
{
var aClockTimeParts = reFullClockValue.exec( sClockValue );

var nHours = parseInt( aClockTimeParts[1] );
var nMinutes = parseInt( aClockTimeParts[2] );
var nSeconds = parseInt( aClockTimeParts[3] );
if( aClockTimeParts[4] )
nSeconds += parseFloat( aClockTimeParts[4] );

nTimeInSec = ( ( nHours * 60 ) +  nMinutes ) * 60 + nSeconds;

}
else if( rePartialClockValue.test( sClockValue ) )
{
aClockTimeParts = rePartialClockValue.exec( sClockValue );

nMinutes = parseInt( aClockTimeParts[1] );
nSeconds = parseInt( aClockTimeParts[2] );
if( aClockTimeParts[3] )
nSeconds += parseFloat( aClockTimeParts[3] );

nTimeInSec = nMinutes * 60 + nSeconds;
}
else if( reTimeCountValue.test( sClockValue ) )
{
aClockTimeParts = reTimeCountValue.exec( sClockValue );

var nTimeCount = parseInt( aClockTimeParts[1] );
if( aClockTimeParts[2] )
nTimeCount += parseFloat( aClockTimeParts[2] );

if( aClockTimeParts[3] )
{
if( aClockTimeParts[3] == 'h' )
{
nTimeInSec = nTimeCount * 3600;
}
else if( aClockTimeParts[3] == 'min' )
{
nTimeInSec = nTimeCount * 60;
}
else if( aClockTimeParts[3] == 's' )
{
nTimeInSec = nTimeCount;
}
else if( aClockTimeParts[3] == 'ms' )
{
nTimeInSec = nTimeCount / 1000;
}
}
else
{
nTimeInSec = nTimeCount;
}

}

if( nTimeInSec )
nTimeInSec = parseFloat( nTimeInSec.toFixed( 3 ) );
return nTimeInSec;
};

Timing.prototype.info = function( bVerbose )
{

var sInfo = '';

if( bVerbose )
{
sInfo = 'description: ' + this.sTimingDescription + ', ';

sInfo += ', type: ' +  aTimingTypeOutMap[ this.getType() ];
sInfo += ', offset: ' + this.getOffset();
sInfo += ', event base element id: ' + this.getEventBaseElementId();
sInfo += ', timing event type: ' + aEventTriggerOutMap[ this.getEventType() ];
}
else
{
switch( this.getType() )
{
case INDEFINITE_TIMING:
sInfo += 'indefinite';
break;
case OFFSET_TIMING:
sInfo += this.getOffset();
break;
case EVENT_TIMING:
case SYNCBASE_TIMING:
if( this.getEventBaseElementId() )
sInfo += this.getEventBaseElementId() + '.';
sInfo += aEventTriggerOutMap[ this.getEventType() ];
if( this.getOffset() )
{
if( this.getOffset() > 0 )
sInfo += '+';
sInfo += this.getOffset();
}
}
}

return sInfo;
};


function Duration( sDurationAttribute )
{
this.bIndefinite = false;
this.bMedia = false;
this.nValue = undefined;
this.bDefined = false;

if( !sDurationAttribute )
return;

if( sDurationAttribute == 'indefinite' )
this.bIndefinite = true;
else if( sDurationAttribute == 'media' )
this.bMedia = true;
else
{
this.nValue = Timing.parseClockValue( sDurationAttribute );
if( this.nValue <= 0.0 )
this.nValue = 0.001;  // duration must be always greater than 0
}
this.bDefined = true;
}


Duration.prototype.isSet = function()
{
return this.bDefined;
};

Duration.prototype.isIndefinite = function()
{
return this.bIndefinite;
};

Duration.prototype.isMedia = function()
{
return this.bMedia;
};

Duration.prototype.isValue = function()
{
return this.nValue != undefined;
};

Duration.prototype.getValue= function()
{
return this.nValue;
};

Duration.prototype.info= function()
{
var sInfo;

if( this.isIndefinite() )
sInfo = 'indefinite';
else if( this.isMedia() )
sInfo = 'media';
else if( this.getValue() )
sInfo = this.getValue();

return sInfo;
};


function AnimationNode()
{
}

AnimationNode.prototype.init = function() {};
AnimationNode.prototype.resolve = function() {};
AnimationNode.prototype.activate = function() {};
AnimationNode.prototype.deactivate = function() {};
AnimationNode.prototype.end = function() {};
AnimationNode.prototype.getState = function() {};
AnimationNode.prototype.registerDeactivatingListener = function() {};
AnimationNode.prototype.notifyDeactivating = function() {};


function NodeContext( aSlideShowContext )
{
this.aContext = aSlideShowContext;
this.aAnimationNodeMap = null;
this.aAnimatedElementMap = null;
this.aSourceEventElementMap = null;
this.nStartDelay = 0.0;
this.bFirstRun = undefined;
this.aSlideHeight = HEIGHT;
this.aSlideWidth = WIDTH;
}


NodeContext.prototype.makeSourceEventElement = function( sId, aEventBaseElem )
{
if( !aEventBaseElem )
{
log( 'NodeContext.makeSourceEventElement: event base element is not valid' );
return null;
}

if( !this.aContext.aEventMultiplexer )
{
log( 'NodeContext.makeSourceEventElement: event multiplexer not initialized' );
return null;
}

if( !this.aSourceEventElementMap[ sId ] )
{
this.aSourceEventElementMap[ sId ] = new SourceEventElement( sId, aEventBaseElem, this.aContext.aEventMultiplexer );
}
return this.aSourceEventElementMap[ sId ];
};


function StateTransition( aBaseNode )
{
this.aNode = aBaseNode;
this.eToState = INVALID_NODE;
}

StateTransition.prototype.enter = function( eNodeState, bForce )
{
if( !bForce ) bForce = false;

if( this.eToState != INVALID_NODE )
{
log( 'StateTransition.enter: commit() before enter()ing again!' );
return false;
}
if( !bForce && !this.aNode.isTransition( this.aNode.getState(), eNodeState  ) )
return false;

if( ( this.aNode.nCurrentStateTransition & eNodeState ) != 0 )
return false; // already in wanted transition

this.aNode.nCurrentStateTransition |= eNodeState;
this.eToState = eNodeState;
return true;
};

StateTransition.prototype.commit = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.eCurrentState = this.eToState;
this.clear();
}
};

StateTransition.prototype.clear = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.nCurrentStateTransition &= ~this.eToState;
this.eToState = INVALID_NODE;
}
};


function BaseNode( aAnimElem, aParentNode, aNodeContext )
{
this.nId = getUniqueId();
this.sClassName = 'BaseNode';

if( !aAnimElem )
log( 'BaseNode(id:' + this.nId + ') constructor: aAnimElem is not valid' );

if( !aNodeContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext is not valid' );

if( !aNodeContext.aContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext.aContext is not valid' );


this.bIsContainer = false;
this.aElement = aAnimElem;
this.aParentNode = aParentNode;
this.aNodeContext = aNodeContext;
this.aContext = aNodeContext.aContext;
this.nStartDelay = aNodeContext.nStartDelay;
this.eCurrentState = UNRESOLVED_NODE;
this.nCurrentStateTransition = 0;
this.aDeactivatingListenerArray = [];
this.aActivationEvent = null;
this.aDeactivationEvent = null;

this.aBegin = null;
this.aDuration = null;
this.aEnd = null;
this.bMainSequenceRootNode = false;
this.bInteractiveSequenceRootNode = false;
this.eFillMode = FILL_MODE_FREEZE;
this.eRestartMode = RESTART_MODE_NEVER;
this.nReapeatCount = undefined;
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
this.bAutoReverse = false;

}
extend( BaseNode, AnimationNode );


BaseNode.prototype.getId = function()
{
return this.nId;
};

BaseNode.prototype.parseElement = function()
{
var aAnimElem = this.aElement;

var sIdAttr = aAnimElem.getAttributeNS( NSS['xml'], 'id' );
if( sIdAttr )
this.aNodeContext.aAnimationNodeMap[ sIdAttr ] = this;

this.aBegin = null;
var sBeginAttr = aAnimElem.getAttributeNS( NSS['smil'], 'begin' );
this.aBegin = new Timing( this, sBeginAttr );
this.aBegin.parse();

this.aEnd = null;
var sEndAttr = aAnimElem.getAttributeNS( NSS['smil'], 'end' );
if( sEndAttr )
{
this.aEnd = new Timing( this, sEndAttr );
this.aEnd.parse();
}

this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
if( this.isContainer() )
this.aDuration = null;
else
this.aDuration = new Duration( 'indefinite' );
}

var sFillAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fill' );
if( sFillAttr && aFillModeInMap[ sFillAttr ])
this.eFillMode = aFillModeInMap[ sFillAttr ];
else
this.eFillMode = FILL_MODE_DEFAULT;

var sRestartAttr = aAnimElem.getAttributeNS( NSS['smil'], 'restart' );
if( sRestartAttr && aRestartModeInMap[ sRestartAttr ] )
this.eRestartMode = aRestartModeInMap[ sRestartAttr ];
else
this.eRestartMode = RESTART_MODE_DEFAULT;

var sRepeatCount = aAnimElem.getAttributeNS( NSS['smil'], 'repeatCount' );
if( !sRepeatCount )
this.nReapeatCount = 1;
else
this.nReapeatCount = parseFloat( sRepeatCount );
if( ( isNaN(this.nReapeatCount) ) && ( sRepeatCount != 'indefinite' ) )
this.nReapeatCount = 1;

this.nAccelerate = 0.0;
var sAccelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accelerate' );
if( sAccelerateAttr )
this.nAccelerate = parseFloat( sAccelerateAttr );
if( isNaN(this.nAccelerate) )
this.nAccelerate = 0.0;

this.nDecelerate = 0.0;
var sDecelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'decelerate' );
if( sDecelerateAttr )
this.nDecelerate = parseFloat( sDecelerateAttr );
if( isNaN(this.nDecelerate) )
this.nDecelerate = 0.0;

this.bAutoreverse = false;
var sAutoReverseAttr = aAnimElem.getAttributeNS( NSS['smil'], 'autoReverse' );
if( sAutoReverseAttr == 'true' )
this.bAutoreverse = true;


if( this.eFillMode == FILL_MODE_DEFAULT )
if( this.getParentNode() )
this.eFillMode = this.getParentNode().getFillMode();
else
this.eFillMode = FILL_MODE_AUTO;

if( this.eFillMode ==  FILL_MODE_AUTO ) // see SMIL recommendation document
{
this.eFillMode = ( this.aEnd ||
( this.nReapeatCount != 1) ||
( this.aDuration && !this.aDuration.isIndefinite() ) )
? FILL_MODE_REMOVE
: FILL_MODE_FREEZE;
}

if( this.eRestartMode == RESTART_MODE_DEFAULT )
if( this.getParentNode() )
this.eRestartMode = this.getParentNode().getRestartMode();
else
this.eRestartMode = RESTART_MODE_ALWAYS;

if( ( this.nAccelerate + this.nDecelerate ) > 1.0 )
{
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
}

this.aStateTransTable = getTransitionTable( this.getRestartMode(), this.getFillMode() );

return true;
};

BaseNode.prototype.getParentNode = function()
{
return this.aParentNode;
};

BaseNode.prototype.init = function()
{
this.DBG( this.callInfo( 'init' ) );
if( ! this.checkValidNode() )
return false;
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();

this.eCurrentState = UNRESOLVED_NODE;

return this.init_st();
};

BaseNode.prototype.resolve = function()
{
if( ! this.checkValidNode() )
return false;

this.DBG( this.callInfo( 'resolve' ) );

if( this.eCurrentState == RESOLVED_NODE )
log( 'BaseNode.resolve: already in RESOLVED state' );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( RESOLVED_NODE ) &&
this.isTransition( RESOLVED_NODE, ACTIVE_NODE ) &&
this.resolve_st() )
{
aStateTrans.commit();

if( this.aActivationEvent )
{
this.aActivationEvent.charge();
}
else
{
this.aActivationEvent = makeDelay( bind( this, this.activate ), this.getBegin().getOffset() + this.nStartDelay );
}
registerEvent( this.getId(), this.getBegin(), this.aActivationEvent, this.aNodeContext );

return true;
}

return false;
};

BaseNode.prototype.activate = function()
{
if( ! this.checkValidNode() )
return false;

if( this.eCurrentState == ACTIVE_NODE )
log( 'BaseNode.activate: already in ACTIVE state' );

this.DBG( this.callInfo( 'activate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( ACTIVE_NODE ) )
{
this.activate_st();
aStateTrans.commit();
if( !this.aContext.aEventMultiplexer )
log( 'BaseNode.activate: this.aContext.aEventMultiplexer is not valid' );
this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_BEGIN_EVENT, this.getId() );
return true;
}
return false;
};

BaseNode.prototype.deactivate = function()
{
if( this.inStateOrTransition( ENDED_NODE | FROZEN_NODE ) || !this.checkValidNode() )
return;

if( this.isTransition( this.eCurrentState, FROZEN_NODE ) )
{
this.DBG( this.callInfo( 'deactivate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( FROZEN_NODE, true /* FORCE */ ) )
{
this.deactivate_st( FROZEN_NODE );
aStateTrans.commit();

this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
}
else
{
this.end();
}
};

BaseNode.prototype.end = function()
{
var bIsFrozenOrInTransitionToFrozen = this.inStateOrTransition( FROZEN_NODE );
if( this.inStateOrTransition( ENDED_NODE ) || !this.checkValidNode() )
return;

if( !(this.isTransition( this.eCurrentState, ENDED_NODE ) ) )
log( 'BaseNode.end: end state not reachable in transition table' );

this.DBG( this.callInfo( 'end' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( ENDED_NODE, true /* FORCE */ ) )
{
this.deactivate_st( ENDED_NODE );
aStateTrans.commit();

if( !bIsFrozenOrInTransitionToFrozen )
this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
};

BaseNode.prototype.dispose = function()
{
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
this.aDeactivatingListenerArray = [];
};

BaseNode.prototype.getState = function()
{
return this.eCurrentState;
};

BaseNode.prototype.registerDeactivatingListener = function( aNotifiee )
{
if (! this.checkValidNode())
return false;

if( !aNotifiee )
{
log( 'BaseNode.registerDeactivatingListener(): invalid notifiee' );
return false;
}
this.aDeactivatingListenerArray.push( aNotifiee );

return true;
};

BaseNode.prototype.notifyDeactivating = function( aNotifier )
{
assert( ( aNotifier.getState() == FROZEN_NODE ) || ( aNotifier.getState() == ENDED_NODE ),
'BaseNode.notifyDeactivating: Notifier node is neither in FROZEN nor in ENDED state' );
};

BaseNode.prototype.isMainSequenceRootNode = function()
{
return this.bMainSequenceRootNode;
};

BaseNode.prototype.isInteractiveSequenceRootNode = function()
{
return this.bInteractiveSequenceRootNode;
};

BaseNode.prototype.makeDeactivationEvent = function( nDelay )
{
if( this.aDeactivationEvent )
{
this.aDeactivationEvent.charge();
}
else
{
if( typeof( nDelay ) == typeof(0) )
this.aDeactivationEvent = makeDelay( bind( this, this.deactivate ), nDelay );
else
this.aDeactivationEvent = null;
}
return this.aDeactivationEvent;
};

BaseNode.prototype.scheduleDeactivationEvent = function( aEvent )
{
this.DBG( this.callInfo( 'scheduleDeactivationEvent' ) );

if( !aEvent )
{
if( this.getDuration() && this.getDuration().isValue() )
aEvent = this.makeDeactivationEvent( this.getDuration().getValue() );
}
if( aEvent )
{
this.aContext.aTimerEventQueue.addEvent( aEvent );
}
};

BaseNode.prototype.checkValidNode = function()
{
return ( this.eCurrentState != INVALID_NODE );
};

BaseNode.prototype.init_st = function()
{
return true;
};

BaseNode.prototype.resolve_st = function()
{
return true;
};

BaseNode.prototype.activate_st = function()
{
this.scheduleDeactivationEvent();
};

BaseNode.prototype.deactivate_st = function( /*aNodeState*/ )
{
};

BaseNode.prototype.notifyEndListeners = function()
{
var nDeactivatingListenerCount = this.aDeactivatingListenerArray.length;

for( var i = 0; i < nDeactivatingListenerCount; ++i )
{
this.aDeactivatingListenerArray[i].notifyDeactivating( this );
}

this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_END_EVENT, this.getId() );
if( this.getParentNode() && this.getParentNode().isMainSequenceRootNode() )
this.aContext.aEventMultiplexer.notifyNextEffectEndEvent();
};

BaseNode.prototype.getContext = function()
{
return this.aContext;
};

BaseNode.prototype.isTransition = function( eFromState, eToState )
{
return ( ( this.aStateTransTable[ eFromState ] & eToState ) != 0 );
};

BaseNode.prototype.inStateOrTransition = function( nMask )
{
return ( ( ( this.eCurrentState & nMask ) != 0 ) || ( ( this.nCurrentStateTransition & nMask ) != 0 ) );
};

BaseNode.prototype.isContainer = function()
{
return this.bIsContainer;
};

BaseNode.prototype.getBegin = function()
{
return this.aBegin;
};

BaseNode.prototype.getDuration = function()
{
return this.aDuration;
};

BaseNode.prototype.getEnd = function()
{
return this.aEnd;
};

BaseNode.prototype.getFillMode = function()
{
return this.eFillMode;
};

BaseNode.prototype.getRestartMode = function()
{
return this.eRestartMode;
};

BaseNode.prototype.getRepeatCount = function()
{
return this.nReapeatCount;
};

BaseNode.prototype.getAccelerateValue = function()
{
return this.nAccelerate;
};

BaseNode.prototype.getDecelerateValue = function()
{
return this.nDecelerate;
};

BaseNode.prototype.isAutoReverseEnabled = function()
{
return this.bAutoreverse;
};

BaseNode.prototype.info = function( bVerbose )
{
var sInfo = 'class name: ' + this.sClassName;
sInfo += ';  element name: ' + this.aElement.localName;
sInfo += ';  id: ' + this.getId();
sInfo += ';  state: ' + getNodeStateName( this.getState() );

if( bVerbose )
{
sInfo += ';  is container: ' + this.isContainer();

if( this.getBegin() )
sInfo += ';  begin: ' + this.getBegin().info();

if( this.getDuration() )
sInfo += ';  dur: ' + this.getDuration().info();

if( this.getEnd() )
sInfo += ';  end: ' + this.getEnd().info();

if( this.getFillMode() )
sInfo += ';  fill: ' + aFillModeOutMap[ this.getFillMode() ];

if( this.getRestartMode() )
sInfo += ';  restart: ' + aRestartModeOutMap[ this.getRestartMode() ];

if( this.getRepeatCount() && ( this.getRepeatCount() != 1.0 ) )
sInfo += ';  repeatCount: ' + this.getRepeatCount();

if( this.getAccelerateValue() )
sInfo += ';  accelerate: ' + this.getAccelerateValue();

if( this.getDecelerateValue() )
sInfo += ';  decelerate: ' + this.getDecelerateValue();

if( this.isAutoReverseEnabled() )
sInfo += ';  autoReverse: true';

}

return sInfo;
};

BaseNode.prototype.callInfo = function( sMethodName )
{
var sInfo = this.sClassName +
'( ' + this.getId() +
', ' + getNodeStateName( this.getState() ) +
' ).' + sMethodName;
return sInfo;
};

BaseNode.prototype.DBG = function( sMessage, nTime )
{
ANIMDBG.print( sMessage, nTime );
};


function AnimationBaseNode( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationBaseNode';
this.bIsContainer = false;
this.aTargetElement = null;
this.bIsTargetTextElement = false;
this.aAnimatedElement = null;
this.aActivity = null;

this.nMinFrameCount = undefined;
this.eAdditiveMode = undefined;

}
extend( AnimationBaseNode, BaseNode );


AnimationBaseNode.prototype.parseElement = function()
{
var bRet = AnimationBaseNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.aTargetElement = null;
var sTargetElementAttr = aAnimElem.getAttributeNS( NSS['smil'], 'targetElement' );
if( sTargetElementAttr )
this.aTargetElement = document.getElementById( sTargetElementAttr );

if( !this.aTargetElement )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode.parseElement: target element not found: ' + sTargetElementAttr );
}

var sSubItemAttr = aAnimElem.getAttributeNS( NSS['anim'], 'sub-item' );
this.bIsTargetTextElement = ( sSubItemAttr && ( sSubItemAttr === 'text' ) );

var sAdditiveAttr = aAnimElem.getAttributeNS( NSS['smil'], 'additive' );
if( sAdditiveAttr && aAddittiveModeInMap[sAdditiveAttr] )
this.eAdditiveMode = aAddittiveModeInMap[sAdditiveAttr];
else
this.eAdditiveMode = ADDITIVE_MODE_REPLACE;

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;


if( this.aTargetElement )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' ) === 'visibility' )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'to' ) === 'visible' )
this.aTargetElement.setAttribute( 'visibility', 'hidden' );
}

if( !this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ] )
{
if( this.bIsTargetTextElement )
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedTextElement( this.aTargetElement );
}
else
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedElement( this.aTargetElement );
}
}
this.aAnimatedElement = this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ];

this.aAnimatedElement.setAdditiveMode( this.eAdditiveMode );
}


return bRet;
};

AnimationBaseNode.prototype.init_st = function()
{
if( this.aActivity )
this.aActivity.activate( makeEvent( bind( this, this.deactivate ) ) );
else
this.aActivity = this.createActivity();
return true;
};

AnimationBaseNode.prototype.resolve_st = function()
{
return true;
};

AnimationBaseNode.prototype.activate_st = function()
{
if( this.aActivity )
{
this.saveStateOfAnimatedElement();
this.aActivity.setTargets( this.getAnimatedElement() );
if( this.getContext().bIsSkipping  )
{
this.aActivity.end();
}
else
{
this.getContext().aActivityQueue.addActivity( this.aActivity );
}
}
else
{
AnimationBaseNode.superclass.scheduleDeactivationEvent.call( this );
}
};

AnimationBaseNode.prototype.deactivate_st = function( eDestState )
{
if( eDestState == FROZEN_NODE )
{
if( this.aActivity )
this.aActivity.end();
}
if( eDestState == ENDED_NODE )
{
if( this.aActivity )
this.aActivity.dispose();
if( ( this.getFillMode() == FILL_MODE_REMOVE ) && this.getAnimatedElement()  )
this.removeEffect();
}
};

AnimationBaseNode.prototype.createActivity = function()
{
log( 'AnimationBaseNode.createActivity: abstract method called' );
};

AnimationBaseNode.prototype.fillActivityParams = function()
{

var nDuration = 0.001;
if( this.getDuration().isValue() )
{
nDuration = this.getDuration().getValue();
}
else
{
log( 'AnimationBaseNode.fillActivityParams: duration is not a number' );
}

var aActivityParamSet = new ActivityParamSet();

aActivityParamSet.aEndEvent             = makeEvent( bind( this, this.deactivate ) );
aActivityParamSet.aTimerEventQueue      = this.aContext.aTimerEventQueue;
aActivityParamSet.aActivityQueue        = this.aContext.aActivityQueue;
aActivityParamSet.nMinDuration          = nDuration;
aActivityParamSet.nMinNumberOfFrames    = this.getMinFrameCount();
aActivityParamSet.bAutoReverse          = this.isAutoReverseEnabled();
aActivityParamSet.nRepeatCount          = this.getRepeatCount();
aActivityParamSet.nAccelerationFraction = this.getAccelerateValue();
aActivityParamSet.nDecelerationFraction = this.getDecelerateValue();
aActivityParamSet.nSlideWidth           = this.aNodeContext.aSlideWidth;
aActivityParamSet.nSlideHeight          = this.aNodeContext.aSlideHeight;

return aActivityParamSet;
};

AnimationBaseNode.prototype.hasPendingAnimation = function()
{
return true;
};

AnimationBaseNode.prototype.saveStateOfAnimatedElement = function()
{
this.getAnimatedElement().saveState( this.getId() );
};

AnimationBaseNode.prototype.removeEffect = function()
{
this.getAnimatedElement().restoreState( this.getId() );
};

AnimationBaseNode.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

AnimationBaseNode.prototype.getAnimatedElement = function()
{
return this.aAnimatedElement;
};

AnimationBaseNode.prototype.dispose= function()
{
if( this.aActivity )
this.aActivity.dispose();

AnimationBaseNode.superclass.dispose.call( this );
};

AnimationBaseNode.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

AnimationBaseNode.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimationBaseNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getMinFrameCount() )
sInfo += ';  min frame count: ' + this.getMinFrameCount();

sInfo += ';  additive: ' + aAddittiveModeOutMap[ this.getAdditiveMode() ];

if( this.getTargetElement() )
{
var sElemId = this.getTargetElement().getAttribute( 'id' );
sInfo += ';  targetElement: ' +  sElemId;
}
}

return sInfo;
};


function AnimationBaseNode2( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode2.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sAttributeName = '';
this.aToValue = null;

}
extend( AnimationBaseNode2, AnimationBaseNode );


AnimationBaseNode2.prototype.parseElement = function()
{
var bRet = AnimationBaseNode2.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.sAttributeName = aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' );
if( !this.sAttributeName )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode2.parseElement: target attribute name not found: ' + this.sAttributeName );
}

this.aToValue = aAnimElem.getAttributeNS( NSS['smil'], 'to' );

return bRet;
};

AnimationBaseNode2.prototype.getAttributeName = function()
{
return this.sAttributeName;
};

AnimationBaseNode2.prototype.getToValue = function()
{
return this.aToValue;
};

AnimationBaseNode2.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode2.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAttributeName() )
sInfo += ';  attributeName: ' + this.getAttributeName();

if( this.getToValue() )
sInfo += ';  to: ' + this.getToValue();
}

return sInfo;
};


function AnimationBaseNode3( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode3.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.eAccumulate = undefined;
this.eCalcMode = undefined;
this.aFromValue = null;
this.aByValue = null;
this.aKeyTimes = null;
this.aValues = null;
this.aFormula= null;
}
extend( AnimationBaseNode3, AnimationBaseNode2 );


AnimationBaseNode3.prototype.parseElement = function()
{
var bRet = AnimationBaseNode3.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eAccumulate = ACCUMULATE_MODE_NONE;
var sAccumulateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accumulate' );
if( sAccumulateAttr == 'sum' )
this.eAccumulate = ACCUMULATE_MODE_SUM;

this.eCalcMode = CALC_MODE_LINEAR;
var sCalcModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'calcMode' );
if( sCalcModeAttr && aCalcModeInMap[ sCalcModeAttr ] )
this.eCalcMode = aCalcModeInMap[ sCalcModeAttr ];

this.aFromValue = aAnimElem.getAttributeNS( NSS['smil'], 'from' );

this.aByValue = aAnimElem.getAttributeNS( NSS['smil'], 'by' );

this.aKeyTimes = [];
var sKeyTimesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'keyTimes' );
sKeyTimesAttr = removeWhiteSpaces( sKeyTimesAttr );
if( sKeyTimesAttr )
{
var aKeyTimes = sKeyTimesAttr.split( ';' );
for( var i = 0; i < aKeyTimes.length; ++i )
this.aKeyTimes.push( parseFloat( aKeyTimes[i] ) );
}

var sValuesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'values' );
if( sValuesAttr )
{
this.aValues = sValuesAttr.split( ';' );
}
else
{
this.aValues = [];
}

this.aFormula = aAnimElem.getAttributeNS( NSS['anim'], 'formula' );

return bRet;
};

AnimationBaseNode3.prototype.getAccumulate = function()
{
return this.eAccumulate;
};

AnimationBaseNode3.prototype.getCalcMode = function()
{
return this.eCalcMode;
};

AnimationBaseNode3.prototype.getFromValue = function()
{
return this.aFromValue;
};

AnimationBaseNode3.prototype.getByValue = function()
{
return this.aByValue;
};

AnimationBaseNode3.prototype.getKeyTimes = function()
{
return this.aKeyTimes;
};

AnimationBaseNode3.prototype.getValues = function()
{
return this.aValues;
};

AnimationBaseNode3.prototype.getFormula = function()
{
return this.aFormula;
};

AnimationBaseNode3.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode3.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAccumulate() )
sInfo += ';  accumulate: ' + aAccumulateModeOutMap[ this.getAccumulate() ];

sInfo += ';  calcMode: ' + aCalcModeOutMap[ this.getCalcMode() ];

if( this.getFromValue() )
sInfo += ';  from: ' + this.getFromValue();

if( this.getByValue() )
sInfo += ';  by: ' + this.getByValue();

if( this.getKeyTimes().length )
sInfo += ';  keyTimes: ' + this.getKeyTimes().join( ',' );

if( this.getValues().length )
sInfo += ';  values: ' + this.getValues().join( ',' );

if( this.getFormula() )
sInfo += ';  formula: ' + this.getFormula();
}

return sInfo;
};


function BaseContainerNode( aAnimElem, aParentNode, aNodeContext )
{
BaseContainerNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'BaseContainerNode';
this.bIsContainer = true;
this.aChildrenArray = [];
this.nFinishedChildren = 0;
this.bDurationIndefinite = false;
this.nLeftIterations = 1;

this.eImpressNodeType = undefined;
this.ePresetClass =  undefined;
this.ePresetId =  undefined;
}
extend( BaseContainerNode, BaseNode );


BaseContainerNode.prototype.parseElement= function()
{
var bRet = BaseContainerNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eImpressNodeType = IMPRESS_DEFAULT_NODE;
var sNodeTypeAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'node-type' );
if( sNodeTypeAttr && aImpressNodeTypeInMap[ sNodeTypeAttr ] )
this.eImpressNodeType = aImpressNodeTypeInMap[ sNodeTypeAttr ];
this.bMainSequenceRootNode = ( this.eImpressNodeType == IMPRESS_MAIN_SEQUENCE_NODE );
this.bInteractiveSequenceRootNode = ( this.eImpressNodeType == IMPRESS_INTERACTIVE_SEQUENCE_NODE );

this.ePresetClass =  undefined;
var sPresetClassAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-class' );
if( sPresetClassAttr && aPresetClassInMap[ sPresetClassAttr ] )
this.ePresetClass = aPresetClassInMap[ sPresetClassAttr ];

this.ePresetId =  undefined;
var sPresetIdAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-id' );
if( sPresetIdAttr && aPresetIdInMap[ sPresetIdAttr ] )
this.ePresetId = aPresetIdInMap[ sPresetIdAttr ];


var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].parseElement();
}


this.bDurationIndefinite
= ( !this.getDuration() || this.getDuration().isIndefinite()  ) &&
( !this.getEnd() || ( this.getEnd().getType() != OFFSET_TIMING ) );

return bRet;
};

BaseContainerNode.prototype.appendChildNode = function( aAnimationNode )
{
if( ! this.checkValidNode() )
return ;

if( aAnimationNode.registerDeactivatingListener( this ) )
this.aChildrenArray.push( aAnimationNode );
};

BaseContainerNode.prototype.removeAllChildrenNodes = function()
{
this.aChildrenArray = [];
};

BaseContainerNode.prototype.init_st = function()
{
this.nLeftIterations = this.getRepeatCount();

return this.init_children();
};

BaseContainerNode.prototype.init_children = function()
{
this.nFinishedChildren = 0;
var nChildrenCount = this.aChildrenArray.length;
var nInitChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].init() )
{
++nInitChildren;
}
}
return ( nChildrenCount == nInitChildren );
};


BaseContainerNode.prototype.deactivate_st = function( eDestState )
{
this.nLeftIterations = 0;
if( eDestState == FROZEN_NODE )
{
this.forEachChildNode( mem_fn( 'deactivate' ), ~( FROZEN_NODE | ENDED_NODE ) );
}
else
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
if( this.getFillMode() == FILL_MODE_REMOVE )
this.removeEffect();
}
};

BaseContainerNode.prototype.hasPendingAnimation = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].hasPendingAnimation() )
return true;
}
return false;
};

BaseContainerNode.prototype.activate_st = function()
{
log( 'BaseContainerNode.activate_st: abstract method called' );
};

BaseContainerNode.prototype.notifyDeactivating = function( /*aAnimationNode*/ )
{
log( 'BaseContainerNode.notifyDeactivating: abstract method called' );
};

BaseContainerNode.prototype.isDurationIndefinite = function()
{
return this.bDurationIndefinite;
};

BaseContainerNode.prototype.isChildNode = function( aAnimationNode )
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].getId() == aAnimationNode.getId() )
return true;
}
return false;
};

BaseContainerNode.prototype.notifyDeactivatedChild = function( aChildNode )
{
assert( ( aChildNode.getState() == FROZEN_NODE ) || ( aChildNode.getState() == ENDED_NODE ),
'BaseContainerNode.notifyDeactivatedChild: passed child node is neither in FROZEN nor in ENDED state' );

assert( this.getState() != INVALID_NODE,
'BaseContainerNode.notifyDeactivatedChild: this node is invalid' );

if( !this.isChildNode( aChildNode ) )
{
log( 'BaseContainerNode.notifyDeactivatedChild: unknown child notifier!' );
return false;
}

var nChildrenCount = this.aChildrenArray.length;

assert( ( this.nFinishedChildren < nChildrenCount ),
'BaseContainerNode.notifyDeactivatedChild: assert(this.nFinishedChildren < nChildrenCount) failed' );

++this.nFinishedChildren;
var bFinished = ( this.nFinishedChildren >= nChildrenCount );

if( bFinished && this.isDurationIndefinite() )
{
if( this.nLeftIterations >= 1.0 )
{
this.nLeftIterations -= 1.0;
}
if( this.nLeftIterations >= 1.0 )
{
bFinished = false;
var aRepetitionEvent = makeDelay( bind( this, this.repeat ), 0.0 );
this.aContext.aTimerEventQueue.addEvent( aRepetitionEvent );
}
else
{
this.deactivate();
}
}

return bFinished;
};

BaseContainerNode.prototype.repeat = function()
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
this.removeEffect();
var bInitialized = this.init_children();
if( bInitialized )
this.activate_st();
return bInitialized;
};

BaseContainerNode.prototype.removeEffect = function()
{
var nChildrenCount = this.aChildrenArray.length;
if( nChildrenCount == 0 )
return;
for( var i = nChildrenCount - 1; i >= 0; --i )
{
if( ( this.aChildrenArray[i].getState() & ( FROZEN_NODE | ENDED_NODE ) ) == 0 )
{
log( 'BaseContainerNode.removeEffect: child(id:'
+ this.aChildrenArray[i].getId() + ') is neither frozen nor ended;'
+ ' state: '
+ aTransitionModeOutMap[ this.aChildrenArray[i].getState() ] );
continue;
}
this.aChildrenArray[i].removeEffect();
}
};

BaseContainerNode.prototype.saveStateOfAnimatedElement = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].saveStateOfAnimatedElement();
}
};

BaseContainerNode.prototype.forEachChildNode = function( aFunction, eNodeStateMask )
{
if( !eNodeStateMask )
eNodeStateMask = -1;

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( ( eNodeStateMask != -1 ) && ( ( this.aChildrenArray[i].getState() & eNodeStateMask ) == 0 ) )
continue;
aFunction( this.aChildrenArray[i] );
}
};

BaseContainerNode.prototype.dispose = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].dispose();
}

BaseContainerNode.superclass.dispose.call( this );
};

BaseContainerNode.prototype.getImpressNodeType = function()
{
return this.eImpressNodeType;
};

BaseContainerNode.prototype.info = function( bVerbose )
{
var sInfo = BaseContainerNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getImpressNodeType() )
sInfo += ';  node-type: ' + aImpressNodeTypeOutMap[ this.getImpressNodeType() ];
}

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
sInfo += '\n';
sInfo += this.aChildrenArray[i].info( bVerbose );
}

return sInfo;
};


function ParallelTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
ParallelTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'ParallelTimeContainer';
}
extend( ParallelTimeContainer, BaseContainerNode );


ParallelTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
var nResolvedChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].resolve() )
{
++nResolvedChildren;
}
}

if( nChildrenCount != nResolvedChildren )
{
log( 'ParallelTimeContainer.activate_st: resolving all children failed' );
return;
}


if( this.isDurationIndefinite() && ( nChildrenCount == 0  ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

ParallelTimeContainer.prototype.notifyDeactivating = function( aAnimationNode )
{
this.notifyDeactivatedChild( aAnimationNode );
};


function SequentialTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
SequentialTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'SequentialTimeContainer';
this.bIsRewinding = false;
this.aCurrentSkipEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
}
extend( SequentialTimeContainer, BaseContainerNode );


SequentialTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( ; this.nFinishedChildren < nChildrenCount; ++this.nFinishedChildren )
{
if( this.resolveChild( this.aChildrenArray[ this.nFinishedChildren ] ) )
break;
else
log( 'SequentialTimeContainer.activate_st: resolving child failed!' );
}

if( this.isDurationIndefinite() && ( ( nChildrenCount == 0 ) || ( this.nFinishedChildren >= nChildrenCount ) ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

SequentialTimeContainer.prototype.notifyDeactivating = function( aNotifier )
{
if( this.bIsRewinding )
return;

if( this.notifyDeactivatedChild( aNotifier ) )
return;

assert( this.nFinishedChildren < this.aChildrenArray.length,
'SequentialTimeContainer.notifyDeactivating: assertion (this.nFinishedChildren < this.aChildrenArray.length) failed' );

var aNextChild = this.aChildrenArray[ this.nFinishedChildren ];

assert( aNextChild.getState() == UNRESOLVED_NODE,
'SequentialTimeContainer.notifyDeactivating: assertion (aNextChild.getState == UNRESOLVED_NODE) failed' );

if( !this.resolveChild( aNextChild ) )
{
this.deactivate();
}
};

SequentialTimeContainer.prototype.skipEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
var aEvent = makeEvent( bind2( aChildNode.deactivate, aChildNode ) );
this.getContext().aTimerEventQueue.addEvent( aEvent );
}
else
{
log( 'SequentialTimeContainer.skipEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindCurrentEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindCurrentEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
this.getContext().aActivityQueue.endAll();

aChildNode.end();
aChildNode.removeEffect();
aChildNode.init();
this.resolveChild( aChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindCurrentEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindLastEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindLastEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().aActivityQueue.clear();
aChildNode.end();

--this.nFinishedChildren;
var aPreviousChildNode = this.aChildrenArray[ this.nFinishedChildren ];

aPreviousChildNode.removeEffect();
aPreviousChildNode.init();
aChildNode.init();
this.resolveChild( aPreviousChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindLastEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.resolveChild = function( aChildNode )
{
var bResolved = aChildNode.resolve();

if( bResolved && ( this.isMainSequenceRootNode() || this.isInteractiveSequenceRootNode() ) )
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();
this.aCurrentSkipEvent = makeEvent( bind2( SequentialTimeContainer.prototype.skipEffect, this, aChildNode ) );

if( this.aRewindCurrentEffectEvent )
this.aRewindCurrentEffectEvent.dispose();
this.aRewindCurrentEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindCurrentEffect, this, aChildNode ) );

if( this.aRewindLastEffectEvent )
this.aRewindLastEffectEvent.dispose();
this.aRewindLastEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindLastEffect, this, aChildNode ) );

if( this.isMainSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipEffectEvent( this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindCurrentEffectEvent( this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindLastEffectEvent( this.aRewindLastEffectEvent );
}
else if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipInteractiveEffectEvent( aChildNode.getId(), this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindRunningInteractiveEffectEvent( aChildNode.getId(), this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindEndedInteractiveEffectEvent( aChildNode.getId(), this.aRewindLastEffectEvent );
}
}
return bResolved;
};

SequentialTimeContainer.prototype.notifyRewindedEvent = function( aChildNode )
{
if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( aChildNode.getId() );

var sId = aChildNode.getBegin().getEventBaseElementId();
if( sId )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( sId );
}
}
};

SequentialTimeContainer.prototype.dispose = function()
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();

SequentialTimeContainer.superclass.dispose.call( this );
};


function PropertyAnimationNode(  aAnimElem, aParentNode, aNodeContext )
{
PropertyAnimationNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'PropertyAnimationNode';
}
extend( PropertyAnimationNode, AnimationBaseNode3 );


PropertyAnimationNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aInterpolator = null;  // createActivity will compute it;
return createActivity( aActivityParamSet, this, aAnimation, aInterpolator );
};


function AnimationSetNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationSetNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationSetNode';
}
extend( AnimationSetNode, AnimationBaseNode2 );


AnimationSetNode.prototype.createActivity = function()
{
var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aActivityParamSet = this.fillActivityParams();

return new SetActivity( aActivityParamSet, aAnimation, this.getToValue() );
};


function AnimationColorNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationColorNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationColorNode';

this.eColorInterpolation = undefined;
this.eColorInterpolationDirection = undefined;
}
extend( AnimationColorNode, AnimationBaseNode3 );


AnimationColorNode.prototype.parseElement = function()
{
var bRet = AnimationColorNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eColorInterpolation = COLOR_SPACE_RGB;
var sColorInterpolationAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation' );
if( sColorInterpolationAttr && aColorSpaceInMap[ sColorInterpolationAttr ] )
this.eColorInterpolation = aColorSpaceInMap[ sColorInterpolationAttr ];

this.eColorInterpolationDirection = CLOCKWISE;
var sColorInterpolationDirectionAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation-direction' );
if( sColorInterpolationDirectionAttr && aClockDirectionInMap[ sColorInterpolationDirectionAttr ] )
this.eColorInterpolationDirection = aClockDirectionInMap[ sColorInterpolationDirectionAttr ];

return bRet;
};

AnimationColorNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aColorAnimation;
var aInterpolator;
if( this.getColorInterpolation() === COLOR_SPACE_HSL )
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space hsl'  );
aColorAnimation = new HSLAnimationWrapper( aAnimation );
var aInterpolatorMaker = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_HSL );
aInterpolator = aInterpolatorMaker( this.getColorInterpolationDirection() );
}
else
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space rgb'  );
aColorAnimation = aAnimation;
aInterpolator = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_RGB );
}

return createActivity( aActivityParamSet, this, aColorAnimation, aInterpolator );
};

AnimationColorNode.prototype.getColorInterpolation = function()
{
return this.eColorInterpolation;
};

AnimationColorNode.prototype.getColorInterpolationDirection = function()
{
return this.eColorInterpolationDirection;
};

AnimationColorNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationColorNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  color-interpolation: ' + aColorSpaceOutMap[ this.getColorInterpolation() ];

sInfo += ';  color-interpolation-direction: ' + aClockDirectionOutMap[ this.getColorInterpolationDirection() ];
}
return sInfo;
};


function AnimationTransitionFilterNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationTransitionFilterNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationTransitionFilterNode';

this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = undefined;
this.eTransitionMode = undefined;
}
extend( AnimationTransitionFilterNode, AnimationBaseNode );


AnimationTransitionFilterNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

return createShapeTransition( aActivityParamSet,
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight,
this );
};

AnimationTransitionFilterNode.prototype.parseElement = function()
{
var bRet = AnimationTransitionFilterNode.superclass.parseElement.call( this );
var bIsValidTransition = true;

var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined  ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( !bIsValidTransition )
{
this.eTransitionType = FADE_TRANSITION;
this.eTransitionSubType = CROSSFADE_TRANS_SUBTYPE;
log( 'AnimationTransitionFilterNode.parseElement: in place of the invalid transition a crossfade transition is used' );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.eTransitionMode = TRANSITION_MODE_IN;
var sModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'mode' );
if( sModeAttr === 'out' )
this.eTransitionMode = TRANSITION_MODE_OUT;

return bRet;
};

AnimationTransitionFilterNode.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

AnimationTransitionFilterNode.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

AnimationTransitionFilterNode.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

AnimationTransitionFilterNode.prototype.getReverseDirection = function()
{
return this.bReverseDirection;
};

AnimationTransitionFilterNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationTransitionFilterNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( this.getReverseDirection() )
sInfo += ';  direction: reverse';
}

return sInfo;
};


function createAnimationTree( aRootElement, aNodeContext )
{
return createAnimationNode( aRootElement, null, aNodeContext );
}


function createAnimationNode( aElement, aParentNode, aNodeContext )
{
assert( aElement, 'createAnimationNode: invalid animation element' );

var eAnimationNodeType = getAnimationElementType( aElement );

var aCreatedNode = null;
var aCreatedContainer = null;

switch( eAnimationNodeType )
{
case ANIMATION_NODE_PAR:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ITERATE:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SEQ:
aCreatedNode = aCreatedContainer =
new SequentialTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATE:
aCreatedNode = new PropertyAnimationNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SET:
aCreatedNode = new AnimationSetNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATEMOTION:
log( 'createAnimationNode: ANIMATEMOTION not implemented' );
return null;
case ANIMATION_NODE_ANIMATECOLOR:
aCreatedNode = new AnimationColorNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATETRANSFORM:
log( 'createAnimationNode: ANIMATETRANSFORM not implemented' );
return null;
case ANIMATION_NODE_TRANSITIONFILTER:
aCreatedNode = new AnimationTransitionFilterNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_AUDIO:
log( 'createAnimationNode: AUDIO not implemented' );
return null;
case ANIMATION_NODE_COMMAND:
log( 'createAnimationNode: COMMAND not implemented' );
return null;
default:
log( 'createAnimationNode: invalid Animation Node Type: ' + eAnimationNodeType );
return null;
}

if( aCreatedContainer )
{
if( eAnimationNodeType == ANIMATION_NODE_ITERATE )
{
createIteratedNodes( aElement, aCreatedContainer, aNodeContext );
}
else
{
var aChildrenArray = getElementChildren( aElement );
for( var i = 0; i < aChildrenArray.length; ++i )
{
if( !createChildNode( aChildrenArray[i], aCreatedContainer, aNodeContext ) )
{
aCreatedContainer.removeAllChildrenNodes();
break;
}
}
}
}

return aCreatedNode;
}


function createChildNode( aElement, aParentNode, aNodeContext )
{
var aChildNode = createAnimationNode( aElement, aParentNode, aNodeContext );

if( !aChildNode )
{
log( 'createChildNode: child node creation failed' );
return false;
}
else
{
aParentNode.appendChildNode( aChildNode );
return true;
}
}


function createIteratedNodes( /*aElement, aContainerNode, aNodeContext*/ )
{
}


function makeScaler( nScale )
{
if( ( typeof( nScale ) !== typeof( 0 ) ) || !isFinite( nScale ) )
{
log( 'makeScaler: not valid param passed: ' + nScale );
return null;
}

return  function( nValue )
{
return ( nScale * nValue );
};
}


function createPropertyAnimation( sAttrName, aAnimatedElement, nWidth, nHeight )
{
if( !aAttributeMap[ sAttrName ] )
{
log( 'createPropertyAnimation: attribute is unknown' );
return null;
}


var aFunctorSet = aAttributeMap[ sAttrName ];

var sGetValueMethod =   aFunctorSet.get;
var sSetValueMethod =   aFunctorSet.set;

if( !sGetValueMethod || !sSetValueMethod  )
{
log( 'createPropertyAnimation: attribute is not handled' );
return null;
}

var aGetModifier =  eval( aFunctorSet.getmod );
var aSetModifier =  eval( aFunctorSet.setmod );


return new GenericAnimation( bind( aAnimatedElement, aAnimatedElement[ sGetValueMethod ] ),
bind( aAnimatedElement, aAnimatedElement[ sSetValueMethod ] ),
aGetModifier,
aSetModifier);
}


function createShapeTransition( aActivityParamSet, aAnimatedElement,
nSlideWidth, nSlideHeight,
aAnimatedTransitionFilterNode )
{
if( !aAnimatedTransitionFilterNode )
{
log( 'createShapeTransition: the animated transition filter node is not valid.' );
return null;
}
var eTransitionType = aAnimatedTransitionFilterNode.getTransitionType();
var eTransitionSubType = aAnimatedTransitionFilterNode.getTransitionSubType();
var bDirectionForward = ! aAnimatedTransitionFilterNode.getReverseDirection();
var bModeIn = ( aAnimatedTransitionFilterNode.getTransitionMode() == FORWARD );

var aTransitionInfo = aTransitionInfoTable[eTransitionType][eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'createShapeTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( eTransitionType, eTransitionSubType );
var aClippingAnimation
= new ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn );
return new SimpleActivity( aActivityParamSet, aClippingAnimation, true );

case TRANSITION_SPECIAL:
switch( eTransitionType )
{
default:
var aAnimation
= createPropertyAnimation( 'opacity',
aAnimatedElement,
nSlideWidth,
nSlideHeight );
return new SimpleActivity( aActivityParamSet, aAnimation, bModeIn );
}
}

}


function ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn )
{
this.aClippingFunctor = new ClippingFunctor( aParametricPolyPolygon,
aTransitionInfo,
bDirectionForward, bModeIn );
this.bAnimationStarted = false;
}

ClippingAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement,
'ClippingAnimation.start: animatable element is not valid' );
this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.initClipPath();
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;

};

ClippingAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.aAnimatableElement.cleanClipPath();
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

ClippingAnimation.prototype.perform = function( nValue )
{
var nWidth = this.aAnimatableElement.aClippingBBox.width;
var nHeight = this.aAnimatableElement.aClippingBBox.height;
var aPolyPolygonElement = this.aClippingFunctor.perform( nValue, nWidth, nHeight );
this.aAnimatableElement.setClipPath( aPolyPolygonElement );
};

ClippingAnimation.prototype.getUnderlyingValue = function()
{
return 0.0;
};


function GenericAnimation( aGetValueFunc, aSetValueFunc, aGetModifier, aSetModifier )
{
assert( aGetValueFunc && aSetValueFunc,
'GenericAnimation constructor: get value functor and/or set value functor are not valid' );

this.aGetValueFunc = aGetValueFunc;
this.aSetValueFunc = aSetValueFunc;
this.aGetModifier = aGetModifier;
this.aSetModifier = aSetModifier;
this.aAnimatableElement = null;
this.bAnimationStarted = false;
}


GenericAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement, 'GenericAnimation.start: animatable element is not valid' );

this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;
};

GenericAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

GenericAnimation.prototype.perform = function( aValue )
{
if( this.aSetModifier )
aValue = this.aSetModifier( aValue );

this.aSetValueFunc( aValue );
};

GenericAnimation.prototype.getUnderlyingValue = function()
{
var aValue = this.aGetValueFunc();
if( this.aGetModifier )
aValue = this.aGetModifier( aValue );
return aValue;
};


function HSLAnimationWrapper( aColorAnimation )
{
assert( aColorAnimation,
'HSLAnimationWrapper constructor: invalid color animation delegate' );

this.aAnimation = aColorAnimation;
}


HSLAnimationWrapper.prototype.start = function( aAnimatableElement )
{
this.aAnimation.start( aAnimatableElement );
};

HSLAnimationWrapper.prototype.end = function()
{
this.aAnimation.end();
};
HSLAnimationWrapper.prototype.perform = function( aHSLValue )
{
this.aAnimation.perform( aHSLValue.convertToRGB() );
};

HSLAnimationWrapper.prototype.getUnderlyingValue = function()
{
return this.aAnimation.getUnderlyingValue().convertToHSL();
};


function SlideChangeBase(aLeavingSlide, aEnteringSlide)
{
this.aLeavingSlide = aLeavingSlide;
this.aEnteringSlide = aEnteringSlide;
this.bIsFinished = false;
}

SlideChangeBase.prototype.start = function()
{
};

SlideChangeBase.prototype.end = function()
{
if( this.bIsFinished )
return;

this.aLeavingSlide.hide();
this.aEnteringSlide.reset();
this.aLeavingSlide.reset();

this.bIsFinished = true;
};

SlideChangeBase.prototype.perform = function( nValue )
{
if( this.bIsFinished ) return false;

if( this.aLeavingSlide )
this.performOut( nValue );

if( this.aEnteringSlide )
this.performIn( nValue );

return true;
};

SlideChangeBase.prototype.getUnderlyingValue = function()
{
return 0.0;
};

SlideChangeBase.prototype.performIn = function( )
{
log( 'SlideChangeBase.performIn: abstract method called' );
};

SlideChangeBase.prototype.performOut = function( )
{
log( 'SlideChangeBase.performOut: abstract method called' );
};


function FadingSlideChange( aLeavingSlide, aEnteringSlide )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.bFirstRun = true;
}
extend( FadingSlideChange, SlideChangeBase );

FadingSlideChange.prototype.start = function()
{
FadingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( nT );
};

FadingSlideChange.prototype.performOut = function( nT )
{

this.aLeavingSlide.setOpacity( 1 - nT );
};


function FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, sFadeColor )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.sFadeColor = sFadeColor;
if( !this.sFadeColor )
{
log( 'FadingOverColorSlideChange: sFadeColor not valid.' );
this.sFadeColor = '#000000';
}
this.aColorPlaneElement = this.createColorPlaneElement();
}
extend( FadingOverColorSlideChange, SlideChangeBase );

FadingOverColorSlideChange.prototype.start = function()
{
FadingOverColorSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.insertBefore( this.aColorPlaneElement );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingOverColorSlideChange.prototype.end = function()
{
FadingOverColorSlideChange.superclass.end.call( this );
this.aLeavingSlide.removeElement( this.aColorPlaneElement );
};

FadingOverColorSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( (nT > 0.55) ? 2.0*(nT-0.55) : 0.0 );
};

FadingOverColorSlideChange.prototype.performOut = function( nT )
{
this.aLeavingSlide.setOpacity( (nT > 0.45) ? 0.0 : 2.0*(0.45-nT) );
};

FadingOverColorSlideChange.prototype.createColorPlaneElement = function()
{
var aColorPlaneElement = document.createElementNS( NSS['svg'], 'rect' );
aColorPlaneElement.setAttribute( 'width', String( this.aLeavingSlide.getWidth() ) );
aColorPlaneElement.setAttribute( 'height', String( this.aLeavingSlide.getHeight() ) );
aColorPlaneElement.setAttribute( 'fill', this.sFadeColor );
return aColorPlaneElement;
};


function MovingSlideChange( aLeavingSlide, aEnteringSlide,
aLeavingDirection, aEnteringDirection )
{
MovingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.aLeavingDirection = aLeavingDirection;
this.aEnteringDirection = aEnteringDirection;
}
extend( MovingSlideChange, SlideChangeBase );

MovingSlideChange.prototype.start = function()
{
MovingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'transform' );
this.aLeavingSlide.notifyUsedAttribute( 'transform' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

MovingSlideChange.prototype.performIn = function( nT )
{
var nS = nT - 1;
var dx = nS * this.aEnteringDirection.x * this.aEnteringSlide.getWidth();
var dy = nS * this.aEnteringDirection.y * this.aEnteringSlide.getHeight();
this.aEnteringSlide.translate( dx, dy );
};

MovingSlideChange.prototype.performOut = function( nT )
{
var dx = nT * this.aLeavingDirection.x * this.aLeavingSlide.getWidth();
var dy = nT * this.aLeavingDirection.y * this.aLeavingSlide.getHeight();
this.aLeavingSlide.translate( dx, dy );
};


function ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, bIsDirectionForward )
{
ClippedSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );

var bIsModeIn = true;
this.aClippingFunctor= new ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn );
}
extend( ClippedSlideChange, SlideChangeBase );

ClippedSlideChange.prototype.start = function()
{
ClippedSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'clip-path' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

ClippedSlideChange.prototype.performIn = function( nT )
{
var nWidth = this.aEnteringSlide.getWidth();
var nHeight = this.aEnteringSlide.getHeight();
var aPolyPolygonElement = this.aClippingFunctor.perform( nT, nWidth, nHeight );
this.aEnteringSlide.setClipPath( aPolyPolygonElement );
};

ClippedSlideChange.prototype.performOut = function( )
{
};


function ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn)
{
this.aParametricPolyPolygon = aParametricPolyPolygon;
this.aStaticTransformation = null;
this.bForwardParameterSweep = true;
this.bSubtractPolygon = false;
this.bScaleIsotropically = aTransitionInfo.scaleIsotropically;
this.bFlip = false;

assert( this.aParametricPolyPolygon,
'ClippingFunctor: parametric polygon is not valid' );

if( aTransitionInfo.rotationAngle != 0.0 ||
aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
{
this.aStaticTransformation = SVGIdentityMatrix.translate( 0.5, 0.5 );
if( aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
this.aStaticTransformation
= this.aStaticTransformation.scaleNonUniform( aTransitionInfo.scaleX,
aTransitionInfo.scaleY );
if( aTransitionInfo.rotationAngle != 0.0 )
this.aStaticTransformation
= this.aStaticTransformation.rotate( aTransitionInfo.rotationAngle );
this.aStaticTransformation = this.aStaticTransformation.translate( -0.5, -0.5 );
}
else
{
this.aStaticTransformation = document.documentElement.createSVGMatrix();
}

if( !bIsDirectionForward )
{
var aMatrix = null;
switch( aTransitionInfo.reverseMethod )
{
default:
log( 'ClippingFunctor: unexpected reverse method.' );
break;
case REVERSEMETHOD_IGNORE:
break;
case REVERSEMETHOD_INVERT_SWEEP:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
break;
case REVERSEMETHOD_SUBTRACT_POLYGON:
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_SUBTRACT_AND_INVERT:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_ROTATE_180:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.setToRotationAroundPoint( 0.5, 0.5, 180 );
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
break;
case REVERSEMETHOD_FLIP_X:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.a = -1; aMatrix.e = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
case REVERSEMETHOD_FLIP_Y:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.d = -1; aMatrix.f = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
}
}

if( !bIsModeIn )
{
if( aTransitionInfo.outInvertsSweep )
{
this.bForwardParameterSweep = !this.bForwardParameterSweep;
}
else
{
this.bSubtractPolygon = !this.bSubtractPolygon;
}
}
}

ClippingFunctor.aBoundingPath = document.createElementNS( NSS['svg'], 'path' );
ClippingFunctor.aBoundingPath.setAttribute( 'd', 'M -1 -1 L 2 -1 L 2 2 L -1 2 L -1 -1' );

ClippingFunctor.prototype.perform = function( nT, nWidth, nHeight )
{
var aClipPoly = this.aParametricPolyPolygon.perform( this.bForwardParameterSweep ? nT : (1 - nT) );


if( this.bSubtractPolygon )
{
aClipPoly.changeOrientation();
aClipPoly.prependPath( ClippingFunctor.aBoundingPath );
}

var aMatrix;
if( this.bScaleIsotropically )
{
var nScaleFactor = Math.max( nWidth, nHeight );
aMatrix = SVGIdentityMatrix.translate( -( nScaleFactor - nWidth ) / 2.0,
-( nScaleFactor - nHeight ) / 2.0 );
aMatrix = aMatrix.scale( nScaleFactor );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}
else
{
aMatrix = SVGIdentityMatrix.scaleNonUniform( nWidth, nHeight );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}

aClipPoly.matrixTransform( aMatrix );

return aClipPoly;
};


function createClipPolyPolygon( nType, nSubtype )
{
switch( nType )
{
default:
log( 'createClipPolyPolygon: unknown transition type: ' + nType );
return null;
case BARWIPE_TRANSITION:
return new BarWipePath( 1 );
case FOURBOXWIPE_TRANSITION:
return new FourBoxWipePath( nSubtype === CORNERSOUT_TRANS_SUBTYPE );
case BOXWIPE_TRANSITION:
return new BoxWipePath( nSubtype == LEFTCENTER_TRANS_SUBTYPE ||
nSubtype == TOPCENTER_TRANS_SUBTYPE ||
nSubtype == RIGHTCENTER_TRANS_SUBTYPE ||
nSubtype == BOTTOMCENTER_TRANS_SUBTYPE );
case ELLIPSEWIPE_TRANSITION:
return new EllipseWipePath( nSubtype );
case FANWIPE_TRANSITION:
return new FanWipePath(nSubtype == CENTERTOP_TRANS_SUBTYPE ||
nSubtype == CENTERRIGHT_TRANS_SUBTYPE, true, false);
case PINWHEELWIPE_TRANSITION:
var nBlades;
switch( nSubtype )
{
case ONEBLADE_TRANS_SUBTYPE:
nBlades = 1;
break;
case DEFAULT_TRANS_SUBTYPE:
case TWOBLADEVERTICAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case TWOBLADEHORIZONTAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case THREEBLADE_TRANS_SUBTYPE:
nBlades = 3;
break;
case FOURBLADE_TRANS_SUBTYPE:
nBlades = 4;
break;
case EIGHTBLADE_TRANS_SUBTYPE:
nBlades = 8;
break;
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
return new PinWheelWipePath( nBlades );
case CLOCKWIPE_TRANSITION:
return new ClockWipePath();
case RANDOMBARWIPE_TRANSITION:
return new RandomWipePath( 128, true /* bars */ );
case CHECKERBOARDWIPE_TRANSITION:
return new CheckerBoardWipePath( 10 );
case ZIGZAGWIPE_TRANSITION:
return new ZigZagWipePath( 5 );
case BARNZIGZAGWIPE_TRANSITION:
return new BarnZigZagWipePath( 5 );
case IRISWIPE_TRANSITION:
switch(nSubtype)
{
case RECTANGLE_TRANS_SUBTYPE:
return new IrisWipePath(0);
case DIAMOND_TRANS_SUBTYPE:
return new IrisWipePath(1);
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
case BARNDOORWIPE_TRANSITION:
return new BarnDoorWipePath(false);
case SINGLESWEEPWIPE_TRANSITION:
return new SweepWipePath(
nSubtype == CLOCKWISETOP_TRANS_SUBTYPE ||
nSubtype == CLOCKWISERIGHT_TRANS_SUBTYPE ||
nSubtype == CLOCKWISEBOTTOM_TRANS_SUBTYPE ||
nSubtype == CLOCKWISELEFT_TRANS_SUBTYPE,
true,
false,
nSubtype == COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE ||
nSubtype == COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE );
case WATERFALLWIPE_TRANSITION:
return new WaterfallWipePath(128, // flipOnYAxis
nSubtype == VERTICALRIGHT_TRANS_SUBTYPE ||
nSubtype == HORIZONTALLEFT_TRANS_SUBTYPE);
case MISCDIAGONALWIPE_TRANSITION:
switch(nSubtype) {
case DOUBLEBARNDOOR_TRANS_SUBTYPE:
return new BarnDoorWipePath(true /* Doubled */);
case DOUBLEDIAMOND_TRANS_SUBTYPE:
return new DoubleDiamondWipePath();
default:
log( 'createClipPolyPolygon: unhandled subtype: ' + nSubtype );
return null;
}
case DISSOLVE_TRANSITION:
return new RandomWipePath( 16 * 16, false /* dissolve */ );
case VEEWIPE_TRANSITION:
return new VeeWipePath();
case SNAKEWIPE_TRANSITION:
return new SnakeWipePath( 8 * 8, // diagonal
nSubtype == TOPLEFTDIAGONAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE   ,
nSubtype == TOPLEFTVERTICAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE
);
case PARALLELSNAKESWIPE_TRANSITION:
return new ParallelSnakesWipePath(
8 * 8, // elements
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE    ||
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE
);

case SPIRALWIPE_TRANSITION:
return new SpiralWipePath(
8 * 8, // elements
nSubtype == TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE );

case BOXSNAKESWIPE_TRANSITION:
return new BoxSnakesWipePath(
8 * 8,
nSubtype == FOURBOXVERTICAL_TRANS_SUBTYPE ||
nSubtype == FOURBOXHORIZONTAL_TRANS_SUBTYPE );
}
}


function createUnitSquarePath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 1 0 L 1 1 L 0 1 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function createEmptyPath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function pruneScaleValue( nVal )
{
if( nVal < 0.0 )
return (nVal < -0.00001 ? nVal : -0.00001);
else
return (nVal > 0.00001 ? nVal : 0.00001);
}


function BarWipePath( nBars /* nBars > 1: blinds effect */ )
{
this.nBars = nBars;
if( this.nBars === undefined || this.nBars < 1 )
this.nBars = 1;
this.aBasePath = createUnitSquarePath();
}

BarWipePath.prototype.perform = function( nT )
{

var aMatrix = SVGIdentityMatrix.scaleNonUniform( pruneScaleValue( nT / this.nBars ), 1.0 );

var aPolyPath = this.aBasePath.cloneNode( true );
aPolyPath.matrixTransform( aMatrix );

if( this.nBars > 1 )
{
var i;
var aTransform;
var aPath;
for( i = this.nBars - 1; i > 0; --i )
{
aTransform = SVGIdentityMatrix.translate( i / this.nBars, 0.0 );
aTransform = aTransform.multiply( aMatrix );
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}
}
return aPolyPath;
};


function BoxWipePath(bIsTopCentered) {
this.bIsTopCentered = bIsTopCentered;
this.aBasePath = createUnitSquarePath();
}

BoxWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix;
if(this.bIsTopCentered) {
aTransform = aTransform.translate(-0.5, 0.0).scale(d, d).translate(0.5, 0.0);
}
else {
aTransform = aTransform.scale(d, d);
}
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function SweepWipePath(bCenter, bSingle, bOppositeVertical, bFlipOnYAxis) {
this.bCenter = bCenter;
this.bSingle = bSingle;
this.bOppositeVertical = bOppositeVertical;
this.bFlipOnYAxis = bFlipOnYAxis;
this.aBasePath = createUnitSquarePath();
}

SweepWipePath.prototype.perform = function( nT ) {
nT /= 2.0;
if(!this.bCenter)
nT /= 2.0;
if(!this.bSingle && !this.bOppositeVertical)
nT /= 2.0;

var poly = PinWheelWipePath.calcCenteredClock( nT + 0.25, 1.0 );
var aTransform;

if(this.bCenter) {
aTransform = SVGIdentityMatrix.translate(0.5, 0.0);
poly.matrixTransform(aTransform);
}
var res = poly;

if(!this.bSingle) {
if(this.bOppositeVertical) {
aTransform = SVGIdentityMatrix.scale(1.0, -1.0);
aTransform.translate(0.0, 1.0);
poly.matrixTransform(aTransform);
poly.changeOrientation();
}
else {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
}
res.appendPath(poly);
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function FourBoxWipePath( bCornersOut )
{
this.bCornersOut = bCornersOut;
this.aBasePath = createUnitSquarePath();
}

FourBoxWipePath.prototype.perform = function( nT )
{
var aMatrix;
var d = pruneScaleValue( nT / 2.0 );

if( this.bCornersOut )
{
aMatrix = SVGIdentityMatrix.translate( -0.25, -0.25 ).scale( d ).translate( -0.5, -0.5 );
}
else
{
aMatrix = SVGIdentityMatrix.translate( -0.5, -0.5 ).scale( d );
}


var aTransform = aMatrix;
var aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
var aPolyPath = aSquare;
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipX();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );

aMatrix = SVGIdentityMatrix.translate( 0.5, 0.5 );
aMatrix = aMatrix.scale( 1.1 );
aPolyPath.matrixTransform( aMatrix );

return aPolyPath;
};


function EllipseWipePath( eSubtype )
{
this.eSubtype = eSubtype;

var sPathData = 'M 0.5 -0.207107 ' +
'C 0.687536 -0.207107 0.867392 -0.132608 1 0 ' +
'C 1.13261 0.132608 1.20711 0.312464 1.20711 0.5 ' +
'C 1.20711 0.687536 1.13261 0.867392 1 1 ' +
'C 0.867392 1.13261 0.687536 1.20711 0.5 1.20711 ' +
'C 0.312464 1.20711 0.132608 1.13261 0 1 ' +
'C -0.132608 0.867392 -0.207107 0.687536 -0.207107 0.5 ' +
'C -0.207107 0.312464 -0.132608 0.132608 0 0 ' +
'C 0.132608 -0.132608 0.312464 -0.207107 0.5 -0.207107';

this.aBasePath = document.createElementNS( NSS['svg'], 'path' );
this.aBasePath.setAttribute( 'd', sPathData );
}

EllipseWipePath.prototype.perform = function( nT )
{

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( nT ).translate( -0.5, -0.5 );
var aEllipse = this.aBasePath.cloneNode( true );
aEllipse.matrixTransform( aTransform );

return aEllipse;
};

function FanWipePath(bIsCenter, bIsSingle, bIsFanIn) {
this.bCenter = bIsCenter;
this.bSingle = bIsSingle;
this.bFanIn  = bIsFanIn;
this.aBasePath = createUnitSquarePath();
}

FanWipePath.prototype.perform = function( nT ) {
var res = this.aBasePath.cloneNode(true);
var poly = PinWheelWipePath.calcCenteredClock(
nT / ((this.bCenter && this.bSingle) ? 2.0 : 4.0), 1.0);
res.appendPath(poly);
var aTransform = SVGIdentityMatrix.flipY();
aTransform = aTransform.scaleNonUniform(-1.0, 1.0);
poly.matrixTransform(aTransform);
res.appendPath(poly);

if(this.bCenter) {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
res.matrixTransform(aTransform);

if(!this.bSingle)
res.appendPath(flipOnXAxis(res));
}
else {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 1.0).translate(0.5, 1.0);
res.matrixTransform(aTransform);
}
return res;
}

function ClockWipePath() { }

ClockWipePath.prototype.perform = function( nT ) {
const aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
var aPolyPath = PinWheelWipePath.calcCenteredClock(nT, 1.0);
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
}

function PinWheelWipePath( nBlades )
{
this.nBlades = nBlades;
if( !this.nBlades || this.nBlades < 1 )
this.nBlades = 1;
}

PinWheelWipePath.calcCenteredClock = function( nT, nE )
{
var nMAX_EDGE = 2;

var aTransform = SVGIdentityMatrix.rotate( nT * 360 );

var aPoint = document.documentElement.createSVGPoint();
aPoint.y = -nMAX_EDGE;
aPoint = aPoint.matrixTransform( aTransform );

var sPathData = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
if( nT >= 0.875 )
sPathData += 'L ' + '-' + nE + ' -' + nE + ' ';
if( nT >= 0.625 )
sPathData += 'L ' + '-' + nE + ' ' + nE + ' ';
if( nT >= 0.375 )
sPathData += 'L ' + nE + ' ' + nE + ' ';
if( nT >= 0.125 )
sPathData += 'L ' + nE + ' -' + nE + ' ';

sPathData += 'L 0 -' + nE + ' ';
sPathData += 'L 0 0 ';
sPathData += 'L '  + aPoint.x + ' ' + aPoint.y;

var aPath = document.createElementNS( NSS['svg'], 'path' );
aPath.setAttribute( 'd', sPathData );
return aPath;
};

PinWheelWipePath.prototype.perform = function( nT )
{
var aBasePath = PinWheelWipePath.calcCenteredClock( nT / this.nBlades,
2.0 /* max edge when rotating */  );

var aPolyPath = aBasePath.cloneNode( true );
var aPath;
var aRotation;
var i;
for( i = this.nBlades - 1; i > 0; --i )
{
aRotation = SVGIdentityMatrix.rotate( (i * 360) / this.nBlades );
aPath = aBasePath.cloneNode( true );
aPath.matrixTransform( aRotation );
aPolyPath.appendPath( aPath );
}

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( 0.5 );
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
};

function BarnDoorWipePath(doubled) {
this.aBasePath = createUnitSquarePath();
this.doubled   = doubled;
}

BarnDoorWipePath.prototype.perform = function( nT ) {
if(this.doubled)
nT /= 2.0;
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.scaleNonUniform(pruneScaleValue(nT), 1.0).translate(0.5, 0.5);
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
var res = aPath;

if(this.doubled) {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI / 2).translate(0.5, 0.5);
aPath.matrixTransform(aTransform);
res.appendPath(aPath);
}
return res;
}

function WaterfallWipePath(nElements, bFlipOnYAxis) {
this.bFlipOnYAxis = bFlipOnYAxis;

var sqrtElements = Math.floor(Math.sqrt(nElements));
var elementEdge = 1.0/sqrtElements;

var aPath = 'M '+ 0.0 + ' ' + -1.0 + ' ';
for(var pos = sqrtElements; pos--; ) {
var xPos = sqrtElements - pos - 1;
var yPos = pruneScaleValue( ((pos+1) * elementEdge) - 1.0);

aPath += 'L ' + pruneScaleValue(xPos * elementEdge) + ' ' + yPos + ' ';
aPath += 'L ' + pruneScaleValue((xPos+1)*elementEdge) + ' ' + yPos + ' ';
}
aPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';
this.aBasePath = document.createElementNS( NSS['svg'], 'path');
this.aBasePath.setAttribute('d', aPath);
}

WaterfallWipePath.prototype.perform = function( nT ) {
var poly = this.aBasePath.cloneNode(true);
var aTransform = SVGIdentityMatrix.translate(0.0, pruneScaleValue(2.0 * nT));
poly.matrixTransform(aTransform);
var aHead = 'M ' + 0.0 + ' ' + -1.0 + ' ';
var aHeadPath= document.createElementNS( NSS['svg'], 'path');
aHeadPath.setAttribute('d', aHead);

var aTail = 'M ' + 1.0 + ' ' + -1.0 + ' ';
var aTailPath = document.createElementNS( NSS['svg'], 'path');
aTailPath.setAttribute('d', aTail);

poly.prependPath(aHeadPath);
poly.appendPath(aTailPath);

return this.bFlipOnYAxis ? flipOnYAxis(poly) : poly;
}

function DoubleDiamondWipePath() { }

DoubleDiamondWipePath.prototype.perform = function( nT ) {
var a = pruneScaleValue(0.25 + (nT * 0.75));
var aPath = 'M ' + (0.5 + a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - a) + ' ';
aPath += 'L ' + (0.5 - a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + a) + ' ';
aPath += 'L ' + (0.5 + a) + ' ' + 0.5 + ' ';
var poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
var res = poly.cloneNode(true);

var b = pruneScaleValue( (1.0 - nT) * 0.25);
aPath = 'M ' + (0.5 + b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + b) + ' ';
aPath += 'L ' + (0.5 - b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - b) + ' ';
aPath += 'L ' + (0.5 + b) + ' ' + 0.5 + ' ';
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);

return res;
}

function IrisWipePath(unitRect) {
this.unitRect = unitRect;
this.aBasePath = createUnitSquarePath();
}


IrisWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.multiply(SVGIdentityMatrix.scaleNonUniform(d, d).translate(0.5, 0.5));
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function ZigZagWipePath(nZigs) {
this.zigEdge = 1.0/nZigs;
const d = this.zigEdge;
const d2 = (d / 2.0);
this.aBasePath = 'M ' + (-1.0 - d) + ' ' + -d + ' ';
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + (1.0 + d) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (1.0 + d) + ' ';

for(var pos = (nZigs + 2); pos--; ) {
this.aBasePath += 'L ' + 0.0 + ' ' + ((pos - 1) * d + d2) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (pos - 1) * d + ' ';
}
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + -d + ' ';
}

ZigZagWipePath.prototype.perform = function( nT ) {
var res = document.createElementNS( NSS['svg'], 'path');
res.setAttribute('d', this.aBasePath);
res.matrixTransform(SVGIdentityMatrix.translate((1.0 + this.zigEdge) * nT, 0.0));
return res;
}

function BarnZigZagWipePath( nZigs ) { ZigZagWipePath.call(this, nZigs); }

BarnZigZagWipePath.prototype = Object.create(ZigZagWipePath);

BarnZigZagWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath();
var poly = document.createElementNS( NSS['svg'], 'path');
var aTransform = SVGIdentityMatrix.translate(
((1.0 + this.zigEdge) * (1.0 - nT)) / 2.0, 0.0);
poly.setAttribute('d', this.aBasePath);
poly.changeOrientation();
poly.matrixTransform(aTransform);
res.appendPath(poly);

aTransform = SVGIdentityMatrix.scale(-1.0, 1.0);
aTransform.translate(1.0, this.zigEdge / 2.0);
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', this.aBasePath);
poly.matrixTransform(aTransform);
res.appendPath(poly);

return res;
}

function CheckerBoardWipePath( unitsPerEdge )
{
this.unitsPerEdge = unitsPerEdge;
if( this.unitsPerEdge === undefined || this.unitsPerEdge < 1 )
this.unitsPerEdge = 10;
this.aBasePath = createUnitSquarePath();
}

CheckerBoardWipePath.prototype.perform = function( nT )
{
var d = pruneScaleValue(1.0 / this.unitsPerEdge);
var aMatrix = SVGIdentityMatrix.scaleNonUniform(pruneScaleValue( d*2.0*nT ),
pruneScaleValue( d ) );

var aPolyPath = null;
var i, j;
var aTransform;
var aPath;
for ( i = this.unitsPerEdge; i--; )
{
aTransform = SVGIdentityMatrix;

if ((i % 2) == 1) // odd line
aTransform = aTransform.translate( -d, 0.0 );

aTransform = aTransform.multiply( aMatrix );

for ( j = (this.unitsPerEdge / 2) + 1; j--;)
{
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
if (aPolyPath == null) aPolyPath = aPath;
else aPolyPath.appendPath( aPath );
aTransform = SVGIdentityMatrix.translate( d*2.0, 0.0 ).multiply( aTransform );
}

aMatrix = SVGIdentityMatrix.translate( 0.0, d ).multiply( aMatrix ); // next line
}

return aPolyPath;
};


function RandomWipePath( nElements, bRandomBars )
{
this.nElements = nElements;
this.aBasePath = createUnitSquarePath();
this.aPositionArray = new Array( nElements );
this.aClipPath = createEmptyPath();
this.nAlreadyAppendedElements = 0;

var fEdgeLength, nPos, aTransform;

if( bRandomBars ) // random bar wipe
{
fEdgeLength = 1.0 / nElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = { x: 0.0, y: pruneScaleValue( nPos * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scaleNonUniform( 1.0, pruneScaleValue( fEdgeLength ) );
}
else // dissolve wipe
{
var nSqrtElements = Math.round( Math.sqrt( nElements ) );
fEdgeLength = 1.0 / nSqrtElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = {
x: pruneScaleValue( ( nPos % nSqrtElements ) * fEdgeLength ),
y: pruneScaleValue( ( nPos / nSqrtElements ) * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scale( pruneScaleValue( fEdgeLength ) );
}
this.aBasePath.matrixTransform( aTransform );

var nPos1, nPos2;
var tmp;
for( nPos1 = nElements - 1; nPos1 > 0; --nPos1 )
{
nPos2 = getRandomInt( nPos1 + 1 );
tmp = this.aPositionArray[nPos1];
this.aPositionArray[nPos1] = this.aPositionArray[nPos2];
this.aPositionArray[nPos2] = tmp;
}
}

RandomWipePath.prototype.perform = function( nT )
{
var aPolyPath = createEmptyPath();
var aPoint;
var aPath;
var aTransform;
var nElements = Math.round( nT * this.nElements );
if( nElements === 0 )
{
return aPolyPath;
}
if( this.nAlreadyAppendedElements >= nElements )
{
this.nAlreadyAppendedElements = 0;
this.aClipPath = createEmptyPath();
}
var nPos;
for( nPos = this.nAlreadyAppendedElements; nPos < nElements; ++nPos )
{
aPoint = this.aPositionArray[nPos];
aPath = this.aBasePath.cloneNode( true );
aTransform = SVGIdentityMatrix.translate( aPoint.x, aPoint.y );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}

this.nAlreadyAppendedElements = nElements;
this.aClipPath.appendPath( aPolyPath );

return this.aClipPath.cloneNode( true );
};

function SnakeWipePath(nElements, bDiagonal, bflipOnYAxis)
{
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.elementEdge  = (1.0 / this.sqrtElements);
this.diagonal     = bDiagonal;
this.flipOnYAxis  = bflipOnYAxis;
this.aBasePath    = createUnitSquarePath();
}

SnakeWipePath.prototype.calcSnake = function(t)
{
var aPolyPath = createEmptyPath();
const area   = (t * this.sqrtElements * this.sqrtElements);
const line_  = Math.floor(area) / this.sqrtElements;
const line   = pruneScaleValue(line_ / this.sqrtElements);
const col    = pruneScaleValue((area - (line_ * this.sqrtElements)) / this.sqrtElements);

if(line != 0) {
let aPath = 'M '+ 0.0 + ' ' + 0.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + 0.0 + ' ';
aPath += 'L 0 0 ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}
if(col != 0) {
var offset = 0.0;
if((line_ & 1) == 1) {
offset = (1.0 - col);
}
let aPath = 'M ' + offset + ' ' + line + ' ';
aPath += 'L '+ offset + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + line + ' ';
aPath += 'L ' + offset + ' ' + line + ' ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}

return aPolyPath;
}

SnakeWipePath.prototype.calcHalfDiagonalSnake = function(nT, bIn) {
var res = createEmptyPath();

if(bIn) {
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(sqrtArea2 / this.sqrtElements);

var aPath, aPoint = document.documentElement.createSVGPoint();
if(edge) {
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = (nT * Math.SQRT1_2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.rotate((Math.PI)/2 + (Math.PI)/4);
aTransform.translate(edge + this.elementEdge, 0.0);
}
else {
aTransform = SVGIdentityMatrix.translate(-a, 0.0);
aTransform.rotate(-(Math.PI/4));
aTransform.translate(0.0, edge);
}

poly.matrixTransform(aTransform);
res.appendPath(poly);
}
else { //out
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(Math.floor(sqrtArea2)/this.sqrtElements);

let aPath, aPoint = document.documentElement.createSVGPoint();
if(edge != 0) {
aPoint.y = 1.0;
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 1.0;
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = ((1.0 - nT) * Math.SQRT2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.translate(0.0, -height);
aTransform.rotate(Math.PI/2 + Math.PI/4);
aTransform.translate(1.0, edge);
}
else {
aTransform = SVGIdentityMatrix.rotate(-(Math.PI/4));
aTransform = aTransform.translate(edge, 1.0);
}
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
return res;
}

SnakeWipePath.prototype.perform = function(nT) {
var res = createEmptyPath();
if(this.diagonal) {
if(nT >= 0.5) {
res.appendPath(this.calcHalfDiagonalSnake(1.0, true));
res.appendPath(this.calcHalfDiagonalSnake(2.0*(nT-0.5), false));
}
else
res.appendPath(this.calcHalfDiagonalSnake(2.0*nT, true));
}
else
res = this.calcSnake(nT);

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function ParallelSnakesWipePath(nElements, bDiagonal, bFlipOnYAxis, bOpposite) {
SnakeWipePath.call(this, nElements, bDiagonal, bFlipOnYAxis);
this.bOpposite = bOpposite;
}

ParallelSnakesWipePath.prototype = Object.create(SnakeWipePath);

ParallelSnakesWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath(), half, aTransform;
if(this.diagonal) {
assert(this.bOpposite);
half = SnakeWipePath.prototype.calcHalfDiagonalSnake.call(this, nT, false);
aTransform = SVGIdentityMatrix.scale(1, -1);
aTransform.translate(-0.5, 0.5);
aTransform.rotate(Math.PI/2);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
half.changeOrientation();
res.appendPath(half);

aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(half);
}
else {
half = SnakeWipePath.prototype.calcSnake.call(this, nT / 2.0 );
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI/2);
aTransform = aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(flipOnYAxis(half));
res.appendPath(this.bOpposite ? flipOnXAxis(half) : half);
}

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function SpiralWipePath(nElements, bFlipOnYAxis) {
this.nElements    = nElements;
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.bFlipOnYAxis = bFlipOnYAxis;
}

SpiralWipePath.prototype.calcNegSpiral = function( nT ) {
var area  = nT * this.nElements;
var e     = (Math.sqrt(area) / 2.0);
var edge  = Math.floor(e) * 2;

var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
var edge_ = pruneScaleValue(edge / this.sqrtElements);

aTransform = aTransform.scale(edge_, edge_);
aTransform = aTransform.translate(0.5, 0.5);
var poly = createUnitSquarePath();
poly.matrixTransform(aTransform);
var res = poly.cloneNode(true);

if(1.0 - nT != 0) {
var edge1 = edge + 1;
var len   = Math.floor( (e - edge/2) * edge1 * 4);
var w     = Math.PI / 2;

while(len > 0) {
var alen = Math.min(len, edge1);
len -= alen;
poly = createUnitSquarePath();
aTransform = SVGIdentityMatrix.scale(
pruneScaleValue( alen / this.sqrtElements ),
pruneScaleValue( 1.0 / this.sqrtElements ));
aTransform = aTransform.translate(
- pruneScaleValue( (edge / 2) / this.sqrtElements ),
pruneScaleValue( (edge / 2) / this.sqrtElements ));
aTransform = aTransform.rotate( w );
w -= Math.PI / 2;
aTransform = aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
}

return res;
}

SpiralWipePath.prototype.perform = function( nT ) {
var res         = createUnitSquarePath();
var innerSpiral = this.calcNegSpiral( 1.0 - nT );
innerSpiral.changeOrientation();
res.appendPath(innerSpiral);

return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function BoxSnakesWipePath(nElements, bFourBox) {
SpiralWipePath.call(this, nElements);
this.bFourBox = bFourBox;
}

BoxSnakesWipePath.prototype = Object.create(SpiralWipePath);

BoxSnakesWipePath.prototype.perform = function( nT ) {
var res = createUnitSquarePath(), aTransform;
var innerSpiral = SpiralWipePath.prototype.calcNegSpiral.call(this, 1.0 - nT);
innerSpiral.changeOrientation();

if(this.bFourBox) {
aTransform = SVGIdentityMatrix.scale(0.5, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
innerSpiral = flipOnYAxis(innerSpiral);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
else {
aTransform = SVGIdentityMatrix.scale(1.0, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function VeeWipePath() { }

VeeWipePath.prototype.perform = function( nT ) {
const d = pruneScaleValue(2.0 * nT);
var polyPath = 'M ' + 0.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 0.5 + ' ' + d + ' ';
polyPath += 'L ' + 1.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';

var aPolyPolyPath = document.createElementNS( NSS['svg'], 'path');
aPolyPolyPath.setAttribute('d', polyPath);
return aPolyPolyPath;
}


function AnimatedSlide( aMetaSlide )
{
if( !aMetaSlide )
{
log( 'AnimatedSlide constructor: meta slide is not valid' );
}

this.aMetaSlide = aMetaSlide;
this.aSlideElement = this.aMetaSlide.slideElement;
this.sSlideId = this.aMetaSlide.slideId;

this.aUsedAttributeSet = [];

this.aClipPathElement = null;
this.aClipPathContent = null;
this.bIsClipped = false;
}

AnimatedSlide.prototype.show = function()
{
this.aMetaSlide.show();
};

AnimatedSlide.prototype.hide = function()
{
this.aMetaSlide.hide();
};

AnimatedSlide.prototype.notifyUsedAttribute = function( sName )
{
if( sName == 'clip-path' )
{
this.initClipPath();
this.bIsClipped = true;
}
else
{
this.aUsedAttributeSet.push( sName );
}
};

AnimatedSlide.prototype.reset = function()
{
if( this.bIsClipped )
{
this.cleanClipPath();
this.bIsClipped = false;
}

var i;
for( i = 0; i < this.aUsedAttributeSet.length; ++i )
{
var sAttrName = this.aUsedAttributeSet[i];
this.aSlideElement.removeAttribute( sAttrName );
}
this.aUsedAttributeSet = [];
};

AnimatedSlide.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sSlideId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
var sPathData = 'M 0 0 h ' + WIDTH + ' v ' + HEIGHT + ' h -' + WIDTH + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aSlideElement.parentNode.setAttribute( 'clip-path', sRef );
};

AnimatedSlide.prototype.cleanClipPath = function()
{
this.aSlideElement.parentNode.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedSlide.prototype.insertBefore = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.insertBefore( aElement, this.aSlideElement );
}
};

AnimatedSlide.prototype.appendElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.appendChild( aElement );
}
};

AnimatedSlide.prototype.removeElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.removeChild( aElement );
}
};

AnimatedSlide.prototype.getWidth = function()
{
return WIDTH;
};

AnimatedSlide.prototype.getHeight = function()
{
return HEIGHT;
};

AnimatedSlide.prototype.setOpacity = function( nValue )
{
this.aSlideElement.setAttribute( 'opacity', nValue );
};

AnimatedSlide.prototype.translate = function( nDx, nDy )
{
var sTransformAttr = 'translate(' + nDx + ',' + nDy + ')';
this.aSlideElement.setAttribute( 'transform', sTransformAttr );
};

AnimatedSlide.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


function AnimatedElement( aElement )
{
if( !aElement )
{
log( 'AnimatedElement constructor: element is not valid' );
}

this.aSlideShowContext = null;

this.aBaseElement = aElement.cloneNode( true );
this.aActiveElement = aElement;
this.sElementId = this.aActiveElement.getAttribute( 'id' );

this.aBaseBBox = this.aActiveElement.getBBox();
this.nBaseCenterX = this.aBaseBBox.x + this.aBaseBBox.width / 2;
this.nBaseCenterY = this.aBaseBBox.y + this.aBaseBBox.height / 2;


this.aClipPathElement = null;
this.aClipPathContent = null;

this.aPreviousElement = null;
this.aStateSet = {};

this.eAdditiveMode = ADDITIVE_MODE_REPLACE;
this.bIsUpdated = true;

this.aTMatrix = document.documentElement.createSVGMatrix();
this.aCTM = document.documentElement.createSVGMatrix();
this.aICTM = document.documentElement.createSVGMatrix();

this.initElement();
}

AnimatedElement.prototype.initElement = function()
{
this.nCenterX = this.nBaseCenterX;
this.nCenterY = this.nBaseCenterY;
this.nScaleFactorX = 1.0;
this.nScaleFactorY = 1.0;
this.nRotationAngle = 0.0;

this.aActiveElement.setAttribute( 'transform', makeMatrixString( 1, 0, 0, 1, 0, 0 ) );
};

AnimatedElement.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sElementId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
this.aClippingBBox = this.getBBoxWithStroke();
var nWidth = this.aClippingBBox.width;
var nHeight = this.aClippingBBox.height;
var sPathData = 'M ' + this.aClippingBBox.x + ' ' + this.aClippingBBox.y +
' h ' + nWidth + ' v ' + nHeight + ' h -' + nWidth + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aActiveElement.setAttribute( 'clip-path', sRef );
};

AnimatedElement.prototype.cleanClipPath = function()
{
this.aActiveElement.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedElement.prototype.getId = function()
{
return this.aActiveElement.getAttribute( 'id' );
};

AnimatedElement.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimatedElement.prototype.setAdditiveMode = function( eAdditiveMode )
{
this.eAdditiveMode = eAdditiveMode;
};

AnimatedElement.prototype.setToElement = function( aElement )
{
if( !aElement )
{
log( 'AnimatedElement(' + this.getId() + ').setToElement: element is not valid' );
return false;
}

var aClone = aElement.cloneNode( true );
this.aPreviousElement = this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

return true;
};

AnimatedElement.prototype.notifySlideStart = function( aSlideShowContext )
{
if( !aSlideShowContext )
{
log( 'AnimatedElement.notifySlideStart: slideshow context is not valid' );
}
this.aSlideShowContext = aSlideShowContext;

var aClone = this.aBaseElement.cloneNode( true );
this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

this.initElement();
this.DBG( '.notifySlideStart invoked' );
};

AnimatedElement.prototype.notifySlideEnd = function()
{
};

AnimatedElement.prototype.notifyAnimationStart = function()
{
};

AnimatedElement.prototype.notifyAnimationEnd = function()
{
};

AnimatedElement.prototype.notifyNextEffectStart = function( /*nEffectIndex*/ )
{
};

AnimatedElement.prototype.saveState = function( nAnimationNodeId )
{
ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').saveState(' + nAnimationNodeId +')' );
if( !this.aStateSet[ nAnimationNodeId ] )
{
this.aStateSet[ nAnimationNodeId ] = {};
}
var aState = this.aStateSet[ nAnimationNodeId ];
aState.aElement = this.aActiveElement.cloneNode( true );
aState.nCenterX = this.nCenterX;
aState.nCenterY = this.nCenterY;
aState.nScaleFactorX = this.nScaleFactorX;
aState.nScaleFactorY = this.nScaleFactorY;
aState.nRotationAngle = this.nRotationAngle;

};

AnimatedElement.prototype.restoreState = function( nAnimationNodeId )
{
if( !this.aStateSet[ nAnimationNodeId ] )
{
log( 'AnimatedElement(' + this.getId() + ').restoreState: state '
+nAnimationNodeId  + ' is not valid' );
return false;
}

ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').restoreState(' + nAnimationNodeId +')' );
var aState = this.aStateSet[ nAnimationNodeId ];
var bRet = this.setToElement( aState.aElement );
if( bRet )
{
this.nCenterX = aState.nCenterX;
this.nCenterY = aState.nCenterY;
this.nScaleFactorX = aState.nScaleFactorX;
this.nScaleFactorY = aState.nScaleFactorY;
this.nRotationAngle = aState.nRotationAngle;
}
return bRet;
};

AnimatedElement.prototype.getBaseBBox = function()
{
return this.aBaseBBox;
};

AnimatedElement.prototype.getBaseCenterX = function()
{
return this.nBaseCenterX;
};

AnimatedElement.prototype.getBaseCenterY = function()
{
return this.nBaseCenterY;
};

AnimatedElement.prototype.getBBox = function()
{
return this.aActiveElement.parentNode.getBBox();
};

AnimatedElement.prototype.getBBoxWithStroke = function()
{
var aBBox = this.aActiveElement.parentNode.getBBox();

var aChildrenSet = this.aActiveElement.childNodes;

var sStroke, sStrokeWidth;
var nStrokeWidth = 0;
var i;
for( i = 0; i < aChildrenSet.length; ++i )
{
if( ! aChildrenSet[i].getAttribute  )
continue;

sStroke = aChildrenSet[i].getAttribute( 'stroke' );
if( sStroke && sStroke != 'none' )
{
sStrokeWidth = aChildrenSet[i].getAttribute( 'stroke-width' );
var nSW = parseFloat( sStrokeWidth );
if( nSW > nStrokeWidth )
nStrokeWidth = nSW;
}
}

if( nStrokeWidth == 0 )
{
sStrokeWidth = ROOT_NODE.getAttribute( 'stroke-width' );
nStrokeWidth = parseFloat( sStrokeWidth );
}
if( nStrokeWidth != 0 )
{
nStrokeWidth *= 1.1;
var nHalfStrokeWidth = nStrokeWidth / 2;
var nDoubleStrokeWidth = nStrokeWidth * 2;

var aEBBox = document.documentElement.createSVGRect();
aEBBox.x = aBBox.x - nHalfStrokeWidth;
aEBBox.y = aBBox.y - nHalfStrokeWidth;
aEBBox.width = aBBox.width + nDoubleStrokeWidth;
aEBBox.height = aBBox.height + nDoubleStrokeWidth;
aBBox = aEBBox;
}
return aBBox;
};

AnimatedElement.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var aTranslation = SVGIdentityMatrix.translate( this.aClippingBBox.x,
this.aClippingBBox.y);
aClipPathContent.matrixTransform( aTranslation );
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


AnimatedElement.prototype.getX = function()
{
return this.nCenterX;
};

AnimatedElement.prototype.getY = function()
{
return this.nCenterY;
};

AnimatedElement.prototype.getWidth = function()
{
return this.nScaleFactorX * this.getBaseBBox().width;
};

AnimatedElement.prototype.getHeight = function()
{
return this.nScaleFactorY * this.getBaseBBox().height;
};

AnimatedElement.prototype.updateTransformAttribute = function()
{
this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
};

AnimatedElement.prototype.setX = function( nNewCenterX )
{
if( nNewCenterX === this.nCenterX ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( nNewCenterX - this.nCenterX, 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterX = nNewCenterX;
};

AnimatedElement.prototype.setY = function( nNewCenterY )
{
if( nNewCenterY === this.nCenterY ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( 0, nNewCenterY - this.nCenterY );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterY = nNewCenterY;
};

AnimatedElement.prototype.setWidth = function( nNewWidth )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewWidth = ' + nNewWidth );
if( nNewWidth < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewWidth = 0;
}

var nBaseWidth = this.getBaseBBox().width;
var nScaleFactorX = nNewWidth / nBaseWidth;

if( nScaleFactorX < 1e-5 ) nScaleFactorX = 1e-5;
if( nScaleFactorX == this.nScaleFactorX ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorX = nScaleFactorX;
};

AnimatedElement.prototype.setHeight = function( nNewHeight )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewHeight = ' + nNewHeight );
if( nNewHeight < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewHeight = 0;
}

var nBaseHeight = this.getBaseBBox().height;
var nScaleFactorY = nNewHeight / nBaseHeight;

if( nScaleFactorY < 1e-5 ) nScaleFactorY = 1e-5;
if( nScaleFactorY == this.nScaleFactorY ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( this.nScaleFactorX, nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorY = nScaleFactorY;
};

AnimatedElement.prototype.getOpacity = function()
{
return this.aActiveElement.getAttribute( 'opacity' );
};

AnimatedElement.prototype.setOpacity = function( nValue )
{
this.aActiveElement.setAttribute( 'opacity', nValue );
};

AnimatedElement.prototype.getRotationAngle = function()
{
return this.nRotationAngle;
};

AnimatedElement.prototype.setRotationAngle = function( nNewRotAngle )
{
this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(nNewRotAngle)
.scaleNonUniform( this.nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nRotationAngle = nNewRotAngle;
};

AnimatedElement.prototype.getVisibility = function()
{

var sVisibilityValue = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityValue || ( sVisibilityValue === 'inherit' ) )
return 'visible'; // TODO: look for parent visibility!
else
return sVisibilityValue;
};

AnimatedElement.prototype.setVisibility = function( sValue )
{
if( sValue == 'visible' )
sValue = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sValue );
};

AnimatedElement.prototype.getStrokeStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setStrokeStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setStrokeStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setFillStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFillStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
break;
}

return colorParser( sFillColorValue );
};

AnimatedElement.prototype.setFillColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'fill', sValue );
}
}
};

AnimatedElement.prototype.getStrokeColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
break;
}

return colorParser( sStrokeColorValue );
};

AnimatedElement.prototype.setStrokeColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'stroke', sValue );
}
}
};

AnimatedElement.prototype.getFontColor = function()
{
return new RGBColor( 0, 0, 0 );
};

AnimatedElement.prototype.setFontColor = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFontColor(' + sValue + ')' );
};

AnimatedElement.prototype.DBG = function( sMessage, nTime )
{
aAnimatedElementDebugPrinter.print( 'AnimatedElement(' + this.getId() + ')' + sMessage, nTime );
};


function AnimatedTextElement( aElement, aEventMultiplexer )
{
var theDocument = document;

var sTextType = aElement.getAttribute( 'class' );
var bIsListItem = ( sTextType === 'ListItem' );
if( ( sTextType !== 'TextParagraph' ) && !bIsListItem )
{
log( 'AnimatedTextElement: passed element is not a paragraph.' );
return;
}
var aTextShapeElement = aElement.parentNode;
sTextType = aTextShapeElement.getAttribute( 'class' );
if( sTextType !== 'TextShape' )
{
log( 'AnimatedTextElement: element parent is not a text shape.' );
return;
}
var aTextShapeGroup = aTextShapeElement.parentNode;
var aAnimatedElementGroup = getElementByClassName( aTextShapeGroup, 'AnimatedElements' );
if( !aAnimatedElementGroup )
{
aAnimatedElementGroup = theDocument.createElementNS( NSS['svg'], 'g' );
aAnimatedElementGroup.setAttribute( 'class', 'AnimatedElements' );
aTextShapeGroup.appendChild( aAnimatedElementGroup );
}

var aAnimatableElement = theDocument.createElementNS( NSS['svg'], 'g' );
var aTextElement = theDocument.createElementNS( NSS['svg'], 'text' );
var aParagraphElement = aElement.cloneNode( true );

this.aGraphicGroupElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aGraphicGroupElement.setAttribute( 'class', 'GraphicGroup' );

var aBulletCharClone = null;
var aBulletCharElem = null;
var bIsBulletCharStyle =
( aElement.getAttributeNS( NSS['ooo'], aOOOAttrListItemNumberingType ) === 'bullet-style' );
if( bIsBulletCharStyle )
{
var aBulletCharGroupElem = getElementByClassName( aTextShapeGroup, 'BulletChars' );
if( aBulletCharGroupElem )
{
var aBulletPlaceholderElem = getElementByClassName( aElement, 'BulletPlaceholder' );
if( aBulletPlaceholderElem )
{
var sId = aBulletPlaceholderElem.getAttribute( 'id' );
sId = 'bullet-char(' + sId + ')';
aBulletCharElem = theDocument.getElementById( sId );
if( aBulletCharElem )
{
aBulletCharClone = aBulletCharElem.cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
else
{
log( 'AnimatedTextElement: no bullet placeholder found' );
}
}
else
{
log( 'AnimatedTextElement: no bullet char group found' );
}
}

var aBitmapElemSet = [];
var aBitmapCloneSet = [];
var aBitmapPlaceholderSet = getElementsByClassName( aElement, 'BitmapPlaceholder' );
var i;
if( aBitmapPlaceholderSet )
{
for( i = 0; i < aBitmapPlaceholderSet.length; ++i )
{
sId = aBitmapPlaceholderSet[i].getAttribute( 'id' );
var sBitmapChecksum = sId.substring( 'bitmap-placeholder'.length + 1, sId.length - 1 );
sId = 'embedded-bitmap(' + sBitmapChecksum + ')';
aBitmapElemSet[i] = theDocument.getElementById( sId );
if( aBitmapElemSet[i] )
{
aBitmapCloneSet[i] = aBitmapElemSet[i].cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
}


this.sParagraphId = sId = aParagraphElement.getAttribute( 'id' );
aParagraphElement.removeAttribute( 'id' );
aAnimatableElement.setAttribute( 'id', sId +'.a' );
if( aBulletCharClone )
aBulletCharClone.removeAttribute( 'id' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
aBitmapCloneSet[i].removeAttribute( 'id' );
}

var sVisibilityAttr = aElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
aAnimatableElement.setAttribute( 'visibility', sVisibilityAttr );
aParagraphElement.setAttribute( 'visibility', 'inherit' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
if( aBulletCharElem )
aBulletCharElem.setAttribute( 'visibility', 'hidden' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapElemSet[i] )
aBitmapElemSet[i].setAttribute( 'visibility', 'hidden' );
}


aTextElement.appendChild( aParagraphElement );
aAnimatableElement.appendChild( aTextElement );

if( aBulletCharClone )
this.aGraphicGroupElement.appendChild( aBulletCharClone );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
this.aGraphicGroupElement.appendChild( aBitmapCloneSet[i] );
}
aAnimatableElement.appendChild( this.aGraphicGroupElement );
aAnimatedElementGroup.appendChild( aAnimatableElement );

this.aParentTextElement = aElement.parentNode;
this.aParagraphElement = aElement;
this.aAnimatedElementGroup = aAnimatedElementGroup;
this.nRunningAnimations = 0;

this.aHyperlinkIdSet = [];
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var sHyperlinkId;
for( i = 0; i < aHyperlinkElementSet.length; ++i )
{
sHyperlinkId = aHyperlinkElementSet[i].getAttribute( 'id' );
if( sHyperlinkId )
this.aHyperlinkIdSet.push( sHyperlinkId );
else
log( 'error: AnimatedTextElement constructor: hyperlink element has no id' );
}

AnimatedTextElement.superclass.constructor.call( this, aAnimatableElement, aEventMultiplexer );

}
extend( AnimatedTextElement, AnimatedElement );


AnimatedTextElement.prototype.setToElement = function( aElement )
{
var bRet = AnimatedTextElement.superclass.setToElement.call( this, aElement );
if( bRet )
{
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
}
return ( bRet && this.aGraphicGroupElement );
};

AnimatedTextElement.prototype.notifySlideStart = function( aSlideShowContext )
{
DBGLOG( 'AnimatedTextElement.notifySlideStart' );
AnimatedTextElement.superclass.notifySlideStart.call( this, aSlideShowContext );
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
this.restoreBaseTextParagraph();
};

AnimatedTextElement.prototype.notifySlideEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifySlideEnd' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
};

AnimatedTextElement.prototype.restoreBaseTextParagraph = function()
{
var aActiveParagraphElement = this.aActiveElement.firstElementChild.firstElementChild;
if( aActiveParagraphElement )
{
var sVisibilityAttr = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityAttr || ( sVisibilityAttr === 'visible' ) )
sVisibilityAttr = 'inherit';
if( sVisibilityAttr === 'inherit' )
this.aGraphicGroupElement.setAttribute( 'visibility', 'visible' );
else
this.aGraphicGroupElement.setAttribute( 'visibility', 'hidden' );

var aParagraphClone = aActiveParagraphElement.cloneNode( true );
aParagraphClone.setAttribute( 'id', this.sParagraphId );
aParagraphClone.setAttribute( 'visibility', sVisibilityAttr );
this.aParentTextElement.replaceChild( aParagraphClone, this.aParagraphElement );
this.aParagraphElement = aParagraphClone;


var aEventMultiplexer = this.aSlideShowContext.aEventMultiplexer;
var aHyperlinkIdSet = this.aHyperlinkIdSet;
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var i = 0;
for( ; i < aHyperlinkIdSet.length; ++i )
{
aEventMultiplexer.notifyElementChangedEvent( aHyperlinkIdSet[i], aHyperlinkElementSet[i] );
}
}
this.aActiveElement.setAttribute( 'visibility', 'hidden' );
};

AnimatedTextElement.prototype.notifyAnimationStart = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationStart' );
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
this.aParagraphElement.setAttribute( 'visibility', 'hidden' );
}
++this.nRunningAnimations;
};

AnimatedTextElement.prototype.notifyAnimationEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationEnd' );
--this.nRunningAnimations;
if( this.nRunningAnimations === 0 )
{
this.restoreBaseTextParagraph();
}
};

AnimatedTextElement.prototype.saveState = function( nAnimationNodeId )
{
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
}
AnimatedTextElement.superclass.saveState.call( this, nAnimationNodeId );
};

AnimatedTextElement.prototype.restoreState = function( nAnimationNodeId )
{
var bRet = AnimatedTextElement.superclass.restoreState.call( this, nAnimationNodeId );
if( bRet )
this.restoreBaseTextParagraph();
return bRet;
};


function SlideTransition( aAnimationsRootElement, aSlideId )
{
this.sSlideId = aSlideId;
this.bIsValid = false;
this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = false;
this.eTransitionMode = TRANSITION_MODE_IN;
this.sFadeColor = null;
this.aDuration = null;
this.nMinFrameCount = undefined;

if( aAnimationsRootElement )
{
if( aAnimationsRootElement.firstElementChild &&
( aAnimationsRootElement.firstElementChild.getAttributeNS( NSS['smil'], 'begin' ) === (this.sSlideId + '.begin') ) )
{
var aTransitionFilterElement = aAnimationsRootElement.firstElementChild.firstElementChild;
if( aTransitionFilterElement && ( aTransitionFilterElement.localName === 'transitionFilter' ) )
{
this.aElement = aTransitionFilterElement;
this.parseElement();
}
aAnimationsRootElement.removeChild( aAnimationsRootElement.firstElementChild );
}
}
}

SlideTransition.prototype.createSlideTransition = function( aLeavingSlide, aEnteringSlide )
{
if( !this.isValid() )
return null;
if( this.eTransitionType == 0 )
return null;

if( !aEnteringSlide )
{
log( 'SlideTransition.createSlideTransition: invalid entering slide.' );
return null;
}

var aTransitionInfo = aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'SlideTransition.createSlideTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( this.eTransitionType, this.eTransitionSubType );
return new ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, this.isDirectionForward() );

case TRANSITION_SPECIAL:
switch( this.eTransitionType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition class: TRANSITION_SPECIAL, ' +
'unknown transition type: ' + this.eTransitionType );
return null;

case PUSHWIPE_TRANSITION:
{
var aDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: PUSHWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aDirection = { x: -1.0, y: 0.0 };
break;
}
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aDirection, aDirection );
}

case SLIDEWIPE_TRANSITION:
{
var aInDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: SLIDEWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aInDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aInDirection = { x: -1.0, y: 0.0 };
break;
}
var aNoDirection = { x: 0.0, y: 0.0 };
if( !this.bReverseDirection )
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aNoDirection, aInDirection );
}
else
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aInDirection, aNoDirection );
}
}

case FADE_TRANSITION:
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: FADE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case CROSSFADE_TRANS_SUBTYPE:
return new FadingSlideChange( aLeavingSlide, aEnteringSlide );
case FADEOVERCOLOR_TRANS_SUBTYPE:
return new FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, this.getFadeColor() );
}
}
}
};

SlideTransition.prototype.parseElement = function()
{
this.bIsValid = true;
var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( this.bIsValid && aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType] === undefined )
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition not valid: type: ' + sTypeAttr + ' subtype: ' + sSubTypeAttr );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.sFadeColor = null;
if( this.eTransitionType == FADE_TRANSITION &&
( this.eTransitionSubType == FADEFROMCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADEOVERCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADETOCOLOR_TRANS_SUBTYPE ) )
{
var sColorAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fadeColor' );
if( sColorAttr )
this.sFadeColor = sColorAttr;
else
this.sFadeColor='#000000';
}


this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
this.aDuration = new Duration( null ); // duration == 0.0
}

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;

};

SlideTransition.prototype.isValid = function()
{
return this.bIsValid;
};

SlideTransition.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

SlideTransition.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

SlideTransition.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

SlideTransition.prototype.getFadeColor = function()
{
return this.sFadeColor;
};

SlideTransition.prototype.isDirectionForward = function()
{
return !this.bReverseDirection;
};

SlideTransition.prototype.getDuration = function()
{
return this.aDuration;
};

SlideTransition.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

SlideTransition.prototype.info = function()
{

var sInfo ='slide transition <' + this.sSlideId + '>: ';
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( !this.isDirectionForward() )
sInfo += ';  direction: reverse';

sInfo += '; mode: ' + aTransitionModeOutMap[ this.getTransitionMode() ];

if( this.getDuration() )
sInfo += '; duration: ' + this.getDuration().info();

return sInfo;
};


function SlideAnimations( aSlideShowContext )
{
this.aContext = new NodeContext( aSlideShowContext );
this.aAnimationNodeMap = {};
this.aAnimatedElementMap = {};
this.aSourceEventElementMap = {};
this.aNextEffectEventArray = new NextEffectEventArray();
this.aInteractiveAnimationSequenceMap = {};
this.aEventMultiplexer = new EventMultiplexer( aSlideShowContext.aTimerEventQueue );
this.aRootNode = null;
this.bElementsParsed = false;

this.aContext.aAnimationNodeMap = this.aAnimationNodeMap;
this.aContext.aAnimatedElementMap = this.aAnimatedElementMap;
this.aContext.aSourceEventElementMap = this.aSourceEventElementMap;

this.aEventMultiplexer.registerMouseClickHandler( document, 100 );
}


SlideAnimations.prototype.importAnimations = function( aAnimationRootElement )
{
if( !aAnimationRootElement )
return false;

this.aRootNode = createAnimationTree( aAnimationRootElement, this.aContext );

return ( this.aRootNode ? true : false );
};

SlideAnimations.prototype.parseElements = function()
{
if( !this.aRootNode )
return false;

if( !this.aRootNode.parseElement() )
return false;
else
this.bElementsParsed = true;
};

SlideAnimations.prototype.elementsParsed = function()
{
return this.bElementsParsed;
};

SlideAnimations.prototype.isFirstRun = function()
{
return this.aContext.bFirstRun;
};

SlideAnimations.prototype.isAnimated = function()
{
if( !this.bElementsParsed )
return false;

return this.aRootNode.hasPendingAnimation();
};

SlideAnimations.prototype.start = function()
{
if( !this.bElementsParsed )
return false;

this.chargeSourceEvents();
this.chargeInterAnimEvents();

aSlideShow.setSlideEvents( this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aEventMultiplexer );

if( this.aContext.bFirstRun == undefined )
this.aContext.bFirstRun = true;
else if( this.aContext.bFirstRun )
this.aContext.bFirstRun = false;

if( !this.aRootNode.init() )
return false;

return this.aRootNode.resolve();
};

SlideAnimations.prototype.end = function( bLeftEffectsSkipped )
{
if( !this.bElementsParsed )
return; // no animations there

this.aRootNode.deactivate();
this.aRootNode.end();

if( bLeftEffectsSkipped && this.isFirstRun() )
{
this.aContext.bFirstRun = undefined;
}
else if( this.isFirstRun() )
{
this.aContext.bFirstRun = false;
}

};

SlideAnimations.prototype.dispose = function()
{
if( this.aRootNode )
{
this.aRootNode.dispose();
}
};

SlideAnimations.prototype.clearNextEffectEvents = function()
{
ANIMDBG.print( 'SlideAnimations.clearNextEffectEvents: current slide: ' + nCurSlide );
this.aNextEffectEventArray.clear();
this.aContext.bFirstRun = undefined;
};

SlideAnimations.prototype.chargeSourceEvents = function()
{
for( var id in this.aSourceEventElementMap )
{
this.aSourceEventElementMap[id].charge();
}
};

SlideAnimations.prototype.chargeInterAnimEvents = function()
{
for( var id in this.aInteractiveAnimationSequenceMap )
{
this.aInteractiveAnimationSequenceMap[id].chargeEvents();
}
};


function Event()
{
this.nId = Event.getUniqueId();
}


Event.CURR_UNIQUE_ID = 0;

Event.getUniqueId = function()
{
++Event.CURR_UNIQUE_ID;
return Event.CURR_UNIQUE_ID;
};

Event.prototype.getId = function()
{
return this.nId;
};


function DelayEvent( aFunctor, nTimeout )
{
DelayEvent.superclass.constructor.call( this );

this.aFunctor = aFunctor;
this.nTimeout = nTimeout;
this.bWasFired = false;
}
extend( DelayEvent, Event );


DelayEvent.prototype.fire = function()
{
assert( this.isCharged(), 'DelayEvent.fire: assertion isCharged failed' );

this.bWasFired = true;
this.aFunctor();
return true;
};

DelayEvent.prototype.isCharged = function()
{
return !this.bWasFired;
};

DelayEvent.prototype.getActivationTime = function( nCurrentTime )
{
return ( this.nTimeout + nCurrentTime );
};

DelayEvent.prototype.dispose = function()
{
if( this.isCharged() )
this.bWasFired = true;
};

DelayEvent.prototype.charge = function()
{
if( !this.isCharged() )
this.bWasFired = false;
};


function WakeupEvent( aTimer, aActivityQueue )
{
WakeupEvent.superclass.constructor.call( this );

this.aTimer = new ElapsedTime( aTimer );
this.nNextTime = 0.0;
this.aActivity = null;
this.aActivityQueue = aActivityQueue;
}
extend( WakeupEvent, Event );


WakeupEvent.prototype.clone = function()
{
var aWakeupEvent = new WakeupEvent( this.aTimer.getTimeBase(), this.aActivityQueue );
aWakeupEvent.nNextTime = this.nNextTime;
aWakeupEvent.aActivity = this.aActivity;
return aWakeupEvent;
};

WakeupEvent.prototype.dispose = function()
{
this.aActivity = null;
};

WakeupEvent.prototype.fire = function()
{
if( !this.aActivity )
return false;

return this.aActivityQueue.addActivity( this.aActivity );
};

WakeupEvent.prototype.isCharged = function()
{
return true;
};

WakeupEvent.prototype.getActivationTime = function( nCurrentTime )
{
var nElapsedTime = this.aTimer.getElapsedTime();

return Math.max( nCurrentTime, nCurrentTime - nElapsedTime + this.nNextTime );
};

WakeupEvent.prototype.start = function()
{
this.aTimer.reset();
};

WakeupEvent.prototype.setNextTimeout = function( nNextTime )
{
this.nNextTime = nNextTime;
};

WakeupEvent.prototype.setActivity = function( aActivity )
{
this.aActivity = aActivity;
};


function makeEvent( aFunctor )
{
return new DelayEvent( aFunctor, 0.0 );
}


function makeDelay( aFunctor, nTimeout )
{
return new DelayEvent( aFunctor, nTimeout );
}


function registerEvent( nNodeId, aTiming, aEvent, aNodeContext )
{
var aSlideShowContext = aNodeContext.aContext;
var eTimingType = aTiming.getType();

registerEvent.DBG( aTiming );

if( eTimingType == OFFSET_TIMING )
{
aSlideShowContext.aTimerEventQueue.addEvent( aEvent );
}
else if ( aNodeContext.bFirstRun )
{
var aEventMultiplexer = aSlideShowContext.aEventMultiplexer;
if( !aEventMultiplexer )
{
log( 'registerEvent: event multiplexer not initialized' );
return;
}
var aNextEffectEventArray = aSlideShowContext.aNextEffectEventArray;
if( !aNextEffectEventArray )
{
log( 'registerEvent: next effect event array not initialized' );
return;
}
var aInteractiveAnimationSequenceMap =
aSlideShowContext.aInteractiveAnimationSequenceMap;
if( !aInteractiveAnimationSequenceMap )
{
log( 'registerEvent: interactive animation sequence map not initialized' );
return;
}

switch( eTimingType )
{
case EVENT_TIMING:
var eEventType = aTiming.getEventType();
var sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aEventBaseElem = document.getElementById( sEventBaseElemId );
if( !aEventBaseElem )
{
log( 'generateEvent: EVENT_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
var aSourceEventElement = aNodeContext.makeSourceEventElement( sEventBaseElemId, aEventBaseElem );

if( !aInteractiveAnimationSequenceMap[ nNodeId ] )
{
aInteractiveAnimationSequenceMap[ nNodeId ] = new InteractiveAnimationSequence(nNodeId);
}

var bEventRegistered = false;
switch( eEventType )
{
case EVENT_TRIGGER_ON_CLICK:
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aEvent );
aEventMultiplexer.registerRewindedEffectHandler( aSourceEventElement.getId(),
bind2( aSourceEventElement.charge, aSourceEventElement ) );
bEventRegistered = true;
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
if( bEventRegistered )
{
var aStartEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getStartEvent();
var aEndEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getEndEvent();
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aStartEvent );
aEventMultiplexer.registerEvent( EVENT_TRIGGER_END_EVENT, nNodeId, aEndEvent );
aEventMultiplexer.registerRewindedEffectHandler(
nNodeId,
bind2( InteractiveAnimationSequence.prototype.chargeEvents,
aInteractiveAnimationSequenceMap[ nNodeId ] )
);
}
}
else  // no base event element present
{
switch( eEventType )
{
case EVENT_TRIGGER_ON_NEXT_EFFECT:
aNextEffectEventArray.appendEvent( aEvent );
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
}
break;
case SYNCBASE_TIMING:
eEventType = aTiming.getEventType();
sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aAnimationNode = aNodeContext.aAnimationNodeMap[ sEventBaseElemId ];
if( !aAnimationNode )
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
aEventMultiplexer.registerEvent( eEventType, aAnimationNode.getId(), aEvent );
}
else
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not specified' );
}
break;
default:
log( 'generateEvent: not handled timing type: ' + eTimingType );
}
}
}

registerEvent.DEBUG = aRegisterEventDebugPrinter.isEnabled();

registerEvent.DBG = function( aTiming, nTime )
{
if( registerEvent.DEBUG )
{
aRegisterEventDebugPrinter.print( 'registerEvent( timing: ' + aTiming.info() + ' )', nTime );
}
};


function SourceEventElement( sId, aElement, aEventMultiplexer )
{
this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;

this.aEventMultiplexer.registerMouseClickHandler( this, 1000 );

this.bClickHandled = false;
this.bIsPointerOver = false;
this.aElement.addEventListener( 'mouseover', bind2( SourceEventElement.prototype.onMouseEnter, this), false );
this.aElement.addEventListener( 'mouseout', bind2( SourceEventElement.prototype.onMouseLeave, this), false );
}

SourceEventElement.prototype.getId = function()
{
return this.sId;
};

SourceEventElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

SourceEventElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

SourceEventElement.prototype.charge = function()
{
this.bClickHandled = false;
this.setPointerCursor();
};

SourceEventElement.prototype.handleClick = function( /*aMouseEvent*/ )
{
if( !this.bIsPointerOver ) return false;

if( this.bClickHandled )
return false;

this.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_ON_CLICK, this.getId() );
aSlideShow.update();
this.bClickHandled = true;
this.setDefaultCursor();
return true;
};

SourceEventElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

SourceEventElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function HyperlinkElement( sId, aEventMultiplexer )
{
var aElement = document.getElementById( sId );
if( !aElement )
{
log( 'error: HyperlinkElement: no element with id: <' + sId + '> found' );
return;
}
if( !aEventMultiplexer )
{
log( 'AnimatedElement constructor: event multiplexer is not valid' );
}

this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;
this.nTargetSlideIndex = undefined;

this.sURL = getNSAttribute( 'xlink', this.aElement, 'href' );
if( this.sURL )
{
if( this.sURL[0] === '#' )
{
if( this.sURL.substr(1, 5) === 'Slide' )
{
var sSlideIndex = this.sURL.split( ' ' )[1];
this.nTargetSlideIndex = parseInt( sSlideIndex ) - 1;
}
}

this.aEventMultiplexer.registerElementChangedHandler( this.sId, bind2( HyperlinkElement.prototype.onElementChanged, this) );
this.aEventMultiplexer.registerMouseClickHandler( this, 1100 );

this.bIsPointerOver = false;
this.mouseEnterHandler = bind2( HyperlinkElement.prototype.onMouseEnter, this);
this.mouseLeaveHandler = bind2( HyperlinkElement.prototype.onMouseLeave, this);
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
else
{
log( 'warning: HyperlinkElement(' + this.sId + '): url is empty' );
}
}

HyperlinkElement.prototype.onElementChanged = function( aElement )
{
if( !aElement )
{
log( 'error: HyperlinkElement: passed element is not valid' );
return;
}

if( this.sURL )
{
this.aElement.removeEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.removeEventListener( 'mouseout', this.mouseLeaveHandler, false );
this.aElement = aElement;
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
};

HyperlinkElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

HyperlinkElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

HyperlinkElement.prototype.handleClick = function( )
{
if( !this.bIsPointerOver ) return false;

if( this.nTargetSlideIndex !== undefined )
{
aSlideShow.displaySlide( this.nTargetSlideIndex, true );
}
else
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
aWindowObject.open( this.sURL, this.sId );
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

return true;
};

HyperlinkElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

HyperlinkElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function InteractiveAnimationSequence( nId )
{
this.nId = nId;
this.bIsRunning = false;
this.aStartEvent = null;
this.aEndEvent = null;
}

InteractiveAnimationSequence.prototype.getId = function()
{
return this.nId;
};

InteractiveAnimationSequence.prototype.getStartEvent = function()
{
if( !this.aStartEvent )
{
this.aStartEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.start, this ) );
}
return this.aStartEvent;
};

InteractiveAnimationSequence.prototype.getEndEvent = function()
{
if( !this.aEndEvent )
{
this.aEndEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.end, this ) );
}
return this.aEndEvent;
};

InteractiveAnimationSequence.prototype.chargeEvents = function()
{
if( this.aStartEvent )      this.aStartEvent.charge();
if( this.aEndEvent )        this.aEndEvent.charge();
};

InteractiveAnimationSequence.prototype.isRunning = function()
{
return this.bIsRunning;
};

InteractiveAnimationSequence.prototype.start = function()
{
aSlideShow.notifyInteractiveAnimationSequenceStart( this.getId() );
this.bIsRunning = true;
};

InteractiveAnimationSequence.prototype.end = function()
{
aSlideShow.notifyInteractiveAnimationSequenceEnd( this.getId() );
this.bIsRunning = false;
};


function PriorityEntry( aValue, nPriority )
{
this.aValue = aValue;
this.nPriority = nPriority;
}

PriorityEntry.compare = function( aLhsEntry, aRhsEntry )
{
if ( aLhsEntry.nPriority < aRhsEntry.nPriority )
{
return -1;
}
else if (aLhsEntry.nPriority > aRhsEntry.nPriority)
{
return 1;
}
else
{
return 0;
}
};


function EventMultiplexer( aTimerEventQueue )
{
this.nId = EventMultiplexer.getUniqueId();
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMap = {};
this.aSkipEffectEndHandlerSet = [];
this.aMouseClickHandlerSet = new PriorityQueue( PriorityEntry.compare );
this.aSkipEffectEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
this.aSkipInteractiveEffectEventSet = {};
this.aRewindRunningInteractiveEffectEventSet = {};
this.aRewindEndedInteractiveEffectEventSet = {};
this.aRewindedEffectHandlerSet = {};
this.aElementChangedHandlerSet = {};
}

EventMultiplexer.CURR_UNIQUE_ID = 0;

EventMultiplexer.getUniqueId = function()
{
++EventMultiplexer.CURR_UNIQUE_ID;
return EventMultiplexer.CURR_UNIQUE_ID;
};

EventMultiplexer.prototype.getId = function()
{
return this.nId;
};

EventMultiplexer.prototype.hasRegisteredMouseClickHandlers = function()
{
return !this.aMouseClickHandlerSet.isEmpty();
};

EventMultiplexer.prototype.registerMouseClickHandler = function( aHandler, nPriority )
{
var aHandlerEntry = new PriorityEntry( aHandler, nPriority );
this.aMouseClickHandlerSet.push( aHandlerEntry );
};

EventMultiplexer.prototype.notifyMouseClick = function( aMouseEvent )
{
var aMouseClickHandlerSet = this.aMouseClickHandlerSet.clone();
while( !aMouseClickHandlerSet.isEmpty() )
{
var aHandlerEntry = aMouseClickHandlerSet.top();
aMouseClickHandlerSet.pop();
if( aHandlerEntry.aValue.handleClick( aMouseEvent ) )
break;
}
};

EventMultiplexer.prototype.registerEvent = function( eEventType, aNotifierId, aEvent )
{
this.DBG( 'registerEvent', eEventType, aNotifierId );
if( !this.aEventMap[ eEventType ] )
{
this.aEventMap[ eEventType ] = {};
}
if( !this.aEventMap[ eEventType ][ aNotifierId ] )
{
this.aEventMap[ eEventType ][ aNotifierId ] = [];
}
this.aEventMap[ eEventType ][ aNotifierId ].push( aEvent );
};


EventMultiplexer.prototype.notifyEvent = function( eEventType, aNotifierId )
{
this.DBG( 'notifyEvent', eEventType, aNotifierId );
if( this.aEventMap[ eEventType ] )
{
if( this.aEventMap[ eEventType ][ aNotifierId ] )
{
var aEventArray = this.aEventMap[ eEventType ][ aNotifierId ];
var nSize = aEventArray.length;
for( var i = 0; i < nSize; ++i )
{
this.aTimerEventQueue.addEvent( aEventArray[i] );
}
}
}
};

EventMultiplexer.prototype.registerNextEffectEndHandler = function( aHandler )
{
this.aSkipEffectEndHandlerSet.push( aHandler );
};

EventMultiplexer.prototype.notifyNextEffectEndEvent = function()
{
var nSize = this.aSkipEffectEndHandlerSet.length;
for( var i = 0; i < nSize; ++i )
{
(this.aSkipEffectEndHandlerSet[i])();
}
this.aSkipEffectEndHandlerSet = [];
};

EventMultiplexer.prototype.registerSkipEffectEvent = function( aEvent )
{
this.aSkipEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifySkipEffectEvent = function()
{
if( this.aSkipEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aSkipEffectEvent );
this.aSkipEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindCurrentEffectEvent = function( aEvent )
{
this.aRewindCurrentEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindCurrentEffectEvent = function()
{
if( this.aRewindCurrentEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindCurrentEffectEvent );
this.aRewindCurrentEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindLastEffectEvent = function( aEvent )
{
this.aRewindLastEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindLastEffectEvent = function()
{
if( this.aRewindLastEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindLastEffectEvent );
this.aRewindLastEffectEvent = null;
}
};

EventMultiplexer.prototype.registerSkipInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aSkipInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifySkipInteractiveEffectEvent = function( nNotifierId )
{
if( this.aSkipInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aSkipInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindRunningInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindRunningInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindEndedInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindEndedInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindedEffectHandler = function( aNotifierId, aHandler )
{
this.aRewindedEffectHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyRewindedEffectEvent = function( aNotifierId )
{
if( this.aRewindedEffectHandlerSet[ aNotifierId ] )
{
(this.aRewindedEffectHandlerSet[ aNotifierId ])();
}
};

EventMultiplexer.prototype.registerElementChangedHandler = function( aNotifierId, aHandler )
{
this.aElementChangedHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyElementChangedEvent = function( aNotifierId, aElement )
{
if( this.aElementChangedHandlerSet[ aNotifierId ] )
{
(this.aElementChangedHandlerSet[ aNotifierId ])( aElement );
}
};

EventMultiplexer.DEBUG = aEventMultiplexerDebugPrinter.isEnabled();

EventMultiplexer.prototype.DBG = function( sMethodName, eEventType, aNotifierId, nTime )
{
if( EventMultiplexer.DEBUG )
{
var sInfo = 'EventMultiplexer.' + sMethodName;
sInfo += '( type: ' + aEventTriggerOutMap[ eEventType ];
sInfo += ', notifier: ' + aNotifierId + ' )';
aEventMultiplexerDebugPrinter.print( sInfo, nTime );
}
};


var aInterpolatorHandler = {};

aInterpolatorHandler.getInterpolator = function( eCalcMode, eValueType, eValueSubtype )
{
var bHasSubtype = ( typeof( eValueSubtype ) === typeof( 0 ) );

if( !bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ];
}
else if( bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ];
}
else
{
log( 'aInterpolatorHandler.getInterpolator: not found any valid interpolator for calc mode '
+ aCalcModeOutMap[eCalcMode]  + ' and value type ' + aValueTypeOutMap[eValueType]  );
return null;
}
};

aInterpolatorHandler.aLerpFunctorMap = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_DISCRETE ] = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ] = [];


aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ NUMBER_PROPERTY ] =
function ( nFrom, nTo, nT )
{
return ( ( 1.0 - nT )* nFrom + nT * nTo );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ] = [];

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_RGB ] =
function ( nFrom, nTo, nT )
{
return RGBColor.interpolate( nFrom, nTo, nT );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_HSL ] =
function ( bCCW  )
{
return  function ( nFrom, nTo, nT )
{
return HSLColor.interpolate( nFrom, nTo, nT, bCCW );
};
};


function KeyStopLerp( aValueList )
{
KeyStopLerp.validateInput( aValueList );

this.aKeyStopList = [];
this.nLastIndex = 0;
this.nKeyStopDistance = aValueList[1] - aValueList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

for( var i = 0; i < aValueList.length; ++i )
this.aKeyStopList.push( aValueList[i] );

this.nUpperBoundIndex = this.aKeyStopList.length - 2;
}


KeyStopLerp.validateInput = function( aValueList )
{
var nSize = aValueList.length;
assert( nSize > 1, 'KeyStopLerp.validateInput: key stop vector must have two entries or more' );

for( var i = 1; i < nSize; ++i )
{
if( aValueList[i-1] > aValueList[i] )
log( 'KeyStopLerp.validateInput: time vector is not sorted in ascending order!' );
}
};

KeyStopLerp.prototype.reset = function()
{
KeyStopLerp.validateInput( this.aKeyStopList );
this.nLastIndex = 0;
this.nKeyStopDistance = this.aKeyStopList[1] - this.aKeyStopList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

};

KeyStopLerp.prototype.lerp = function( nAlpha )
{
if( nAlpha > this.aKeyStopList[ this.nLastIndex + 1 ] )
{
do
{
var nIndex = this.nLastIndex + 1;
this.nLastIndex = clamp( nIndex, 0, this.nUpperBoundIndex );
this.nKeyStopDistance = this.aKeyStopList[ this.nLastIndex + 1 ] - this.aKeyStopList[ this.nLastIndex ];
}
while( ( this.nKeyStopDistance <= 0 ) && ( this.nLastIndex < this.nUpperBoundIndex ) );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) / this.nKeyStopDistance;

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};

KeyStopLerp.prototype.lerp_ported = function( nAlpha )
{
if( ( this.aKeyStopList[ this.nLastIndex ] < nAlpha ) ||
( this.aKeyStopList[ this.nLastIndex + 1 ] >= nAlpha ) )
{
var i = 0;
for( ; i < this.aKeyStopList.length; ++i )
{
if( this.aKeyStopList[i] >= nAlpha )
break;
}
if( this.aKeyStopList[i] > nAlpha )
--i;
var nIndex = i - 1;
this.nLastIndex = clamp( nIndex, 0, this.aKeyStopList.length - 2 );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) /
( this.aKeyStopList[ this.nLastIndex+1 ] - this.aKeyStopList[ this.nLastIndex ] );

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};


var aOperatorSetMap = [];

aOperatorSetMap[ NUMBER_PROPERTY ] = {};

aOperatorSetMap[ NUMBER_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].add = function( a, b )
{
return ( a + b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].scale = function( k, v )
{
return ( k * v );
};

aOperatorSetMap[ COLOR_PROPERTY ] = {};

aOperatorSetMap[ COLOR_PROPERTY ].equal = function( a, b )
{
return a.equal( b );
};

aOperatorSetMap[ COLOR_PROPERTY ].add = function( a, b )
{
var c = a.clone();
c.add( b );
return c;
};

aOperatorSetMap[ COLOR_PROPERTY ].scale = function( k, v )
{
var r = v.clone();
r.scale( k );
return r;
};

aOperatorSetMap[ ENUM_PROPERTY ] = {};

aOperatorSetMap[ ENUM_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ ENUM_PROPERTY ].add = function( a )
{
return a;
};

aOperatorSetMap[ ENUM_PROPERTY ].scale = function( k, v )
{
return v;
};

aOperatorSetMap[ STRING_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];

aOperatorSetMap[ BOOL_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];


function ActivityParamSet()
{
this.aEndEvent = null;
this.aWakeupEvent = null;
this.aTimerEventQueue = null;
this.aActivityQueue = null;
this.nMinDuration = undefined;
this.nMinNumberOfFrames = MINIMUM_FRAMES_PER_SECONDS;
this.bAutoReverse = false;
this.nRepeatCount = 1.0;
this.nAccelerationFraction = 0.0;
this.nDecelerationFraction = 0.0;
this.nSlideWidth = undefined;
this.nSlideHeight = undefined;
this.aFormula = null;
this.aDiscreteTimes = [];
}


function AnimationActivity()
{
this.nId = AnimationActivity.getUniqueId();
}


AnimationActivity.CURR_UNIQUE_ID = 0;

AnimationActivity.getUniqueId = function()
{
++AnimationActivity.CURR_UNIQUE_ID;
return AnimationActivity.CURR_UNIQUE_ID;
};

AnimationActivity.prototype.getId = function()
{
return this.nId;
};


function SetActivity( aCommonParamSet, aAnimation, aToAttr  )
{
SetActivity.superclass.constructor.call( this );

this.aAnimation = aAnimation;
this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.aToAttr = aToAttr;
this.bIsActive = true;
}
extend( SetActivity, AnimationActivity );


SetActivity.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bIsActive = true;
};

SetActivity.prototype.dispose = function()
{
this.bIsActive = false;
if( this.aEndEvent && this.aEndEvent.isCharged() )
this.aEndEvent.dispose();
};

SetActivity.prototype.calcTimeLag = function()
{
return 0.0;
};

SetActivity.prototype.perform = function()
{
if( !this.isActive() )
return false;

this.bIsActive = false;

if( this.aAnimation && this.aTargetElement )
{
this.aAnimation.start( this.aTargetElement );
this.aAnimation.perform( this.aToAttr );
this.aAnimation.end();
}

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

};

SetActivity.prototype.isActive = function()
{
return this.bIsActive;
};

SetActivity.prototype.dequeued = function()
{
};

SetActivity.prototype.end = function()
{
this.perform();
};

SetActivity.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'SetActivity.setTargets: target element is not valid' );
this.aTargetElement = aTargetElement;
};


function ActivityBase( aCommonParamSet )
{
ActivityBase.superclass.constructor.call( this );

this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.nRepeats = aCommonParamSet.nRepeatCount;
this.nAccelerationFraction = aCommonParamSet.nAccelerationFraction;
this.nDecelerationFraction = aCommonParamSet.nDecelerationFraction;
this.bAutoReverse = aCommonParamSet.bAutoReverse;

this.bFirstPerformCall = true;
this.bIsActive = true;

}
extend( ActivityBase, AnimationActivity );


ActivityBase.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bFirstPerformCall = true;
this.bIsActive = true;
};

ActivityBase.prototype.dispose = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aEndEvent.dispose();

this.aEndEvent = null;
};

ActivityBase.prototype.perform = function()
{
if( !this.isActive() )
return false; // no, early exit.

assert( !this.bFirstPerformCall, 'ActivityBase.perform: assertion (!this.FirstPerformCall) failed' );

return true;
};

ActivityBase.prototype.calcTimeLag = function()
{
if( this.isActive() && this.bFirstPerformCall )
{
this.bFirstPerformCall = false;

this.startAnimation();
}
return 0.0;
};

ActivityBase.prototype.isActive = function()
{
return this.bIsActive;
};

ActivityBase.prototype.isDisposed = function()
{
return ( !this.bIsActive && !this.aEndEvent );
};

ActivityBase.prototype.dequeued = function()
{
if( !this.isActive() )
this.endAnimation();
};

ActivityBase.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'ActivityBase.setTargets: target element is not valid' );

this.aTargetElement = aTargetElement;
};

ActivityBase.prototype.startAnimation = function()
{
throw ( 'ActivityBase.startAnimation: abstract method invoked' );
};

ActivityBase.prototype.endAnimation = function()
{
throw ( 'ActivityBase.endAnimation: abstract method invoked' );
};

ActivityBase.prototype.endActivity = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

this.aEndEvent = null;

};

ActivityBase.prototype.calcAcceleratedTime = function( nT )
{


nT = clamp( nT, 0.0, 1.0 );

if( ( this.nAccelerationFraction > 0.0 || this.nDecelerationFraction > 0.0 ) &&
( this.nAccelerationFraction + this.nDecelerationFraction <= 1.0 ) )
{
var nC = 1.0 - 0.5*this.nAccelerationFraction - 0.5*this.nDecelerationFraction;

var nTPrime = 0.0;

if( nT < this.nAccelerationFraction )
{
nTPrime += 0.5 * nT * nT / this.nAccelerationFraction; // partial first interval
}
else
{
nTPrime += 0.5 * this.nAccelerationFraction; // full first interval

if( nT <= ( 1.0 - this.nDecelerationFraction ) )
{
nTPrime += nT - this.nAccelerationFraction; // partial second interval
}
else
{
nTPrime += 1.0 - this.nAccelerationFraction - this.nDecelerationFraction; // full second interval

var nTRelative = nT - 1.0 + this.nDecelerationFraction;

nTPrime += nTRelative - 0.5*nTRelative*nTRelative / this.nDecelerationFraction;
}
}

nT = nTPrime / nC;

}
return nT;
};

ActivityBase.prototype.getEventQueue = function()
{
return this.aTimerEventQueue;
};

ActivityBase.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

ActivityBase.prototype.isRepeatCountValid = function()
{
return !!this.nRepeats; // first ! convert to bool
};

ActivityBase.prototype.getRepeatCount = function()
{
return this.nRepeats;
};

ActivityBase.prototype.isAutoReverse = function()
{
return this.bAutoReverse;
};

ActivityBase.prototype.end = function()
{
if( !this.isActive() || this.isDisposed() )
return;

if( this.bFirstPerformCall )
{
this.bFirstPerformCall = false;
this.startAnimation();
}

this.performEnd();
this.endAnimation();
this.endActivity();
};

ActivityBase.prototype.performEnd = function()
{
throw ( 'ActivityBase.performEnd: abstract method invoked' );
};


function DiscreteActivityBase( aCommonParamSet )
{
DiscreteActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aOriginalWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aOriginalWakeupEvent.setActivity( this );
this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aDiscreteTimes = aCommonParamSet.aDiscreteTimes;
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nCurrPerformCalls = 0;
}
extend( DiscreteActivityBase, ActivityBase );


DiscreteActivityBase.prototype.activate = function( aEndElement )
{
DiscreteActivityBase.superclass.activate.call( this, aEndElement );

this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent.setNextTimeout( 0 );
this.nCurrPerformCalls = 0;
};

DiscreteActivityBase.prototype.startAnimation = function()
{
this.aWakeupEvent.start();
};

DiscreteActivityBase.prototype.calcFrameIndex = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
var nFrameIndex = nCurrCalls % (2 * nVectorSize);

if( nFrameIndex >= nVectorSize )
nFrameIndex = 2*nVectorSize - nFrameIndex; // invert sweep

return nFrameIndex;
}
else
{
return nCurrCalls % nVectorSize;
}
};

DiscreteActivityBase.prototype.calcRepeatCount = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
return Math.floor( nCurrCalls / (2*nVectorSize) ); // we've got 2 cycles per repeat
}
else
{
return Math.floor( nCurrCalls / nVectorSize );
}
};

DiscreteActivityBase.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
throw ( 'DiscreteActivityBase.performDiscreteHook: abstract method invoked' );
};

DiscreteActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nVectorSize = this.aDiscreteTimes.length;

var nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
this.performDiscreteHook( nFrameIndex, nRepeatCount );

++this.nCurrPerformCalls;

var nCurrRepeat = this.nCurrPerformCalls / nVectorSize;

if( this.isAutoReverse() )
nCurrRepeat /= 2;

if( !this.isRepeatCountValid() || nCurrRepeat < this.getRepeatCount() )
{


nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nCurrentRepeatTime = this.aDiscreteTimes[nFrameIndex];
nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
var nNextTimeout = this.nMinSimpleDuration * ( nRepeatCount + this.calcAcceleratedTime( nCurrentRepeatTime ) );
this.aWakeupEvent.setNextTimeout( nNextTimeout );

this.getEventQueue().addEvent( this.aWakeupEvent );
}
else
{
this.aWakeupEvent = null;

this.endActivity();
}

return false; // remove from queue, will be added back by the wakeup event.
};

DiscreteActivityBase.prototype.dispose = function()
{
if( this.aWakeupEvent )
this.aWakeupEvent.dispose();

this.aWakeupEvent = null;

DiscreteActivityBase.superclass.dispose.call(this);
};


function SimpleContinuousActivityBase( aCommonParamSet )
{
SimpleContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aTimer = new ElapsedTime( aCommonParamSet.aActivityQueue.getTimer() );
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nMinNumberOfFrames = aCommonParamSet.nMinNumberOfFrames;
this.nCurrPerformCalls = 0;

}
extend( SimpleContinuousActivityBase, ActivityBase );


SimpleContinuousActivityBase.prototype.startAnimation = function()
{
this.aTimer.reset();
};

SimpleContinuousActivityBase.prototype.calcTimeLag = function()
{
SimpleContinuousActivityBase.superclass.calcTimeLag.call( this );

if( !this.isActive() )
return 0.0;

var nCurrElapsedTime = this.aTimer.getElapsedTime();


var nFractionElapsedTime = nCurrElapsedTime / this.nMinSimpleDuration;

var nFractionRequiredCalls = this.nCurrPerformCalls / this.nMinNumberOfFrames;


if( nFractionElapsedTime < nFractionRequiredCalls )
{
return 0.0;
}
else
{
return ( ( nFractionElapsedTime - nFractionRequiredCalls ) * this.nMinSimpleDuration );
}
};

SimpleContinuousActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nCurrElapsedTime = this.aTimer.getElapsedTime();
var nT = nCurrElapsedTime / this.nMinSimpleDuration;


var bActivityEnding = false;

if( this.isRepeatCountValid() )
{

var nRepeatCount = this.getRepeatCount();
var nEffectiveRepeat = this.isAutoReverse() ? 2.0 * nRepeatCount : nRepeatCount;

if( nEffectiveRepeat <= nT )
{
bActivityEnding = true;

nT = nEffectiveRepeat;
}
}


var nRepeats;
var nRelativeSimpleTime;
if( this.isAutoReverse() )
{
nRepeats = Math.floor( nT );
var nFractionalActiveDuration =  nT - nRepeats;

if( nRepeats % 2 )
{
nRelativeSimpleTime = 1.0 - nFractionalActiveDuration;
}
else
{
nRelativeSimpleTime = nFractionalActiveDuration;
}

nRepeats /= 2;
}
else
{

nRepeats = Math.floor( nT );
nRelativeSimpleTime = nT - nRepeats;

if( this.isRepeatCountValid() && ( nRepeats >= this.getRepeatCount() ) )
{

nRelativeSimpleTime = 1.0;
nRepeats -= 1.0;
}
}


this.simplePerform( nRelativeSimpleTime, nRepeats );

if( bActivityEnding )
this.endActivity();

++this.nCurrPerformCalls;

return this.isActive();
};

SimpleContinuousActivityBase.prototype.simplePerform = function( /*nSimpleTime, nRepeatCount*/ )
{
throw ( 'SimpleContinuousActivityBase.simplePerform: abstract method invoked' );
};


function ContinuousKeyTimeActivityBase( aCommonParamSet )
{
var nSize = aCommonParamSet.aDiscreteTimes.length;
assert( nSize > 1,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.length > 1) failed' );

assert( aCommonParamSet.aDiscreteTimes[0] == 0.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.front() == 0.0) failed' );

assert( aCommonParamSet.aDiscreteTimes[ nSize - 1 ] <= 1.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.back() <= 1.0) failed' );

ContinuousKeyTimeActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aLerper = new KeyStopLerp( aCommonParamSet.aDiscreteTimes );
}
extend( ContinuousKeyTimeActivityBase, SimpleContinuousActivityBase );


ContinuousKeyTimeActivityBase.prototype.activate = function( aEndElement )
{
ContinuousKeyTimeActivityBase.superclass.activate.call( this, aEndElement );

this.aLerper.reset();
};

ContinuousKeyTimeActivityBase.prototype.performContinuousHook = function( /*nIndex, nFractionalIndex, nRepeatCount*/ )
{
throw ( 'ContinuousKeyTimeActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousKeyTimeActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
var nAlpha = this.calcAcceleratedTime( nSimpleTime );

var aLerpResult = this.aLerper.lerp( nAlpha );

this.performContinuousHook( aLerpResult.nIndex, aLerpResult.nLerp, nRepeatCount );
};


function ContinuousActivityBase( aCommonParamSet )
{
ContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

}
extend( ContinuousActivityBase, SimpleContinuousActivityBase );


ContinuousActivityBase.prototype.performContinuousHook = function( /*nModifiedTime, nRepeatCount*/ )
{
throw ( 'ContinuousActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
this.performContinuousHook( this.calcAcceleratedTime( nSimpleTime ), nRepeatCount );
};


function SimpleActivity( aCommonParamSet, aNumberAnimation, eDirection )
{
assert( ( eDirection == BACKWARD ) || ( eDirection == FORWARD ),
'SimpleActivity constructor: animation direction is not valid' );

assert( aNumberAnimation, 'SimpleActivity constructor: animation object is not valid' );

SimpleActivity.superclass.constructor.call( this, aCommonParamSet );

this.aAnimation = aNumberAnimation;
this.nDirection = ( eDirection == FORWARD ) ? 1.0 : 0.0;
}
extend( SimpleActivity, ContinuousActivityBase );


SimpleActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation )
return;

ANIMDBG.print( 'SimpleActivity.startAnimation invoked' );
SimpleActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

SimpleActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();

};

SimpleActivity.prototype.performContinuousHook = function( nModifiedTime /*, nRepeatCount*/ )
{

if( this.isDisposed() || !this.aAnimation )
return;

var nT = 1.0 - this.nDirection + nModifiedTime * ( 2.0*this.nDirection - 1.0 );
this.aAnimation.perform( nT );
};

SimpleActivity.prototype.performEnd = function()
{
if( this.aAnimation )
this.aAnimation.perform( this.nDirection );
};


function FromToByActivityTemplate( BaseType ) // template parameter
{

function FromToByActivity( aFromValue, aToValue, aByValue,
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate )
{
assert( aAnimation, 'FromToByActivity constructor: invalid animation object' );
assert( ( aToValue != undefined ) || ( aByValue != undefined ),
'FromToByActivity constructor: one of aToValue or aByValue must be valid' );

FromToByActivity.superclass.constructor.call( this, aActivityParamSet );

this.aFrom = aFromValue;
this.aTo = aToValue;
this.aBy = aByValue;
this.aStartValue = null;
this.aEndValue = null;
this.aPreviousValue = null;
this.aStartInterpolationValue = null;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.equal = aOperatorSet.equal;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bDynamicStartValue = false;
this.nIteration = 0;
this.bCumulative = bAccumulate;
this.aFormula = aActivityParamSet.aFormula;
}
extend( FromToByActivity, BaseType );

FromToByActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation && this.aFrom )
{
var aValue = this.aFormula ? this.aFormula( this.aFrom ) : this.aFrom;
this.aAnimation.perform(aValue);
}
};

FromToByActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.startAnimation: activity disposed or not valid animation' );
return;
}

FromToByActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );


var aAnimationStartValue = this.aAnimation.getUnderlyingValue();

if( this.aFrom )
{
if( this.aTo )
{
this.aStartValue = this.aFrom;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = this.aFrom;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}
else
{
this.aStartValue = aAnimationStartValue;
this.aStartInterpolationValue = this.aStartValue;

if( this.aTo )
{

this.bDynamicStartValue = true;
this.aPreviousValue = this.aStartValue;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = aAnimationStartValue;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}

ANIMDBG.print( 'FromToByActivity.startAnimation: aStartValue = ' + this.aStartValue + ', aEndValue = ' + this.aEndValue );
};

FromToByActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

FromToByActivity.prototype.performContinuousHook = function( nModifiedTime, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}


if( this.bDynamicStartValue )
{
if( this.nIteration != nRepeatCount )
{
this.nIteration = nRepeatCount;
this.aStartInterpolationValue =  this.aStartValue;
}
else
{
var aActualValue = this.aAnimation.getUnderlyingValue();
if( !this.equal( aActualValue, this.aPreviousValue ) )
this.aStartInterpolationValue = aActualValue;
}
}

var aValue = this.aInterpolator( this.aStartInterpolationValue,
this.aEndValue, nModifiedTime );

if( this.bCumulative && !this.bDynamicStartValue )
{
aValue = this.add( this.scale( nRepeatCount, this.aEndValue ), aValue );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );

if( this.bDynamicStartValue )
{
this.aPreviousValue = this.aAnimation.getUnderlyingValue();
}

};

FromToByActivity.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
if (this.isDisposed() || !this.aAnimation) {
log('FromToByActivity.performDiscreteHook: activity disposed or not valid animation');
return;
}
};

FromToByActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.isAutoReverse() ? this.aStartValue : this.aEndValue;
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
}
};

FromToByActivity.prototype.dispose = function()
{
FromToByActivity.superclass.dispose.call( this );
};


return FromToByActivity;
}


var LinearFromToByActivity = instantiate( FromToByActivityTemplate, ContinuousActivityBase );
var DiscreteFromToByActivity = instantiate( FromToByActivityTemplate, DiscreteActivityBase );


function  ValueListActivityTemplate( BaseType ) // template parameter
{

function ValueListActivity( aValueList, aActivityParamSet,
aAnimation, aInterpolator,
aOperatorSet, bAccumulate )
{
assert( aAnimation, 'ValueListActivity constructor: invalid animation object' );
assert( aValueList.length != 0, 'ValueListActivity: value list is empty' );

ValueListActivity.superclass.constructor.call( this, aActivityParamSet );

this.aValueList = aValueList;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bCumulative = bAccumulate;
this.aLastValue = this.aValueList[ this.aValueList.length - 1 ];
this.aFormula = aActivityParamSet.aFormula;
}
extend( ValueListActivity, BaseType );

ValueListActivity.prototype.activate = function( aEndEvent )
{
ValueListActivity.superclass.activate.call( this, aEndEvent );
for( var i = 0; i < this.aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + this.aValueList[i] );
}
};

ValueListActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation )
{
var aValue = this.aValueList[0];
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform(aValue);
}
};

ValueListActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.startAnimation: activity disposed or not valid animation' );
return;
}

ValueListActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

ValueListActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

ValueListActivity.prototype.performContinuousHook = function( nIndex, nFractionalIndex, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}

assert( ( nIndex + 1 ) < this.aValueList.length,
'ValueListActivity.performContinuousHook: assertion (nIndex + 1 < this.aValueList.length) failed' );


var aValue = this.aInterpolator( this.aValueList[ nIndex ],
this.aValueList[ nIndex+1 ],
nFractionalIndex );

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performDiscreteHook = function( nFrame, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performDiscreteHook: activity disposed or not valid animation' );
return;
}

assert( nFrame < this.aValueList.length,
'ValueListActivity.performDiscreteHook: assertion ( nFrame < this.aValueList.length) failed' );

var aValue = this.aValueList[nFrame];

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.aFormula ? this.aFormula( this.aLastValue ) : this.aLastValue;
this.aAnimation.perform( aValue );
}
};

ValueListActivity.prototype.dispose = function()
{
ValueListActivity.superclass.dispose.call( this );
};


return ValueListActivity;
}


var LinearValueListActivity = instantiate( ValueListActivityTemplate, ContinuousKeyTimeActivityBase );
var DiscreteValueListActivity = instantiate( ValueListActivityTemplate, DiscreteActivityBase );


function createActivity( aActivityParamSet, aAnimationNode, aAnimation, aInterpolator )
{
var eCalcMode = aAnimationNode.getCalcMode();

var sAttributeName = aAnimationNode.getAttributeName();
var aAttributeProp = aAttributeMap[ sAttributeName ];

var eValueType = aAttributeProp[ 'type' ];
var eValueSubtype = aAttributeProp[ 'subtype' ];

if( ! aInterpolator )
{
aInterpolator = aInterpolatorHandler.getInterpolator( eCalcMode,
eValueType,
eValueSubtype );
}

var bAccumulate = ( aAnimationNode.getAccumulate() === ACCUMULATE_MODE_SUM )
&& !( eValueType === BOOL_PROPERTY ||
eValueType === STRING_PROPERTY ||
eValueType === ENUM_PROPERTY );

if( aAnimationNode.getFormula() )
{
var sFormula =  aAnimationNode.getFormula();
var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;
sFormula = sFormula.replace(reMath, 'Math.$&');
sFormula = sFormula.replace(/pi(?!\w)/g, 'Math.PI');
sFormula = sFormula.replace(/e(?!\w)/g, 'Math.E');
sFormula = sFormula.replace(/\$/g, '__PARAM0__');

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aBBox = aAnimatedElement.getBaseBBox();

var width = aBBox.width / aActivityParamSet.nSlideWidth;
var height = aBBox.height / aActivityParamSet.nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / aActivityParamSet.nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / aActivityParamSet.nSlideHeight;

aActivityParamSet.aFormula = function( __PARAM0__ ) {

return eval(sFormula);
};
}

aActivityParamSet.aDiscreteTimes = aAnimationNode.getKeyTimes();

var aValueSet = aAnimationNode.getValues();
var nValueSetSize = aValueSet.length;

if( nValueSetSize != 0 )
{

if( aActivityParamSet.aDiscreteTimes.length == 0 )
{
for( var i = 0; i < nValueSetSize; ++i )
aActivityParamSet.aDiscreteTimes[i].push( i / nValueSetSize );
}

switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );

return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteValueListActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearValueListActivity,
bAccumulate,
eValueType );
}
}
else
{
switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
log( 'createActivity: discrete calculation case not yet implemented' );
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteFromToByActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearFromToByActivity,
bAccumulate,
eValueType );
}
}
}


function createValueListActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{
var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createValueListActivity: no operator set found' );

var aValueSet = aAnimationNode.getValues();

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

for( var i = 0; i < aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + aValueList[i] );
}

return new ClassTemplateInstance( aValueList, aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function createFromToByActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createFromToByActivity: no operator set found' );

var aValueSet = [];
aValueSet[0] = aAnimationNode.getFromValue();
aValueSet[1] = aAnimationNode.getToValue();
aValueSet[2] = aAnimationNode.getByValue();

ANIMDBG.print( 'createFromToByActivity: value type: ' + aValueTypeOutMap[eValueType] +
', aFrom = ' + aValueSet[0] +
', aTo = ' + aValueSet[1] +
', aBy = ' + aValueSet[2] );

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

ANIMDBG.print( 'createFromToByActivity: ' +
', aFrom = ' + aValueList[0] +
', aTo = ' + aValueList[1] +
', aBy = ' + aValueList[2] );

return new ClassTemplateInstance( aValueList[0], aValueList[1], aValueList[2],
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function extractAttributeValues( eValueType, aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var i;
switch( eValueType )
{
case NUMBER_PROPERTY :
evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight );
break;
case BOOL_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
var aValue = booleanParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
case STRING_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case ENUM_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case COLOR_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValue = colorParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
default:
log( 'createValueListActivity: unexpected value type: ' + eValueType );
}

}


function evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var width = aBBox.width / nSlideWidth;
var height = aBBox.height / nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / nSlideHeight;

var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;

for( var i = 0; i < aValueSet.length; ++i )
{
var sValue = aValueSet[i];
sValue = sValue.replace(reMath, 'Math.$&');
sValue = sValue.replace(/pi(?!\w)/g, 'Math.PI');
sValue = sValue.replace(/e(?!\w)/g, 'Math.E');
var aValue =  eval( sValue );
aValueList.push( aValue );
}
}


var BACKWARD    = 0;
var FORWARD     = 1;

var MAXIMUM_FRAME_COUNT                 = 60;
var MINIMUM_TIMEOUT                     = 1.0 / MAXIMUM_FRAME_COUNT;
var MAXIMUM_TIMEOUT                     = 4.0;
var MINIMUM_FRAMES_PER_SECONDS          = 10;
var PREFERRED_FRAMES_PER_SECONDS        = 50;
var PREFERRED_FRAME_RATE                = 1.0 / PREFERRED_FRAMES_PER_SECONDS;


function Effect( nId )
{
this.nId = ( typeof( nId ) === typeof( 1 ) ) ? nId : -1;
this.eState = Effect.NOT_STARTED;
}
Effect.NOT_STARTED = 0;
Effect.PLAYING = 1;
Effect.ENDED = 2;

Effect.prototype.getId = function()
{
return this.nId;
};

Effect.prototype.isMainEffect = function()
{
return ( this.nId === -1 );
};

Effect.prototype.isPlaying = function()
{
return ( this.eState === Effect.PLAYING );
};

Effect.prototype.isEnded = function()
{
return ( this.eState === Effect.ENDED );
};

Effect.prototype.start = function()
{
assert( this.eState === Effect.NOT_STARTED, 'Effect.start: wrong state.' );
this.eState = Effect.PLAYING;
};

Effect.prototype.end = function()
{
assert( this.eState === Effect.PLAYING, 'Effect.end: wrong state.' );
this.eState = Effect.ENDED;
};


function SlideShow()
{
this.aTimer = new ElapsedTime();
this.aFrameSynchronization = new FrameSynchronization( PREFERRED_FRAME_RATE );
this.aTimerEventQueue = new TimerEventQueue( this.aTimer );
this.aActivityQueue = new ActivityQueue( this.aTimer );
this.aNextEffectEventArray = null;
this.aInteractiveAnimationSequenceMap = null;
this.aEventMultiplexer = null;

this.aContext = new SlideShowContext( this.aTimerEventQueue,
this.aEventMultiplexer,
this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aActivityQueue );
this.bIsIdle = true;
this.bIsEnabled = true;
this.bNoSlideTransition = false;
this.bIsTransitionRunning = false;

this.nCurrentEffect = 0;
this.bIsNextEffectRunning = false;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;
}

SlideShow.prototype.setSlideEvents = function( aNextEffectEventArray,
aInteractiveAnimationSequenceMap,
aEventMultiplexer )
{
if( !aNextEffectEventArray )
log( 'SlideShow.setSlideEvents: aNextEffectEventArray is not valid' );

if( !aInteractiveAnimationSequenceMap )
log( 'SlideShow.setSlideEvents:aInteractiveAnimationSequenceMap  is not valid' );

if( !aEventMultiplexer )
log( 'SlideShow.setSlideEvents: aEventMultiplexer is not valid' );

this.aContext.aNextEffectEventArray = aNextEffectEventArray;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aContext.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aContext.aEventMultiplexer = aEventMultiplexer;
this.aEventMultiplexer = aEventMultiplexer;
this.nCurrentEffect = 0;
};

SlideShow.prototype.createSlideTransition = function( aSlideTransitionHandler, aLeavingSlide, aEnteringSlide, aTransitionEndEvent )
{
if( !aEnteringSlide )
{
log( 'SlideShow.createSlideTransition: entering slide element is not valid.' );
return null;
}

if( this.bNoSlideTransition ) return null;

var aAnimatedLeavingSlide = null;
if( aLeavingSlide )
aAnimatedLeavingSlide = new AnimatedSlide( aLeavingSlide );
var aAnimatedEnteringSlide = new AnimatedSlide( aEnteringSlide );

var aSlideTransition = aSlideTransitionHandler.createSlideTransition( aAnimatedLeavingSlide, aAnimatedEnteringSlide );
if( !aSlideTransition ) return null;

var nDuration = 0.001;
if( aSlideTransitionHandler.getDuration().isValue() )
{
nDuration = aSlideTransitionHandler.getDuration().getValue();
}
else
{
log( 'SlideShow.createSlideTransition: duration is not a number' );
}

var aCommonParameterSet = new ActivityParamSet();
aCommonParameterSet.aEndEvent = aTransitionEndEvent;
aCommonParameterSet.aTimerEventQueue = this.aTimerEventQueue;
aCommonParameterSet.aActivityQueue = this.aActivityQueue;
aCommonParameterSet.nMinDuration = nDuration;
aCommonParameterSet.nMinNumberOfFrames = aSlideTransitionHandler.getMinFrameCount();
aCommonParameterSet.nSlideWidth = WIDTH;
aCommonParameterSet.nSlideHeight = HEIGHT;

return new SimpleActivity( aCommonParameterSet, aSlideTransition, FORWARD );

};

SlideShow.prototype.isEnabled = function()
{
return this.bIsEnabled;
};

SlideShow.prototype.isRunning = function()
{
return !this.bIsIdle;
};

SlideShow.prototype.isTransitionPlaying = function()
{
return this.bIsTransitionRunning;
};

SlideShow.prototype.isMainEffectPlaying = function()
{
return this.bIsNextEffectRunning;
};

SlideShow.prototype.isInteractiveEffectPlaying = function()
{
return ( this.nTotalInteractivePlayingEffects > 0 );
};

SlideShow.prototype.isAnyEffectPlaying = function()
{
return ( this.isMainEffectPlaying() || this.isInteractiveEffectPlaying() );
};

SlideShow.prototype.hasAnyEffectStarted = function()
{
return ( this.aStartedEffectList.length > 0 );
};

SlideShow.prototype.notifyNextEffectStart = function()
{
assert( !this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectStart: an effect is already started.' );
this.bIsNextEffectRunning = true;
this.aEventMultiplexer.registerNextEffectEndHandler( bind2( SlideShow.prototype.notifyNextEffectEnd, this ) );
var aEffect = new Effect();
aEffect.start();
this.aStartedEffectIndexMap[ -1 ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );


var aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler.aAnimatedElementMap;
for( var sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifyNextEffectStart( this.nCurrentEffect );
};

SlideShow.prototype.notifyNextEffectEnd = function()
{
assert( this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectEnd: effect already ended.' );
this.bIsNextEffectRunning = false;

this.aStartedEffectList[ this.aStartedEffectIndexMap[ -1 ] ].end();
};

SlideShow.prototype.notifySlideStart = function( nNewSlideIndex, nOldSlideIndex )
{
this.nCurrentEffect = 0;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;

var aAnimatedElementMap;
var sId;
if( nOldSlideIndex !== undefined )
{
aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nOldSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideEnd();
}

aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nNewSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideStart( this.aContext );
};

SlideShow.prototype.notifyTransitionEnd = function( nSlideIndex )
{
if( theMetaDoc.getCurrentSlide() )
{
var sRef = 'url(#' + aPresentationClipPathId + ')';
theMetaDoc.getCurrentSlide().slideElement.setAttribute('clip-path', sRef);
}

this.bIsTransitionRunning = false;
if( this.bIsRewinding )
{
theMetaDoc.aMetaSlideSet[nSlideIndex].hide();
var nIndex = nCurSlide !== undefined ? nCurSlide : -1;
this.displaySlide( nIndex, true );
this.skipAllEffects();
this.bIsRewinding = false;
return;
}

theMetaDoc.setCurrentSlide(nSlideIndex);

if( this.aSlideViewElement )
{
theMetaDoc.getCurrentSlide().aVisibilityStatusElement.parentNode.removeChild( this.aSlideViewElement );
this.aSlideViewElement = null;
}
if( this.isEnabled() )
{
this.dispose();

theMetaDoc.getCurrentSlide().aSlideAnimationsHandler.start();
this.update();
}
};

SlideShow.prototype.notifyInteractiveAnimationSequenceStart = function( nNodeId )
{
++this.nTotalInteractivePlayingEffects;
var aEffect = new Effect( nNodeId );
aEffect.start();
this.aStartedEffectIndexMap[ nNodeId ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );
};

SlideShow.prototype.notifyInteractiveAnimationSequenceEnd = function( nNodeId )
{
assert( this.isInteractiveEffectPlaying(),
'SlideShow.notifyInteractiveAnimationSequenceEnd: no interactive effect playing.' );

this.aStartedEffectList[ this.aStartedEffectIndexMap[ nNodeId ] ].end();
--this.nTotalInteractivePlayingEffects;
};

SlideShow.prototype.nextEffect = function()
{
if( !this.isEnabled() )
return false;

if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
return true;
}

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
++this.nCurrentEffect;
this.update();
return true;
};

SlideShow.prototype.skipTransition  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsSkipping = true;

this.aActivityQueue.endAll();
this.aTimerEventQueue.forceEmpty();
this.aActivityQueue.endAll();
this.update();
this.bIsSkipping = false;
};

SlideShow.prototype.skipAllPlayingEffects  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

this.bIsSkipping = true;
for( var i = 0; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
this.aEventMultiplexer.notifySkipEffectEvent();
else
this.aEventMultiplexer.notifySkipInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipNextEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

assert( !this.isAnyEffectPlaying(),
'SlideShow.skipNextEffect' );

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.bIsSkipping = true;
this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
this.aEventMultiplexer.notifySkipEffectEvent();
++this.nCurrentEffect;
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipPlayingOrNextEffect = function()
{
if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
return this.skipAllPlayingEffects();
else
return this.skipNextEffect();
};


SlideShow.prototype.skipAllEffects = function()
{
if( this.bIsSkippingAll )
return true;

this.bIsSkippingAll = true;

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
}
else if( !this.aNextEffectEventArray
|| ( this.nCurrentEffect >= this.aNextEffectEventArray.size() ) )
{
this.bIsSkippingAll = false;
return false;
}

while( this.nCurrentEffect < this.aNextEffectEventArray.size() )
{
this.skipNextEffect();
}
this.bIsSkippingAll = false;
return true;
};

SlideShow.prototype.rewindTransition = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsRewinding = true;
this.aActivityQueue.endAll();
this.update();
this.bIsRewinding = false;
};

SlideShow.prototype.rewindEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

this.bIsRewinding = true;

var nFirstPlayingEffectIndex = undefined;

var i = 0;
for( ; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
nFirstPlayingEffectIndex = i;
break;
}
}

if( nFirstPlayingEffectIndex !== undefined )
{
i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindCurrentEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindRunningInteractiveEffectEvent( aEffect.getId() );
}
}
else if( aEffect.isEnded() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
}
this.update();

i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
}
}
else  // there is no playing effect
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
if( aEffect.isEnded() )  // Well that is almost an assertion.
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
}

this.bIsRewinding = false;
};

SlideShow.prototype.rewindToPreviousSlide = function()
{
if( this.isTransitionPlaying() )
{
this.rewindTransition();
return;
}
if( this.isAnyEffectPlaying() )
return;
var nNewSlide = nCurSlide - 1;
this.displaySlide( nNewSlide, true );
this.skipAllEffects();
};

SlideShow.prototype.rewindAllEffects = function()
{
if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

while( this.hasAnyEffectStarted() )
{
this.rewindEffect();
}
};

SlideShow.prototype.exitSlideShowInApp = function()
{
var ua = navigator.userAgent;
if (ua.indexOf(' AppleWebKit/') !== -1 &&
ua.indexOf(' Mobile/') !== -1 &&
window.webkit !== undefined &&
window.webkit.messageHandlers !== undefined &&
window.webkit.messageHandlers.lool !== undefined)
window.webkit.messageHandlers.lool.postMessage('EXITSLIDESHOW', '*');
}

SlideShow.prototype.displaySlide = function( nNewSlide, bSkipSlideTransition )
{
var aMetaDoc = theMetaDoc;
var nSlides = aMetaDoc.nNumberOfSlides;
if( nNewSlide < 0 && nSlides > 0 )
nNewSlide = nSlides - 1;
else if( nNewSlide >= nSlides ) {
nNewSlide = 0;
this.exitSlideShowInApp();
}

if( ( currentMode === INDEX_MODE ) && ( nNewSlide === nCurSlide ) )
{
aMetaDoc.getCurrentSlide().show();
return;
}

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

var nOldSlide = nCurSlide;
if( nOldSlide !== undefined )
{
var oldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
if( this.isEnabled() )
{
if( oldMetaSlide.aSlideAnimationsHandler.isAnimated() )
{
oldMetaSlide.aSlideAnimationsHandler.end( bSkipSlideTransition );

this.dispose();
}
}
}

this.notifySlideStart( nNewSlide, nOldSlide );

if( this.isEnabled() && !bSkipSlideTransition  )
{
if ( ( ( nOldSlide !== undefined ) &&
( ( nNewSlide > nOldSlide ) ||
( ( nNewSlide == 0) && ( nOldSlide == (aMetaDoc.nNumberOfSlides - 1) ) ) ) ) ||
(  ( nOldSlide === undefined ) &&  ( nNewSlide == 0) )  // for transition on first slide
)
{

var aOldMetaSlide = null;
if( nOldSlide === undefined ) // for transition on first slide
{
aOldMetaSlide = aMetaDoc.theMetaDummySlide;
}
else
{
aOldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
}
var aNewMetaSlide = aMetaDoc.aMetaSlideSet[nNewSlide];

var aSlideTransitionHandler = aNewMetaSlide.aTransitionHandler;
if( aSlideTransitionHandler && aSlideTransitionHandler.isValid() )
{
var sRef = 'url(#' + aPresentationClipPathShrinkId + ')';
aOldMetaSlide.slideElement.setAttribute( 'clip-path', sRef );

if( nOldSlide > nNewSlide )
{
this.aSlideViewElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', this.aSlideViewElement, 'href', '#' + aOldMetaSlide.slideContainerId );
aNewMetaSlide.aVisibilityStatusElement.parentNode.insertBefore( this.aSlideViewElement, aNewMetaSlide.aVisibilityStatusElement );
aOldMetaSlide.hide();
}

var aLeavingSlide = aOldMetaSlide;
var aEnteringSlide = aNewMetaSlide;
var aTransitionEndEvent = makeEvent( bind2( this.notifyTransitionEnd, this, nNewSlide ) );

var aTransitionActivity =
this.createSlideTransition( aSlideTransitionHandler, aLeavingSlide,
aEnteringSlide, aTransitionEndEvent );

if( aTransitionActivity )
{
this.bIsTransitionRunning = true;
this.aActivityQueue.addActivity( aTransitionActivity );
this.update();
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}

};

SlideShow.prototype.update = function()
{
this.aTimer.holdTimer();

this.aTimerEventQueue.process();
this.aActivityQueue.process();

this.aFrameSynchronization.synchronize();

this.aActivityQueue.processDequeued();

this.aTimer.releaseTimer();

var bActivitiesLeft = ( ! this.aActivityQueue.isEmpty() );
var bTimerEventsLeft = ( ! this.aTimerEventQueue.isEmpty() );
var bEventsLeft = ( bActivitiesLeft || bTimerEventsLeft );


if( bEventsLeft )
{
var nNextTimeout;
if( bActivitiesLeft )
{
nNextTimeout = MINIMUM_TIMEOUT;
this.aFrameSynchronization.activate();
}
else
{
nNextTimeout = this.aTimerEventQueue.nextTimeout();
if( nNextTimeout < MINIMUM_TIMEOUT )
nNextTimeout = MINIMUM_TIMEOUT;
else if( nNextTimeout > MAXIMUM_TIMEOUT )
nNextTimeout = MAXIMUM_TIMEOUT;
this.aFrameSynchronization.deactivate();
}

this.bIsIdle = false;
window.setTimeout( 'aSlideShow.update()', nNextTimeout * 1000 );
}
else
{
this.bIsIdle = true;
}
};

SlideShow.prototype.dispose = function()
{
this.aTimerEventQueue.clear();
this.aActivityQueue.clear();
this.aNextEffectEventArray = null;
this.aEventMultiplexer = null;
};

SlideShow.prototype.getContext = function()
{
return this.aContext;
};

var aSlideShow = null;


function SlideShowContext( aTimerEventQueue, aEventMultiplexer, aNextEffectEventArray, aInteractiveAnimationSequenceMap, aActivityQueue)
{
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMultiplexer = aEventMultiplexer;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aActivityQueue = aActivityQueue;
this.bIsSkipping = false;
}


function FrameSynchronization( nFrameDuration )
{
this.nFrameDuration = nFrameDuration;
this.aTimer = new ElapsedTime();
this.nNextFrameTargetTime = 0.0;
this.bIsActive = false;

this.markCurrentFrame();
}


FrameSynchronization.prototype.markCurrentFrame = function()
{
this.nNextFrameTargetTime = this.aTimer.getElapsedTime() + this.nFrameDuration;
};

FrameSynchronization.prototype.synchronize = function()
{
if( this.bIsActive )
{
while( this.aTimer.getElapsedTime() < this.nNextFrameTargetTime )
;
}

this.markCurrentFrame();

};

FrameSynchronization.prototype.activate = function()
{
this.bIsActive = true;
};

FrameSynchronization.prototype.deactivate = function()
{
this.bIsActive = false;
};


function NextEffectEventArray()
{
this.aEventArray = [];
}


NextEffectEventArray.prototype.size = function()
{
return this.aEventArray.length;
};

NextEffectEventArray.prototype.at = function( nIndex )
{
return this.aEventArray[ nIndex ];
};

NextEffectEventArray.prototype.appendEvent = function( aEvent )
{
var nSize = this.size();
for( var i = 0; i < nSize; ++i )
{
if( this.aEventArray[i].getId() == aEvent.getId() )
{
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') already present' );
return false;
}
}
this.aEventArray.push( aEvent );
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') appended' );
return true;
};

NextEffectEventArray.prototype.clear = function( )
{
this.aEventArray = [];
};


function TimerEventQueue( aTimer )
{
this.aTimer = aTimer;
this.aEventSet = new PriorityQueue( EventEntry.compare );
}


TimerEventQueue.prototype.addEvent = function( aEvent )
{
this.DBG( 'TimerEventQueue.addEvent event(' + aEvent.getId() + ') appended.' );
if( !aEvent )
{
log( 'TimerEventQueue.addEvent: null event' );
return false;
}

var nTime = aEvent.getActivationTime( this.aTimer.getElapsedTime() );
var aEventEntry = new EventEntry( aEvent, nTime );
this.aEventSet.push( aEventEntry );

return true;
};

TimerEventQueue.prototype.forceEmpty = function()
{
this.process_(true);
};


TimerEventQueue.prototype.process = function()
{
this.process_(false);
};

TimerEventQueue.prototype.process_ = function( bFireAllEvents )
{
var nCurrentTime = this.aTimer.getElapsedTime();

while( !this.isEmpty() && ( bFireAllEvents || ( this.aEventSet.top().nActivationTime <= nCurrentTime ) ) )
{
var aEventEntry = this.aEventSet.top();
this.aEventSet.pop();

var aEvent = aEventEntry.aEvent;
if( aEvent.isCharged() )
aEvent.fire();
}
};

TimerEventQueue.prototype.isEmpty = function()
{
return this.aEventSet.isEmpty();
};

TimerEventQueue.prototype.nextTimeout = function()
{
var nTimeout = Number.MAX_VALUE;
var nCurrentTime = this.aTimer.getElapsedTime();
if( !this.isEmpty() )
nTimeout = this.aEventSet.top().nActivationTime - nCurrentTime;
return nTimeout;
};

TimerEventQueue.prototype.clear = function()
{
this.DBG( 'TimerEventQueue.clear invoked' );
this.aEventSet.clear();
};

TimerEventQueue.prototype.getTimer = function()
{
return this.aTimer;
};

TimerEventQueue.prototype.DBG = function( sMessage, nTime )
{
aTimerEventQueueDebugPrinter.print( sMessage, nTime );
};


TimerEventQueue.prototype.insert = function( aEventEntry )
{
var nHoleIndex = this.aEventSet.length;
var nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );

while( ( nHoleIndex > 0 ) && this.aEventSet[ nParent ].compare( aEventEntry ) )
{
this.aEventSet[ nHoleIndex ] = this.aEventSet[ nParent ];
nHoleIndex = nParent;
nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );
}
this.aEventSet[ nHoleIndex ] = aEventEntry;
};


function EventEntry( aEvent, nTime )
{
this.aEvent = aEvent;
this.nActivationTime = nTime;
}


EventEntry.compare = function( aLhsEventEntry, aRhsEventEntry )
{
if ( aLhsEventEntry.nActivationTime > aRhsEventEntry.nActivationTime )
{
return -1;
}
else if ( aLhsEventEntry.nActivationTime < aRhsEventEntry.nActivationTime )
{
return 1;
}
else
{
return 0;
}
};


function ActivityQueue( aTimer )
{
this.aTimer = aTimer;
this.aCurrentActivityWaitingSet = [];
this.aCurrentActivityReinsertSet = [];
this.aDequeuedActivitySet = [];
}


ActivityQueue.prototype.dispose = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dispose();

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dispose();
};

ActivityQueue.prototype.addActivity = function( aActivity )
{
if( !aActivity )
{
log( 'ActivityQueue.addActivity: activity is not valid' );
return false;
}

this.aCurrentActivityWaitingSet.push( aActivity );
aActivityQueueDebugPrinter.print( 'ActivityQueue.addActivity: activity appended' );
return true;
};

ActivityQueue.prototype.process = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var nLag = 0.0;
for( var i = 0; i < nSize; ++i )
{
nLag = Math.max( nLag,this.aCurrentActivityWaitingSet[i].calcTimeLag()  );
}

if( nLag > 0.0 )
this.aTimer.adjustTimer( -nLag, true );


while( this.aCurrentActivityWaitingSet.length != 0 )
{
var aActivity = this.aCurrentActivityWaitingSet.shift();
var bReinsert = false;

bReinsert = aActivity.perform();

if( bReinsert )
{
this.aCurrentActivityReinsertSet.push( aActivity );
}
else
{
this.aDequeuedActivitySet.push( aActivity );
}
}

if( this.aCurrentActivityReinsertSet.length != 0 )
{
this.aCurrentActivityWaitingSet = this.aCurrentActivityReinsertSet;
this.aCurrentActivityReinsertSet = [];
}
};

ActivityQueue.prototype.processDequeued = function()
{
var nSize = this.aDequeuedActivitySet.length;
for( var i = 0; i < nSize; ++i )
this.aDequeuedActivitySet[i].dequeued();

this.aDequeuedActivitySet = [];
};

ActivityQueue.prototype.isEmpty = function()
{
return ( ( this.aCurrentActivityWaitingSet.length == 0 ) &&
( this.aCurrentActivityReinsertSet.length == 0 ) );
};

ActivityQueue.prototype.clear = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.clear invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dequeued();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dequeued();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.endAll = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.endAll invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].end();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].end();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.getTimer = function()
{
return this.aTimer;
};

ActivityQueue.prototype.size = function()
{
return ( this.aCurrentActivityWaitingSet.length +
this.aCurrentActivityReinsertSet.length +
this.aDequeuedActivitySet.length );
};


function ElapsedTime( aTimeBase )
{
this.aTimeBase = aTimeBase;
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
}


ElapsedTime.prototype.getTimeBase = function()
{
return this.aTimeBase;
};

ElapsedTime.prototype.reset = function()
{
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
};

ElapsedTime.prototype.getElapsedTime = function()
{
this.nLastQueriedTime = this.getElapsedTimeImpl();
return this.nLastQueriedTime;
};

ElapsedTime.prototype.pauseTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInPauseMode = true;
};

ElapsedTime.prototype.continueTimer = function()
{
this.bInPauseMode = false;

var nPauseDuration = this.getElapsedTimeImpl() - this.nFrozenTime;

this.nStartTime += nPauseDuration;
};

ElapsedTime.prototype.adjustTimer = function( nOffset, bLimitToLastQueriedTime )
{
if( bLimitToLastQueriedTime == undefined )
bLimitToLastQueriedTime = true;

this.nStartTime -= nOffset;

if( this.bInHoldMode || this.bInPauseMode )
this.nFrozenTime += nOffset;
};

ElapsedTime.prototype.holdTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInHoldMode = true;
};

ElapsedTime.prototype.releaseTimer = function()
{
this.bInHoldMode = false;
};

ElapsedTime.prototype.getSystemTime = function()
{
return ( getCurrentSystemTime() / 1000.0 );
};

ElapsedTime.prototype.getCurrentTime = function()
{
var nCurrentTime;
if ( !this.aTimeBase )
{
nCurrentTime = this.getSystemTime();
}
else
{
nCurrentTime = this.aTimeBase.getElapsedTimeImpl();
}

assert( ( typeof( nCurrentTime ) === typeof( 0 ) ) && isFinite( nCurrentTime ),
'ElapsedTime.getCurrentTime: assertion failed: nCurrentTime == ' + nCurrentTime );


return nCurrentTime;
};

ElapsedTime.prototype.getElapsedTimeImpl = function()
{
if( this.bInHoldMode || this.bInPauseMode )
{
return this.nFrozenTime;
}

var nCurTime = this.getCurrentTime();
return ( nCurTime - this.nStartTime );
};


/*****
* @libreofficeend
*
* Several parts of the above code are the result of the porting,
* started on August 2011, of the C++ code included in the source files
* placed under the folder '/slideshow/source' and subfolders.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/

]]>
 </script>
</svg>